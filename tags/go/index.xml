<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on /home/yorodm</title>
    <link>https://yorodm.is-a.dev/tags/go/</link>
    <description>Recent content in go on /home/yorodm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-ES</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 17 Feb 2021 19:21:46 -0500</lastBuildDate><atom:link href="https://yorodm.is-a.dev/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Desarrollo en Golang: Futures/Promises</title>
      <link>https://yorodm.is-a.dev/blog/futures-go/</link>
      <pubDate>Wed, 17 Feb 2021 19:21:46 -0500</pubDate>
      
      <guid>https://yorodm.is-a.dev/blog/futures-go/</guid>
      <description>Entre las cosas que pienso adicionar al workshop de Go está un capítulo sobre patrones y técnicas para programación concurrente.
Future es un objeto que representa el resultado de un cálculo que se ejecuta de forma concurrente. Las futures se utilizan cuando tenemos un valor que es costoso de obtener pero sabemos de antemano como calcularlo.
Las facilidades de Go para manejar concurrencia hacen la implementación de futures en el lenguaje bastante sencilla.</description>
    </item>
    
    <item>
      <title>Parser SAX en Golang</title>
      <link>https://yorodm.is-a.dev/blog/golang-xml-sax/</link>
      <pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yorodm.is-a.dev/blog/golang-xml-sax/</guid>
      <description>El problema Tratando de migrar unas cosas del trabajo a Go me tropecé con la necesidad de procesar unos archivos XML (cada día doy más gracias por TOML y JSON) de tamaño considerable.
Una mirada por encima a encoding/xml me dejo bien claro que no existía un parser tipo xml.dom.minidom (el de la biblioteca estándar de Python) o algo como Expat. Las principales funciones (ej. las que salen en los ejemplos) están orientadas más hacia la serialización y deserialización de XML que a andar recorriendo documentos.</description>
    </item>
    
    <item>
      <title>Desarrollando con Emacs y Go</title>
      <link>https://yorodm.is-a.dev/blog/desarrollo-emacs-go/</link>
      <pubDate>Thu, 26 Oct 2017 15:04:13 -0400</pubDate>
      
      <guid>https://yorodm.is-a.dev/blog/desarrollo-emacs-go/</guid>
      <description>Tengo la muy sana costumbre de utilizar Emacs para todo lo que pueda (incluso revisar el correo) así que cuando me decidí a iniciar algunos proyectos en Go me alegró mucho que no existiera un IDE &amp;ldquo;oficial&amp;rdquo; para el lenguaje y si muchas herramientas, utilidades y plugins para que cada cual se arme la casa a su manera.
Haciendo un IDE en tres pasos. Convertir Emacs en un entorno de desarrollo para Go es una tarea bastante sencilla.</description>
    </item>
    
  </channel>
</rss>
