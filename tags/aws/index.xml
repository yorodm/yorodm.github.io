<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aws on /home/yorodm</title>
    <link>https://yorodm.github.io/tags/aws/</link>
    <description>Recent content in aws on /home/yorodm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 20 Jan 2020 11:50:59 -0500</lastBuildDate><atom:link href="https://yorodm.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>awstail: AWS Logs a la vieja usanza</title>
      <link>https://yorodm.github.io/blog/awstail/</link>
      <pubDate>Mon, 20 Jan 2020 11:50:59 -0500</pubDate>
      
      <guid>https://yorodm.github.io/blog/awstail/</guid>
      <description>awstail es una herramienta muy simple que cumple dos funciones:
 Darme la excusa para aprender Rust. Monitorear un grupo de logs en AWS Cloudwatch desde la terminal.  Por el momento, estas son las opciones que permite la herramienta:
awstail 0.3.0 Yoandy Rodriguez &amp;lt;yoandy.rmartinez@gmail.com&amp;gt; like tail -f for AWS Cloudwatch USAGE: awstail.exe [OPTIONS] &amp;lt;LOG_GROUP&amp;gt; FLAGS: -h, --help Prints help information -V, --version Prints version information OPTIONS: -p &amp;lt;PROFILE&amp;gt; Profile if using other than &#39;default&#39; -r &amp;lt;REGION&amp;gt; AWS region (defaults to us-east-1) -s &amp;lt;SINCE&amp;gt; Take logs since a given time (defaults to 5 minutes) -w &amp;lt;WATCH&amp;gt; Keep watching for new logs every n seconds (defaults to 10) ARGS: &amp;lt;LOG_GROUP&amp;gt; Log group name Posibles opciones futuras:</description>
    </item>
    
    <item>
      <title>Trucos Aws Lambda (parte 2)</title>
      <link>https://yorodm.github.io/blog/trucos-aws-lambda-ii/</link>
      <pubDate>Sun, 18 Nov 2018 12:39:59 -0500</pubDate>
      
      <guid>https://yorodm.github.io/blog/trucos-aws-lambda-ii/</guid>
      <description>Trucos con AWS Lambda (II). Truco 1. Utiliza las tags. Los tags en AWS nos permiten:
 Tener asociados un máximo de 50 a cada recurso. Llaves de hasta 128 caracteres Unicode. Valores de hasta 256 caracteres Unicode. Distinción entre mayúsculas y minúsculas para llaves y valores.  Basicamente todo lo que necesitamos para hacernos un caché:
lambda_cient = boto3.client(&amp;#39;lambda&amp;#39;) def save_cache(tags): # tags is a dict of string:string lambda_client.tag_resource( Resource=self_arn, # get it from handler context Tags=json.</description>
    </item>
    
    <item>
      <title>Trucos con AWS Lambda. (Parte 1)</title>
      <link>https://yorodm.github.io/blog/aws-lambda-tricks/</link>
      <pubDate>Thu, 25 Oct 2018 12:45:05 -0400</pubDate>
      
      <guid>https://yorodm.github.io/blog/aws-lambda-tricks/</guid>
      <description>Truco 1: Recursividad asíncrona. A veces queremos garantizar que una lambda se ejecute siempre de forma asíncrona.
def lambda_handler(event, context): if not event.get(&amp;#39;async&amp;#39;): invoke_self_async(event, context) return def invoke_self_async(event, context): new_event = { &amp;#39;async&amp;#39;: True, &amp;#39;data&amp;#39;: event } boto3.client(&amp;#39;lambda&amp;#39;).invoke_async( FunctionName=context.invoked_function_arn, InvokeArgs=json.dumps(new_event) ) Este truco es muy útil cuando no nos interesa el resultado de la ejecución o el mismo es enviado por vías alternativas (ej. usando SNS)
Truco 2: Planificación dinámica. A veces la planificación de un servicio debe ser alterada en dependencia de ciertas condiciones.</description>
    </item>
    
  </channel>
</rss>
