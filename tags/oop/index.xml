<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>oop on /home/yorodm</title>
    <link>https://yorodm.github.io/tags/oop/</link>
    <description>Recent content in oop on /home/yorodm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 14 Mar 2021 20:38:14 +0200</lastBuildDate><atom:link href="https://yorodm.github.io/tags/oop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mediator en Rust (I)</title>
      <link>https://yorodm.github.io/blog/type-safe-mediator-rust/</link>
      <pubDate>Sun, 14 Mar 2021 20:38:14 +0200</pubDate>
      
      <guid>https://yorodm.github.io/blog/type-safe-mediator-rust/</guid>
      <description>Un Rustacean en tierras de Dotnet. Un amigo me hace una pregunta mientras conversábamos sobre las ventajas de MediatR. ¿Qué te haces en Rust si quieres un mediator? Y de ahí salió la excusa para este artículo.
MediatR para Rustaceans. MediatR es (en sus propias palabras) una implementación sencilla del patrón mediator para .NET. Entre sus características más utilizadas está la posibilidad de comunicación entre componentes (in process) de forma sencilla.</description>
    </item>
    
  </channel>
</rss>
