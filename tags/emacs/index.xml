<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emacs on /home/yorodm</title>
    <link>https://yorodm.is-a.dev/tags/emacs/</link>
    <description>Recent content in emacs on /home/yorodm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-ES</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 17 Aug 2021 13:48:16 +0300</lastBuildDate><atom:link href="https://yorodm.is-a.dev/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Desarrollando con Nix y Emacs</title>
      <link>https://yorodm.is-a.dev/blog/nix-development-emacs/</link>
      <pubDate>Tue, 17 Aug 2021 13:48:16 +0300</pubDate>
      
      <guid>https://yorodm.is-a.dev/blog/nix-development-emacs/</guid>
      <description>Si eres usuario de Visual Studio Code es muy probable que hayas utilizado Remote Containers y Docker para desarrollar o simplemente probar alg√∫n nuevo lenguaje/tecnolog√≠a sin tener que modificar nuestro sistema. Aunque la idea de usar de usar entornos aislados para desarrollar no es nueva (los desarrolladores de Python conocen varias alternativas)
Nix en pocas palabras Tanto Nix como NixOS vienen dando que hablar desde hace un tiempo en el mundo de Linux.</description>
    </item>
    
    <item>
      <title>Emacs &#43; Hugo: Haciendo `hugo-blog-mode` (II)</title>
      <link>https://yorodm.is-a.dev/blog/hugo-mode-emacs-ii/</link>
      <pubDate>Tue, 06 Oct 2020 17:45:15 -0400</pubDate>
      
      <guid>https://yorodm.is-a.dev/blog/hugo-mode-emacs-ii/</guid>
      <description>En el art√≠culo anterior (hace unos cuantos meses ya) estuve hablando sobre como comenc√© automatizando el flujo de publicaci√≥n del blog usando scripts. En este les mostrar√© como llevamos esos scripts a un modo de Emacs.
Manos al Emacs. Una de las ventajas de Emacs es su extensibilidad, con un poco de c√≥digo Elisp podemos adicionar nuevas funcionalidades al editor. Aunque ser√≠a posible hacer un modo1 para crear toda una experiencia relacionada con el manejo de blogs, es mucho m√°s sencillo crear comandos2.</description>
    </item>
    
    <item>
      <title>Emacs &#43; Hugo: Haciendo `hugo-blog-mode` (I)</title>
      <link>https://yorodm.is-a.dev/blog/hugo-mode-emacs/</link>
      <pubDate>Sun, 07 Jul 2019 11:03:33 -0400</pubDate>
      
      <guid>https://yorodm.is-a.dev/blog/hugo-mode-emacs/</guid>
      <description>Este blog es creado con Hugo y publicado utilizando Github Pages. Cada art√≠culo es creado utilizando Markdown y a√±adido a un repositorio donde finalmente pasa a formar parte del sitio est√°tico utilizando subm√≥dulos de Git.
Todo este proceso implica utilizar 3 herramientas.
 La CLI de hugo. Un editor de texto (preferentemente con soporte para Markdown). Git.  Mis primeros intentos implicaron hacer uso de unos cuantos scripts
Uno para crear nuevos art√≠culos</description>
    </item>
    
    <item>
      <title>Emacs &#43; Golang. Edici√≥n 2019</title>
      <link>https://yorodm.is-a.dev/blog/emacs-golang-setup-2019/</link>
      <pubDate>Mon, 25 Mar 2019 15:34:27 -0400</pubDate>
      
      <guid>https://yorodm.is-a.dev/blog/emacs-golang-setup-2019/</guid>
      <description>Go 1.12 fue lanzado hace un mes y entre los cambios m√°s significativos se encuentran varias mejoras en el soporte para m√≥dulos (que va a ser el m√©todo por defecto en la versi√≥n 1.13).
Si eres usuario de Emacs y te interesa desarrollar utilizando Go, aqu√≠ tienes una gu√≠a sencilla de como habilitar el soporte para el lenguaje.
Paso 1. Language server protocol Si tienes una versi√≥n actualizada de lsp-mode ya tienes soporte para bingo, una herramienta que provee un servidor de lenguajes para Go y que tiene soporte integrado para trabajar con m√≥dulos</description>
    </item>
    
    <item>
      <title>Scrapper para DEV desde Emacs</title>
      <link>https://yorodm.is-a.dev/blog/web-scrapping-emacs/</link>
      <pubDate>Tue, 20 Nov 2018 17:28:59 -0500</pubDate>
      
      <guid>https://yorodm.is-a.dev/blog/web-scrapping-emacs/</guid>
      <description>Reci√©n publiqu√© en DEV un art√≠culo acerca de como hacer un scrapper para obtener los t√≠tulos del feed principal. El art√≠culo surgi√≥ de una discusi√≥n amistosa acerca de la relevancia de Common Lisp como tecnolog√≠a en la actualidad y qued√© muy satisfecho con el resultado.
Me llam√≥ tanto la atenci√≥n la simpleza detr√°s de las bibliotecas utilizadas que decid√≠ ver si hab√≠a una para Emacs Lisp y&amp;hellip; TL;DR, aqu√≠ est√° el scrapper üòç.</description>
    </item>
    
    <item>
      <title>Desarrollando con Emacs y Go</title>
      <link>https://yorodm.is-a.dev/blog/desarrollo-emacs-go/</link>
      <pubDate>Thu, 26 Oct 2017 15:04:13 -0400</pubDate>
      
      <guid>https://yorodm.is-a.dev/blog/desarrollo-emacs-go/</guid>
      <description>Tengo la muy sana costumbre de utilizar Emacs para todo lo que pueda (incluso revisar el correo) as√≠ que cuando me decid√≠ a iniciar algunos proyectos en Go me alegr√≥ mucho que no existiera un IDE &amp;ldquo;oficial&amp;rdquo; para el lenguaje y si muchas herramientas, utilidades y plugins para que cada cual se arme la casa a su manera.
Haciendo un IDE en tres pasos. Convertir Emacs en un entorno de desarrollo para Go es una tarea bastante sencilla.</description>
    </item>
    
    <item>
      <title>Hugo y Emacs</title>
      <link>https://yorodm.is-a.dev/blog/hugo-y-emacs/</link>
      <pubDate>Thu, 19 Oct 2017 15:26:34 -0400</pubDate>
      
      <guid>https://yorodm.is-a.dev/blog/hugo-y-emacs/</guid>
      <description>Como comentaba en el primer post, decid√≠ comenzar desde cero, aprovechando las bondades de Github Pages y Hugo como generador de sitios est√°tico. En lo que a generador de sitios est√°ticos se refiere Hugo es bastante sencillo de operar, por lo que inicialmente pens√© en hacerme unos scripts para organizar el workflow de trabajo de la siguiente manera:
 Hacer nuevo post. Previsualizar. Subir a GitHub.  Todo esto organizado, claro est√°, en una rama develop para trabajar y una master tanto para el repositorio donde guardo las fuentes del sitio como para el que queda publicado.</description>
    </item>
    
  </channel>
</rss>
