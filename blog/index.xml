<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Blog on /home/yorodm</title>
		<link>https://yorodm.is-a.dev/blog/</link>
		<description>Recent content in Blog on /home/yorodm</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>es-ES</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Tue, 17 Aug 2021 13:48:16 +0300</lastBuildDate>
		<atom:link href="https://yorodm.is-a.dev/blog/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Desarrollando con Nix y Emacs</title>
			<link>https://yorodm.is-a.dev/blog/nix-development-emacs/</link>
			<pubDate>Tue, 17 Aug 2021 13:48:16 +0300</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/nix-development-emacs/</guid>
			<description>Si eres usuario de Visual Studio Code es muy probable que hayas utilizado Remote Containers y Docker para desarrollar o simplemente probar algún nuevo lenguaje/tecnología sin tener que modificar nuestro sistema. Aunque la idea de usar de usar entornos aislados para desarrollar no es nueva (los desarrolladores de Python conocen varias alternativas)
Nix en pocas palabras Tanto Nix como NixOS vienen dando que hablar desde hace un tiempo en el mundo de Linux.</description>
			<content type="html"><![CDATA[<p>Si eres usuario de <a href="https://code.visualstudio.com/">Visual Studio
Code</a> es muy probable que hayas
utilizado Remote Containers y <a href="https://docker.com">Docker</a> para
desarrollar o simplemente probar algún nuevo lenguaje/tecnología sin
tener que modificar nuestro sistema. Aunque la idea de usar de usar
entornos aislados para desarrollar no es nueva (los desarrolladores de
Python conocen <a href="https://virtualenv.pypa.io/en/latest/">varias</a>
<a href="https://docs.python.org/3/library/venv.html">alternativas</a>)</p>
<h2 id="nix-en-pocas-palabras">Nix en pocas palabras</h2>
<p>Tanto <a href="https://nixos.org">Nix como NixOS</a> vienen dando que hablar
desde hace un tiempo en el mundo de Linux. Su filosofía se basa en
crear un sistema que cumpla las siguientes características.</p>
<ol>
<li>Reproducible: Si un paquete funciona en la máquina X, debe
funcionar en la máquina Y.</li>
<li>Declarativo: El entorno se describe usando el lenguaje <strong>Nix</strong>.</li>
<li>Fiable: instalar o actualizar un paquete no puede hacer fallar la
configuración existente.</li>
</ol>
<p>¿Pero no es esto lo mismo que nos promete <strong>Docker</strong>?. En teoría si, en
la práctica es una de esas cuestiones de <em>filosofía a</em> vs <em>filosofía
b</em> que se escapa un poco del alcance de este artículo por lo que no
voy a ponerme a debatir sobre ella. Solo basta decir que hay más
diferencias que similitudes entre una <em>derivación</em> de <strong>Nix</strong> y un
<em>Dockerfile</em>*.</p>
<h2 id="instalando-nix">Instalando Nix.</h2>
<p>Instalar <strong>Nix</strong> es bastante sencillo . El sitio oficicial incluye una
<a href="https://nixos.org/learn.html">guía rápida</a> y bastante documentación
sobre como dar los primeros pasos. Aunque el esto de la guía es densa
y plagada de términos técnicos que no son muy amigables para los
recién llegados, existen otros recursos más accesibles (Dejo una lista
en la sección de referencias)</p>
<p>Por suerte, si usas <a href="https://archlinux.org/">Archlinux</a> puedes seguir
la guía en la <a href="https://wiki.archlinux.org/title/Nix">wiki</a> y tener
<strong>Nix</strong> disponible en pocos pasos.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">$ sudo pacman -S archlinux-nix
$ sudo archlinux-nix setup-build-group
$ sudo archlinux-nix bootstrap
$ nix-channel --add https://nixos.org/channels/nixpkgs-unstable
$ nix-channel --update
$ nix-env -u

</code></pre></div><p>Podemos iniciar un <em>shell</em> de <strong>Nix</strong> nuevo utilizando el comando
<code>nix-shell</code>. Probemos arrancar un entorno con
<a href="https://deno.land/">Deno</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ nix-shell -p deno --pure
</code></pre></div><p>Con el comando anterior creamos un entorno temporal <em>puro</em> donde solo
tenemos lo necesario para operar (las <strong>coreutils</strong>) y <strong>Deno</strong> con
sus dependencias. Todo esto totalmente aislado del sistema (por eso la
parte de <em>puro</em>).</p>
<p>Ahora veamos cómo utilizar esto para hacer entornos de desarrollo.</p>
<h2 id="nix--direnv--emacs--">Nix + Direnv + Emacs = (❤)</h2>
<p>Lo primero que necesitamos es una forma de indicarle al <code>nix-shell</code>
que queremos tener en nuestro entorno. Para eso creamos el archivo
<code>shell.nix</code> con el siguiente contenido</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="k">let</span>
  <span class="n">pkgs</span> <span class="o">=</span> <span class="kn">import</span> <span class="sr">&lt;nixpkgs&gt;</span> <span class="p">{};</span>
<span class="k">in</span>
<span class="n">pkgs</span><span class="o">.</span><span class="n">mkShell</span> <span class="p">{</span>
  <span class="n">name</span> <span class="o">=</span><span class="s2">&#34;deno-env&#34;</span><span class="p">;</span>
  <span class="n">buildInputs</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
	<span class="n">deno</span>
	<span class="n">python38</span>
  <span class="p">];</span>
<span class="p">}</span>
</code></pre></div><p>Ahora solo necesitamos entrar al directorio donde se encuentra el
archivo y ejecutar <code>nix-shell --pure</code> y tenemos <strong>Deno</strong> y <strong>Python
3.8</strong> a nuestra disposición. ¿Qué tal si soy un fan de
<a href="https://golang.org">Golang</a>?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"> <span class="n">pkgs</span> <span class="err">=</span> <span class="kn">import</span> <span class="sr">&lt;nixpkgs&gt;</span> <span class="p">{};</span>
<span class="n">in</span>
<span class="n">pkgs</span><span class="o">.</span><span class="n">mkShell</span> <span class="p">{</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;go-env&#34;</span><span class="p">;</span>
  <span class="n">buildInputs</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
    <span class="n">go</span>
    <span class="n">gosec</span>
    <span class="n">golangci-lint</span>
    <span class="n">gopls</span>
    <span class="n">delve</span>
  <span class="p">];</span>

  <span class="n">shellHook</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span><span class="s1">    unset GOPATH GOROOT
</span><span class="s1">    export GO111MODULE=on
</span><span class="s1">  &#39;&#39;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>Bueno, se entiende la idea. Podemos buscar cualquier paquete necesario
en <a href="https://search.nixos.org/packages">el repo oficial de Nixos</a> o en
<a href="https://nur.nix-community.org/">NUR</a> e incluirlo en la lista de los
<em>inputs</em> necesarios para la derivación. Incluso podemos declarar o
sobrescribir variables de entorno.</p>
<p>Nuestro segundo objetivo es evitar escribir <code>nix-shell</code> cada vez que
queremos activar la configuración. <a href="https://direnv.net/">Direnv</a> es
una herramienta que nos permite cargar variables de entorno cada vez
que entramos a un directorio o sus hijos.</p>
<p><strong>Direnv</strong> funciona mediante uso de <em>hooks</em> en el shell y requiere un
archivo <code>.envrc</code> donde el usuario define las variables usando la
sintaxis <code>VAR=VALUE</code>, aunque en nuestro caso haremos uso de la función
estándar <code>use_nix</code>. Es tan sencillo como ejecutar los siguientes pasos</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$  <span class="nb">echo</span> <span class="s2">&#34;use_nix&#34;</span> &gt;&gt; .envrc
$  direnv allow .
</code></pre></div><p>La función <code>use_nix</code> ejecuta y obtiene el entorno de <code>nix-shell</code> y lo
inyecta en el <em>shell</em> regular.</p>
<blockquote>
<p>Si has prestado atención hasta ahora o simplemente experimentaste
con los <em>snippets</em> debes haber notado que al usar este método no
creas un entorno <em>puro</em>. Aunque parezca contraproducente, esto no
afecta el modo en que</p>
</blockquote>
<p>El paso final es integrar todo con <strong>Emacs</strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">direnv</span>
  <span class="nb">:pin</span> <span class="nv">melpa</span>
  <span class="nb">:ensure</span> <span class="no">t</span><span class="p">)</span>
</code></pre></div><p>El paquete <strong>direnv</strong> nos brinda un conjunto de funciones para
utilizar <strong>direnv</strong> desde el editor. Utilizarlo es tan sencillo como
navegar hasta el directorio usando <em>dired</em> y ejecutar <em>direnv-allow</em> o
activar el modo menor <em>direnv-mode</em>.</p>
<h2 id="the-end">The end?</h2>
<p>Con estos simples pasos podemos replicar (parcialmente) la
funcionalidad de <em>Remote Containers</em>, creando entornos de desarrollo
<em>ad-hoc</em> o incluso manteniendo versiones incompatibles de un
compilador o SDK sin que esto afecte el resto del sistema.</p>
<p>En próximas entregas veremos como expandir este <em>setup</em> y utilizar
<strong>Nix</strong> para:</p>
<ol>
<li>Compilar y empaquetar nuestro proyecto.</li>
<li>Crear imágenes de <strong>Docker</strong>.</li>
<li><em>Cross-compiling</em>.</li>
<li>Otros trucos que todavía no se me han ocurrido.</li>
</ol>
<h2 id="referencias">Referencias</h2>
<ul>
<li>Nix Pills: <a href="https://nixos.org/nixos/nix-pills/">https://nixos.org/nixos/nix-pills/</a></li>
<li>Nix Shorts: <a href="https://github.com/justinwoo/nix-shorts">https://github.com/justinwoo/nix-shorts</a></li>
<li>NixOS: For Developers: <a href="https://myme.no/posts/2020-01-26-nixos-for-development.html">https://myme.no/posts/2020-01-26-nixos-for-development.html</a></li>
<li>Nix Pills: <a href="https://nixos.org/guides/nix-pills/">https://nixos.org/guides/nix-pills/</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Mediator en Rust</title>
			<link>https://yorodm.is-a.dev/blog/type-safe-mediator-rust/</link>
			<pubDate>Sun, 14 Mar 2021 20:38:14 +0200</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/type-safe-mediator-rust/</guid>
			<description>UPDATE 2021-03-15T22:46:50+02:00. Un lector (pues si, tengo lectores) me comentó sobre un error en Mediator::send. Cosas que pasan cuando transcribes y experimentas desde el playground.
 Un Rustacean en tierras de Dotnet. Un amigo me hace una pregunta mientras conversábamos sobre las ventajas de MediatR. ¿Qué te haces en Rust si quieres un mediator? Y de ahí salió la excusa para este artículo.
MediatR para Rustaceans. MediatR es (en sus propias palabras) una implementación sencilla del patrón mediator para .</description>
			<content type="html"><![CDATA[<blockquote>
<p><strong>UPDATE 2021-03-15T22:46:50+02:00</strong>. Un lector (pues si, tengo
lectores) me comentó sobre un error en <code>Mediator::send</code>. Cosas que
pasan cuando transcribes y experimentas desde el playground.</p>
</blockquote>
<h2 id="un-rustacean-en-tierras-de-dotnet">Un Rustacean en tierras de Dotnet.</h2>
<p>Un amigo me hace una pregunta mientras conversábamos sobre las
ventajas de <a href="https://github.com/jbogard/MediatR">MediatR</a>. ¿Qué te
haces en Rust si quieres un <em>mediator</em>? Y de ahí salió la excusa para
este artículo.</p>
<h2 id="mediatr-para-rustaceans">MediatR para Rustaceans.</h2>
<p><strong>MediatR</strong> es (en sus propias palabras) una implementación sencilla
del patrón <em>mediator</em> para .NET. Entre sus características más
utilizadas está la posibilidad de comunicación entre componentes (in
process) de forma sencilla.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c#" data-lang="c#"><span class="c1">/// Mensaje a enviar
</span><span class="c1"></span><span class="k">public</span> <span class="k">class</span> <span class="nc">Ping</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="p">{</span>
<span class="p">}</span>

<span class="c1">/// Handler para el mensaje
</span><span class="c1"></span><span class="k">public</span> <span class="k">class</span> <span class="nc">PingHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">Ping</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Handle</span><span class="p">(</span><span class="n">Ping</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">FromResult</span><span class="p">(</span><span class="s">&#34;Pong&#34;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// Componente que se comunica con PingHandler
</span><span class="c1"></span><span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">mediator</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="k">new</span> <span class="n">Ping</span><span class="p">());</span>
<span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">response</span><span class="p">);</span> <span class="c1">// &#34;Pong&#34;
</span></code></pre></div><p>El enlace entre la solicitud de tipo <code>Ping</code> y el <code>PingHandler</code> ocurre
automáticamente gracias a <em>reflection</em> y otros procesos malignos de
.NET que a nosotros como Rustaceans no nos interesan<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="implementando-en-rust">Implementando en Rust.</h2>
<p>Veamos primero qué queremos lograr.</p>
<ol>
<li>Definir tipos como <em>Requests</em> o <em>Handlers</em>.</li>
<li>Registrar estos tipos en un <em>Mediator</em>.</li>
<li>Enviar mensajes entre componentes usando el <em>Mediator</em>.</li>
</ol>
<p>Traduciendo el ejemplo anterior quedaría algo como esto:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="sd">/// Esto es un marker trait
</span><span class="sd"></span><span class="k">pub</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">Request</span>: <span class="nb">&#39;static</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Ping</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="sd">/// Marcamos Ping como Request
</span><span class="sd"></span><span class="k">impl</span><span class="w"> </span><span class="n">Request</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Ping</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">Handler</span><span class="o">&lt;</span><span class="n">I</span><span class="p">,</span><span class="w"> </span><span class="n">O</span><span class="o">&gt;</span><span class="w">
</span><span class="w"></span><span class="k">where</span><span class="w">
</span><span class="w">    </span><span class="n">I</span>: <span class="nc">Request</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">O</span>: <span class="nb">Sized</span>
<span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">handle</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">r</span>: <span class="nc">I</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">O</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">PingHandler</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Handler</span><span class="o">&lt;</span><span class="n">Ping</span><span class="p">,</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">PingHandler</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">handle</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">_</span>: <span class="nc">Ping</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">String</span> <span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="s">&#34;Pong&#34;</span><span class="p">.</span><span class="n">to_owned</span><span class="p">()</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>Para simplificar la implementación evitaremos trabajar con tipos de
referencias.</p>
<h3 id="creando-un-registro-de-tipos">Creando un registro de tipos.</h3>
<p>El siguiente paso es crear un registro que mantenga la relación entre
los <code>Request</code> y los <code>RequestHandler</code>. Will Crichton tiene un artículo
bastante interesante acerca de <a href="https://willcrichton.net/notes/types-over-strings/">arquitecturas extensibles en
Rust</a> en el que
nos muestra como usar <code>std::any::TypeId</code> y <code>std::any::Any</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">collections</span>::<span class="n">HashMap</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">any</span>::<span class="p">{</span><span class="n">TypeId</span><span class="p">,</span><span class="w"> </span><span class="n">Any</span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">TypeMap</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nc">TypeMap</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="n">TypeMap</span><span class="p">(</span><span class="n">HashMap</span>::<span class="o">&lt;</span><span class="n">TypeId</span><span class="p">,</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Any</span><span class="o">&gt;&gt;</span>::<span class="n">new</span><span class="p">())</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">set</span><span class="o">&lt;</span><span class="n">R</span>: <span class="nb">&#39;static</span><span class="p">,</span><span class="w"> </span><span class="n">H</span>: <span class="nc">Any</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">&#39;static</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">t</span>: <span class="nc">H</span><span class="p">){</span><span class="w">
</span><span class="w">    </span><span class="bp">self</span><span class="p">.</span><span class="mf">0.</span><span class="n">insert</span><span class="p">(</span><span class="n">TypeId</span>::<span class="n">of</span>::<span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">Box</span>::<span class="n">new</span><span class="p">(</span><span class="n">t</span><span class="p">));</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">get_mut</span><span class="o">&lt;</span><span class="n">R</span>:<span class="nb">&#39;static</span><span class="p">,</span><span class="w"> </span><span class="n">H</span>: <span class="nb">&#39;static</span><span class="o">+</span><span class="n">Any</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">H</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="bp">self</span><span class="p">.</span><span class="mf">0.</span><span class="n">get_mut</span><span class="p">(</span><span class="o">&amp;</span><span class="n">TypeId</span>::<span class="n">of</span>::<span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span><span class="p">()).</span><span class="n">and_then</span><span class="p">(</span><span class="o">|</span><span class="n">t</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="n">t</span><span class="p">.</span><span class="n">downcast_mut</span>::<span class="o">&lt;</span><span class="n">H</span><span class="o">&gt;</span><span class="p">()</span><span class="w">
</span><span class="w">    </span><span class="p">})</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><code>TypeId</code> nos permite crear un identificador único para cada tipo en
nuestro código mientras que <code>Any</code> es un trait que nos permite emular
tipado dinámico en <strong>Rust</strong>. Mediante una combinacíon de los 2 podemos
utilizar un <code>HashMap</code> que relacione un tipo (<code>Request</code>) con un <code>trait object</code> (<code>RequestHandler</code>)</p>
<h2 id="implementando-el-mediator">Implementando el Mediator</h2>
<p><code>Mediator</code> es una simple estructra que contiene un <code>TypeMap</code> y dos
funciones.</p>
<ol>
<li>Adicionar un <code>Handler</code> para un <code>Request</code>.</li>
<li>Enviar un mensaje y esperar que el <code>Handler</code> correspondiente lo
procese.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Mediator</span><span class="p">(</span><span class="n">TypeMap</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">type</span> <span class="nc">Wrapper</span><span class="o">&lt;</span><span class="n">R</span><span class="p">,</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">RequestHandler</span><span class="o">&lt;</span><span class="n">R</span><span class="p">,</span><span class="n">T</span><span class="o">&gt;&gt;</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Mediator</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="w"> </span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nc">Mediator</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="n">Mediator</span><span class="p">(</span><span class="n">TypeMap</span>::<span class="n">new</span><span class="p">())</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">add_handler</span><span class="o">&lt;</span><span class="n">R</span><span class="p">,</span><span class="w"> </span><span class="n">H</span><span class="p">,</span><span class="w"> </span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">f</span>: <span class="nc">H</span><span class="p">)</span><span class="w">
</span><span class="w">  </span><span class="k">where</span><span class="w">
</span><span class="w">    </span><span class="n">R</span>: <span class="nc">Request</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">H</span>: <span class="nc">RequestHandler</span><span class="o">&lt;</span><span class="n">R</span><span class="p">,</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">&#39;static</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">T</span>: <span class="nb">&#39;static</span><span class="w">
</span><span class="w">  </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="bp">self</span><span class="p">.</span><span class="mf">0.</span><span class="n">set</span>::<span class="o">&lt;</span><span class="n">R</span><span class="p">,</span><span class="n">Wrapper</span><span class="o">&lt;</span><span class="n">R</span><span class="p">,</span><span class="n">T</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="nb">Box</span>::<span class="n">new</span><span class="p">(</span><span class="n">f</span><span class="p">));</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">send</span><span class="o">&lt;</span><span class="n">R</span>: <span class="nc">Request</span><span class="p">,</span><span class="w"> </span><span class="n">T</span>: <span class="nb">&#39;static</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">r</span>: <span class="nc">R</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="bp">self</span><span class="p">.</span><span class="mf">0.</span><span class="n">get_mut</span>::<span class="o">&lt;</span><span class="n">R</span><span class="p">,</span><span class="n">Wrapper</span><span class="o">&lt;</span><span class="n">R</span><span class="p">,</span><span class="n">T</span><span class="o">&gt;&gt;</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">h</span><span class="o">|</span><span class="w"> </span><span class="n">h</span><span class="p">.</span><span class="n">handle</span><span class="p">(</span><span class="n">r</span><span class="p">))</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>De nuevo, los <code>'static</code> están ahí para evitar tener que lidear con
complicaciones de <em>lifetimes</em>.</p>
<h2 id="the-end">The end.</h2>
<p>A diferencia de <strong>MediaTr</strong> tenemos que registrar los pares
<em>Request/Handler</em> manualmente, aunque podemos hacer uso de la
inferencia de tipos de <strong>Rust</strong> (para escribir menos).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Mediator</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">m</span><span class="p">.</span><span class="n">add_handler</span>::<span class="o">&lt;</span><span class="n">Ping</span><span class="p">,</span><span class="n">_</span><span class="p">,</span><span class="n">_</span><span class="o">&gt;</span><span class="p">(</span><span class="n">PingHandler</span><span class="p">{});</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">x</span>: <span class="nb">Option</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">m</span><span class="p">.</span><span class="n">send</span>::<span class="o">&lt;</span><span class="n">Ping</span><span class="p">,</span><span class="n">_</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Ping</span><span class="p">{});</span><span class="w">
</span><span class="w">    </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="n">x</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>Y finalmente tenemos una versión <em>extremadamente simple</em> del patrón
mediator en Rust. Si estás interesado en aprender un poco más
recomiendo:</p>
<ol>
<li>Modificar <code>Mediator::send</code> para que retorne un <code>Result</code> con una
implementación de <code>Error</code> propia (dificultad simple).</li>
<li>Modificar el código para que <code>Handler::handle</code> pueda retornar referencias (dificultad intermedia).</li>
<li>Permitir que los tipos que implementen <code>Request</code> puedan contener referencias (dificultad alta).</li>
</ol>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Dejo constancia de que IRL mi sustento se obtiene vía muchas
líneas de código C#.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
		</item>
		
		<item>
			<title>Pipelines en Rust (II)</title>
			<link>https://yorodm.is-a.dev/blog/rust-pipeline-pattern-ii/</link>
			<pubDate>Mon, 22 Feb 2021 16:03:13 -0500</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/rust-pipeline-pattern-ii/</guid>
			<description>En el artículo anterior hablamos sobre la creación de pipelines extremadamente sencillas en Rust.
Si recuerdan, la implementación se ejecutaba de forma secuencial lo que en el momento pudo parecer suficiente, pero si lo pensamos mejor nos damos cuenta que limita mucho la aplicabilidad del modelo. Una mejor idea sería poder usar nuestros pipelines de forma concurrente.
Async Step La primera tarea es convertir nuestra implementación de Step a algo que sea usable de forma asíncrona.</description>
			<content type="html"><![CDATA[<p>En el <a href="/blog/rust-pipeline-pattern/">artículo anterior</a>
hablamos sobre la creación de pipelines <em>extremadamente sencillas</em> en
Rust.</p>
<p>Si recuerdan, la implementación se ejecutaba de forma secuencial lo
que en el momento pudo parecer suficiente, pero si lo pensamos mejor
nos damos cuenta que limita mucho la aplicabilidad del modelo. Una
mejor idea sería poder usar nuestros pipelines de forma <em>concurrente</em>.</p>
<h2 id="async-step">Async Step</h2>
<p>La primera tarea es convertir nuestra implementación de <code>Step</code> a algo
que sea usable de forma asíncrona.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// Todos estos serán necesarios más adelante
</span><span class="c1"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">collections</span>::<span class="n">VecDeque</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">error</span>::<span class="n">Error</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">fmt</span>::<span class="n">Display</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">future</span>::<span class="o">*</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">pin</span>::<span class="n">Pin</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">sync</span>::<span class="n">Arc</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">sync</span>::<span class="n">Mutex</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">task</span>::<span class="n">Poll</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">type</span> <span class="nc">StepResult</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span>::<span class="n">result</span>::<span class="nb">Result</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="w"> </span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;&gt;</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">type</span> <span class="nc">Output</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Pin</span><span class="o">&lt;</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Future</span><span class="o">&lt;</span><span class="n">Output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">StepResult</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;&gt;&gt;</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">AsyncStep</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">Item</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">it</span>: <span class="nc">Self</span>::<span class="n">Item</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Output</span><span class="o">&lt;</span><span class="n">Self</span>::<span class="n">Item</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Multiplier</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">value</span>: <span class="kt">u8</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">AsyncStep</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Multiplier</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">Item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kt">u8</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">it</span>: <span class="kt">u8</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Output</span><span class="o">&lt;</span><span class="n">Self</span>::<span class="n">Item</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">Box</span>::<span class="n">pin</span><span class="p">(</span><span class="n">futures</span>::<span class="n">future</span>::<span class="n">ready</span><span class="p">(</span><span class="nb">Ok</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">value</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">it</span><span class="p">)))</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>Como <strong>Rust</strong> todavía no permite usar <code>async</code> en <code>traits</code> vamos a
devolver un <code>Future</code>. El alias <code>Output</code> lo creamos por un problema de
ergonomía.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">type</span> <span class="nc">Output</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Pin</span><span class="o">&lt;</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Future</span><span class="o">&lt;</span><span class="n">Output</span><span class="o">=</span><span class="n">StepResult</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">&#39;static</span><span class="o">&gt;&gt;</span><span class="w">
</span></code></pre></div><p>En resumen, nuestro valor de retorno es un <em>trait object</em> que
representa un <code>Future</code> que al resolverse nos da un <code>StepResult</code>. El
<code>Pin</code> es necesario <a href="https://rust-lang.github.io/async-book/04_pinning/01_chapter.html">por cuestiones que no voy a explicar
aquí</a>.</p>
<p>Para retornar este tipo de valor podemos usar <code>Box::pin</code> y bloques
<code>async</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">it</span>: <span class="kt">u8</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Output</span><span class="o">&lt;</span><span class="n">Self</span>::<span class="n">Item</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Ok</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">value</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">it</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="nb">Box</span>::<span class="n">pin</span><span class="p">(</span><span class="k">async</span><span class="w"> </span><span class="k">move</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">x</span><span class="w">
</span><span class="w">    </span><span class="p">})</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><h2 id="async-pipeline">Async Pipeline</h2>
<p>Nuestra implementación de <code>Step</code> para <code>Pipeline</code> utilizaba un simple
<code>fold</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">it</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">StepResult</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="bp">self</span><span class="p">.</span><span class="n">v</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">fold</span><span class="p">(</span><span class="nb">Ok</span><span class="p">(</span><span class="n">it</span><span class="p">),</span><span class="w"> </span><span class="o">|</span><span class="n">acc</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="o">|</span><span class="w"> </span><span class="n">acc</span><span class="p">.</span><span class="n">and_then</span><span class="p">(</span><span class="o">|</span><span class="n">v</span><span class="o">|</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">v</span><span class="p">)))</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>Aunque parezca que es posible reutilizar este mecanismo, la solución
sería demasiado problemática. Retornar el valor de una función <code>async</code>
en un contexto no <code>async</code> no es tarea sencilla en Rust y <code>fold</code> no
está diseñado para tratar con <code>Future</code>.</p>
<p>Esto nos deja con dos opciones.</p>
<ol>
<li>Crear un <code>Stream</code> a partir del <code>VecDequeue</code> y aplicar
<code>StreamExt::fold</code>, manteniendo la simetría con la solución actual.</li>
<li>Implementar nuestro propio <code>Future</code> que procese y encadene los
<code>AsyncStep</code>.</li>
</ol>
<p>Exploremos la variante (1) que a simple vista parece más sencilla.</p>
<h2 id="async-pipeline-con-streams">Async Pipeline (con Streams).</h2>
<p>Un <code>Stream</code> es para todos los efectos un <code>Iterator</code> que produce
valores de forma <em>asíncrona</em>. El módulo <code>futures:stream</code> incluye la
función <code>iter</code> que nos permite convertir un <code>Iterator</code> en un <code>Stream</code>.</p>
<p>En el trait <code>futures::stream::StreamExt</code> tenemos versiones <code>async</code> de
las API de <code>Iterator</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">futures</span>::<span class="n">stream</span>::<span class="p">{</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">StreamExt</span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Pipeline</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">async</span><span class="w"> </span><span class="k">fn</span> <span class="nf">run_stream</span><span class="p">(</span><span class="o">&amp;</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">val</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">StepResult</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">v</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">v</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">stream</span>::<span class="n">iter</span><span class="p">(</span><span class="n">v</span><span class="p">).</span><span class="n">fold</span><span class="p">(</span><span class="nb">Ok</span><span class="p">(</span><span class="n">val</span><span class="p">),</span><span class="w"> </span><span class="o">|</span><span class="n">acc</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="o">|</span><span class="w"> </span><span class="k">async</span><span class="w"> </span><span class="k">move</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="k">match</span><span class="w"> </span><span class="n">acc</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">),</span><span class="w">
</span><span class="w">                </span><span class="nb">Ok</span><span class="p">(</span><span class="n">o</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">o</span><span class="p">).</span><span class="k">await</span><span class="p">,</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">});</span><span class="w">
</span><span class="w">        </span><span class="n">s</span><span class="p">.</span><span class="k">await</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>El bloque <code>async move</code> es necesario para evitar las protestas del
<em>borrow checker</em> y tener <code>x</code> como una referencia que viva más allá de
la función.</p>
<h2 id="the-end">The End.</h2>
<p>Con todo a mano podemos ejecutar nuestro <code>Pipeline</code>. Para <em>runtime</em>
prefiero <code>tokio</code> pero la implementación es agnóstica por lo que si
eres partidario de <code>async-std</code> o <code>smol</code> puedes utilizarlos igual.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">tokio</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">rt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tokio</span>::<span class="n">runtime</span>::<span class="n">Runtime</span>::<span class="n">new</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Pipeline</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">p</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Multiplier</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">value</span>: <span class="mi">2</span><span class="w"> </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">p</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Multiplier</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">value</span>: <span class="mi">5</span><span class="w"> </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">rt</span><span class="p">.</span><span class="n">block_on</span><span class="p">(</span><span class="k">async</span><span class="w"> </span><span class="k">move</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;{:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">p</span><span class="p">.</span><span class="n">run_stream</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="k">await</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="p">})</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Desarrollo en Golang: Futures/Promises</title>
			<link>https://yorodm.is-a.dev/blog/futures-go/</link>
			<pubDate>Wed, 17 Feb 2021 19:21:46 -0500</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/futures-go/</guid>
			<description>Entre las cosas que pienso adicionar al workshop de Go está un capítulo sobre patrones y técnicas para programación concurrente.
Future es un objeto que representa el resultado de un cálculo que se ejecuta de forma concurrente. Las futures se utilizan cuando tenemos un valor que es costoso de obtener pero sabemos de antemano como calcularlo.
Las facilidades de Go para manejar concurrencia hacen la implementación de futures en el lenguaje bastante sencilla.</description>
			<content type="html"><![CDATA[<p>Entre las cosas que pienso adicionar al <a href="https://yorodm.github.io/golang-workshop">workshop de
Go</a> está un capítulo sobre
patrones y técnicas para programación concurrente.</p>
<p><em>Future</em> es un objeto que representa el resultado de un cálculo que se
ejecuta de forma concurrente. Las <em>futures</em> se utilizan cuando tenemos
un valor que es costoso de obtener pero sabemos de antemano como
calcularlo.</p>
<p>Las facilidades de <strong>Go</strong> para manejar concurrencia hacen la
implementación de <em>futures</em> en el lenguaje bastante sencilla.</p>
<h2 id="interfaz">Interfaz</h2>
<p>Nuestro primer paso es crear una interfaz.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Value</span> <span class="kd">interface</span><span class="p">{}</span>

<span class="kd">type</span> <span class="nx">Future</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">Get</span><span class="p">(</span><span class="nx">c</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="nx">Value</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>Como <strong>Go</strong> todavia no tiene soporte para genericidad (mientras
escribo esto estamos en la versión <em>1.16</em>) utilizamos un alias para
representar cualquier valor de retorno.</p>
<h2 id="implementación">Implementación</h2>
<p>Para la implementación crearemos estructura que contenga el resultado
de la operación y otra con un canal para transmitir el valor.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">result</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">value</span> <span class="nx">Value</span>
	<span class="nx">err</span>   <span class="kt">error</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">futureImpl</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">result</span> <span class="kd">chan</span> <span class="o">*</span><span class="nx">result</span>
<span class="p">}</span>
</code></pre></div><p>Necesitamos una función para crear nuevas <em>Futures</em>, el algoritmo es sencillo:</p>
<ol>
<li>Creamos un canal para comunicar el completamiento de la subrutina.</li>
<li>Lanzamos una <em>gorutine</em> anónima que englobe la ejecución de la
subrutina.</li>
<li>La <em>gorutine</em> es encargada de notificar el completamientoa los
interesados.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">NewFuture</span><span class="p">(</span><span class="nx">f</span> <span class="kd">func</span><span class="p">()</span> <span class="p">(</span><span class="nx">Value</span><span class="p">,</span> <span class="kt">error</span><span class="p">))</span> <span class="nx">Future</span> <span class="p">{</span>
	<span class="nx">fut</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">futureImpl</span> <span class="p">{</span>
		<span class="nx">result</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="o">*</span><span class="nx">result</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">(){</span>
		<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">fut</span><span class="p">.</span><span class="nx">result</span><span class="p">)</span>
		<span class="nx">value</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">f</span><span class="p">()</span>
		<span class="nx">f</span><span class="p">.</span><span class="nx">result</span> <span class="o">&lt;-</span> <span class="o">&amp;</span><span class="nx">result</span><span class="p">{</span><span class="nx">value</span><span class="p">,</span> <span class="nx">err</span><span class="p">}</span>
	<span class="p">}()</span>
	<span class="k">return</span> <span class="nx">fut</span>
<span class="p">}</span>
</code></pre></div><p>Ahora solo necesitamos implementar <code>Get</code>, en este caso tenemos que
tener en cuenta la posible cancelación del <em>future</em> o casos de
<em>timeout</em>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">futureImpl</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">c</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="nx">Value</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">select</span> <span class="p">{</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">Err</span><span class="p">()</span>
		<span class="k">case</span> <span class="nx">result</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">f</span><span class="p">.</span><span class="nx">result</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">err</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h2 id="the-end">The End.</h2>
<p>Veamos un ejemplo ficticio:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go">
<span class="kd">func</span> <span class="nf">takeFinalSteps</span><span class="p">(</span><span class="nx">f</span> <span class="nx">Future</span><span class="p">)</span> <span class="kt">error</span><span class="p">{</span>
	<span class="nf">prepareTheSteps</span><span class="p">()</span>
	<span class="nx">value</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">())</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
	<span class="p">}</span>
	<span class="nf">sendValue</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">data</span> <span class="o">:=</span> <span class="nf">getProcessableData</span><span class="p">()</span>
	<span class="nx">fut</span> <span class="o">:=</span> <span class="nf">NewFuture</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">cleaned</span> <span class="o">:=</span> <span class="nf">doSomeDataCleaning</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
		<span class="k">return</span> <span class="nf">doSomeDataProcessing</span><span class="p">(</span><span class="nx">cleaned</span><span class="p">)</span>
	<span class="p">})</span>
	<span class="nf">createAuxiliaryResources</span><span class="p">();</span>
	<span class="nx">_</span> <span class="o">:=</span> <span class="nf">takeFinalSteps</span><span class="p">(</span><span class="nx">fut</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>Aunque parezca sencillo, un <code>Future</code> es una abstracción poderosa que
nos permite diferir la obtención de un valor para el momento en el que
realmente lo necesitemos. Como toda herramienta hay que tener en
cuenta que su uso no aplica a todos los casos, pero nunca está de más
tenerla a mano.</p>
]]></content>
		</item>
		
		<item>
			<title>Cola de Copia para Linux (I)</title>
			<link>https://yorodm.is-a.dev/blog/copy-queue-linux/</link>
			<pubDate>Thu, 31 Dec 2020 00:54:30 -0500</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/copy-queue-linux/</guid>
			<description>¡Ultimo artículo del 2020! Este ha sido un año muy turbulento en el casi no he podido atender el blog, por lo que se me ocurrió dejar algo interesante a modo de cierre.
Hace ya unos cuantos meses ya surgió la idea en el Canal SWL-X de hacer una pequeña utilidad en Linux para permitir colas de copia de ficheros. Estas utilidades son muy populares en otros sistemas operativos y algunos de los usuarios buscan migrar hacia tecnologías libres se sentían frustrados al no tener una alternativa.</description>
			<content type="html"><![CDATA[<p>¡Ultimo artículo del 2020! Este ha sido un año muy turbulento en el
casi no he podido atender el blog, por lo que se me ocurrió dejar algo
interesante a modo de cierre.</p>
<p>Hace ya unos cuantos meses ya surgió la idea en el <a href="https://t.me/blogswlx">Canal
SWL-X</a> de hacer una pequeña utilidad en Linux
para permitir colas de copia de ficheros. Estas utilidades son muy
populares en otros sistemas operativos y algunos de los usuarios
buscan migrar hacia tecnologías libres se sentían frustrados al no
tener una alternativa.</p>
<p>Después de varios experimentos (resultados variados) decidí volver a
empezar desde 0 y ya de paso documentar el proceso de creación en el
blog.</p>
<p>En esta entrega hablaremos de:</p>
<ol>
<li>Copiar archivos en <strong>Linux</strong> usando <strong>libc</strong>.</li>
<li><em>Buffers</em>.</li>
<li>Alternativas a <code>read</code> y <code>write</code> de <strong>POSIX</strong></li>
</ol>
<h2 id="el-problema">El problema.</h2>
<p>Para los que llevamos tiempo utilizando cualquier variante <strong>*nix</strong>
<code>cp</code> es uno de esos comandos que no hay por que mejorar, pero las
alternativas que proponen los entornos de escritorio dejan mucho que
desear a aquellos que llegan de entornos <em>más agradables</em> (en lo
personal estoy encantado con el gestor de ficheros de GNOME 3, pero
cada cual con lo suyo)</p>
<p>Otro problema radica en la velocidad de copia, muchas de estas
herramientas en sistemas privativos anuncian incrementos
significativos en la velocidad de transferencia de datos y sus
usuarios juran que es así (nadie me ha mostrado un <em>benchmark</em>, pero
la experiencia de los usuarios vale).</p>
<p>Como buenos usuarios de Linux que somos nos lanzamos a buscar
alternativas posibles (desde scripts hasta herramientas GUI para
Rsync) hasta que alguien recomendó utilizar la versión Linux de
<a href="https://github.com/alphaonex86/Ultracopier">Ultracopier</a> e intentar
crear plugins para integrarla a los entornos de escritorio más populares.</p>
<p>Aún así los usuarios de <strong>Ultracopier</strong> hablan de bajo rendimiento de
la herramienta con respecto a su versión en Windows, por lo que varios
miembros del canal nos lanzamos a la aventura de hacer (o investigar
cómo se hace) una herramienta para colas de copia de ficheros que
saque partido de todo lo que Linux tiene para ofrecer.</p>
<h2 id="como-copiar-archivos-en-linux">Como copiar archivos en Linux.</h2>
<p>Bueno, después de esta larga introducción vamos al problema que nos toca:
¿Cómo programamos la copia de archivos en Linux?.</p>
<p>En su forma más simple, copiar un archivo lleva unas pocas líneas de código <strong>C</strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="n">inputFd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&#34;foo.txt&#34;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
<span class="n">outputFd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&#34;bar.txt&#34;</span><span class="p">,</span> <span class="n">O_CREAT</span> <span class="o">|</span> <span class="n">O_WRONLY</span> <span class="o">|</span> <span class="n">O_TRUNC</span><span class="p">,</span> <span class="n">S_IRUSR</span> <span class="o">|</span> <span class="n">S_IWUSR</span><span class="p">);</span>
<span class="c1">// Ignoremos por el momento el valor de BUF_SIZE y el tamaño de buf
</span><span class="c1"></span><span class="k">while</span> <span class="p">((</span><span class="n">numRead</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">inputFd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">BUF_SIZE</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">write</span><span class="p">(</span><span class="n">outputFd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">numRead</span><span class="p">)</span> <span class="o">!=</span> <span class="n">numRead</span><span class="p">)</span>
		<span class="n">fatal</span><span class="p">(</span><span class="s">&#34;write() returned error or partial write occurred&#34;</span><span class="p">);</span>
</code></pre></div><p>O como decimos los usuarios de <strong>Rust</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="n">std</span>::<span class="n">fs</span>::<span class="n">copy</span><span class="p">(</span><span class="s">&#34;foo.txt&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;bar.txt&#34;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span><span class="w"> </span><span class="c1">// :)
</span></code></pre></div><p>Pero teniendo en cuenta que queremos optimizar el funcionamiento de la copia
lo más probable es que utilicemos el <em>crate</em> <code>libc</code> y hagamos nuestra versión
del ciclo de copia:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">libc</span>::<span class="o">*</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">input_fd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span>::<span class="n">fs</span>::<span class="n">File</span>::<span class="n">open</span><span class="p">(</span><span class="s">&#34;foo.txt&#34;</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">output_fd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span>::<span class="n">fs</span>::<span class="n">File</span>::<span class="n">create</span><span class="p">(</span><span class="s">&#34;bar.txt&#34;</span><span class="p">)</span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">read</span>: <span class="kt">isize</span> <span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">written</span>: <span class="kt">isize</span> <span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">loop</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">	 </span><span class="n">read</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">		</span><span class="n">read</span><span class="p">(</span><span class="n">input_fd</span><span class="p">.</span><span class="n">as_raw_fd</span><span class="p">(),</span><span class="n">buf</span><span class="p">.</span><span class="n">as_mut_ptr</span><span class="p">()</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">c_void</span><span class="p">,</span><span class="w"> </span><span class="n">BUF_SIZE</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">usize</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">isize</span><span class="w">
</span><span class="w">	</span><span class="p">}</span><span class="w">
</span><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="n">read</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">		</span><span class="k">break</span><span class="p">;</span><span class="w">
</span><span class="w">	</span><span class="p">}</span><span class="w">
</span><span class="w">	</span><span class="kd">let</span><span class="w"> </span><span class="n">written</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">unsafe</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">		</span><span class="n">libc</span>::<span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">.</span><span class="n">as_raw_fd</span><span class="p">(),</span><span class="w"> </span><span class="n">buf</span><span class="p">.</span><span class="n">as_mut_ptr</span><span class="p">()</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="o">*</span><span class="k">mut</span><span class="w"> </span><span class="n">libc</span>::<span class="n">c_void</span><span class="p">,</span><span class="w"> </span><span class="n">BUF_SIZE</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">usize</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="kt">isize</span><span class="w">
</span><span class="w">	</span><span class="p">};</span><span class="w">
</span><span class="w">	</span><span class="k">if</span><span class="w"> </span><span class="n">written</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">read</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">		</span><span class="k">break</span><span class="w">
</span><span class="w">	</span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>Si hacemos un diagrama sencillo de como fluyen los datos en esta
variante sería algo como esto</p>
<pre><code>          read      +------+    write
      +------------&gt;+buffer+------------+
      |             +------+            |
      |                                 V
  +---+---+                         +---+--+
  |entrada|                         |salida|
  +-------+                         +------+
</code></pre><h2 id="qué-hay-de-importante-en-un-buffer">Qué hay de importante en un buffer.</h2>
<p>Nuestro sencillo (pero genial) diagrama nos muestra algo interesante:
el tamaño del <em>buffer</em> afecta la velocidad de todo el proceso.</p>
<p>Si tenemos un archivo de 50mb y nuestro <em>buffer</em> es de 1mb
necesitaremos ejecutar el ciclo de copia 50 veces. Si subimos el
tamaño a 50mb tendremos una iteración. Podemos concluir entonces
que 50mb es el tamaño especial para nuestro <em>buffer</em>.</p>
<p>Para probar nuestra teoría veamos que tal funciona <code>cp</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ strace -s <span class="m">8</span> -xx cp /dev/urandom /dev/null <span class="p">|</span> grep <span class="nb">read</span>
...
read<span class="o">(</span>3, <span class="s2">&#34;\x61\xca\xf8\xff\x1a\xd6\x83\x8b&#34;</span>..., 131072<span class="o">)</span> <span class="o">=</span> <span class="m">131072</span>
read<span class="o">(</span>3, <span class="s2">&#34;\xd7\x47\x8f\x09\xb2\x3d\x47\x9f&#34;</span>..., 131072<span class="o">)</span> <span class="o">=</span> <span class="m">131072</span>
read<span class="o">(</span>3, <span class="s2">&#34;\x12\x67\x90\x66\xb7\xed\x0a\xf5&#34;</span>..., 131072<span class="o">)</span> <span class="o">=</span> <span class="m">131072</span>
read<span class="o">(</span>3, <span class="s2">&#34;\x9e\x35\x34\x4f\x9d\x71\x19\x6d&#34;</span>..., 131072<span class="o">)</span> <span class="o">=</span> <span class="m">131072</span>
</code></pre></div><p>Pues&hellip; 131072 bytes, básicamente 128kb, un aproximado de 400
iteraciones para nuestro ciclo de copia. ¡Imagina copiar un archivo de
5GB, o varios archivos igual de grandes!</p>
<p>Antes de que reine el pánico tengo una confesión que hacer: el
diagrama genial no cuenta toda la verdad. El proceso de lectura y
escritura de archivos no ocurre en las funciones <code>read</code> y <code>write</code>,
ocurre en el <strong>kernel</strong>.</p>
<pre><code>          read      +------+    write
      +------------&gt;+buffer+------------+
      |             +------+            |
      |                                 V
  +---+---+                         +---+--+
  |entrada|                         |salida|
  +-------+                         +------+
      ^                                |
      |                                V
  +---+--------------------------------+---+
  |             magia del kernel           |
  +----------------------------------------+

</code></pre><p>El trabajo real de lectura/escritura ocurre en el <strong>kernel</strong> del
sistema operativo, esto implica que existe una transferencia de datos
entre nuestra aplicación (ejecutándose en <em>user space</em>) y el núcleo
(<em>kernel space</em>), con la corresponiente latencia en cada operación.</p>
<p>Una vez que entramos en terrenos del <strong>kernel</strong> podemos pasar horas
discutiendo sobre el <em>cache</em> de paginado, tamaño de bloques del
sistema de archivos, sectores de disco y así sucesivamente <a href="https://en.wikipedia.org/wiki/Turtles_all_the_way_down">hasta
encontrar la primera
tortuga</a>, pero
no tenemos tiempo para eso así que usaremos la sabiduría de los
antiguos para establecer el tamaño del buffer en 4096 bytes. Aunque
pueda parecer aleatorio este número está <a href="https://stackoverflow.com">respaldado por la
ciencia</a> y por el momento, parece una
apuesta segura<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="más-allá-del-read-y-el-write">Más allá del read y el write.</h2>
<p>Ahora que tenemos una idea de lo básico, podemos buscar alternativas
más eficientes al ciclo <code>read/write</code>. Las opciones que nos brinda
<strong>Linux</strong> son:</p>
<ol>
<li>Utilizar acceso directo mediante el flag <code>O_DIRECT</code> para acceder a
los archivos para evitar el <em>cache</em> del sistema operativo.</li>
<li>Usar <code>posix_fadvise</code> para que el sistema optimice el modo en que
accedemos al archivo.</li>
<li>Utilizar la <strong>API</strong> asíncrona para acceso a datos.</li>
<li>La función <code>copy_file_range</code> que nos permite copiar datos desde un
archivo a otro <em>sin</em> tener que intercambiar datos con el proceso en
espacio usuario.</li>
</ol>
<p>Cada una de estas técnicas tiene sus pro y sus contra (incluso se
pueden usar combinaciones entre ellas), pero como bien pueden imaginar
no son un tema a tratar a la ligera así que explorar su factibilidad
queda para otra aventura (con suerte en el Enero de este año nuevo).</p>
<h2 id="the-end">The end.</h2>
<p>Nada más que decir que desearles un año nuevo en el que puedan crecer
como desarrolladores y como personas. Nuevo año, nuevas metas y ¡salud!.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>En el libro <em>The Linux Programming Interface</em>, capítulo 13 se
pueden ver <em>benchmarks</em> con distintos tamaños de buffer así como una
discusión más profunda sobre el tema.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
		</item>
		
		<item>
			<title>Pipelines en Rust (I)</title>
			<link>https://yorodm.is-a.dev/blog/rust-pipeline-pattern/</link>
			<pubDate>Thu, 24 Dec 2020 13:27:39 -0500</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/rust-pipeline-pattern/</guid>
			<description>Pipeline es un patrón de diseño muy útil cuando tienes datos que deben ser procesados en una secuencia de etapas donde cada etapa toma como entrada la salida de la anterior. En cierta manera un pipeline es similar a componer funciones pero el nivel de complejidad es mucho más elevado debido a factores como backpressure, deadlocks o cancelación.
Go es un lenguaje especialmente capacitado para programar pipelines debido a sus características especiales para el manejo de errores y concurrencia.</description>
			<content type="html"><![CDATA[<p><strong>Pipeline</strong> es un patrón de diseño muy útil cuando tienes datos que
deben ser procesados en una secuencia de etapas donde cada etapa toma
como entrada la salida de la anterior. En cierta manera un
pipeline es similar a <em>componer funciones</em> pero el nivel de
complejidad es mucho más elevado debido a factores como <em>backpressure</em>,
<em>deadlocks</em> o cancelación.</p>
<p><strong>Go</strong> es un lenguaje especialmente capacitado para programar
pipelines debido a sus características especiales para el manejo de
errores y concurrencia. Pero ¿cómo sería usar pipelines en <strong>Rust</strong>?
En este post vamos a:</p>
<ol>
<li>Definir las estructuras necesarias para crear pipelines.</li>
<li>Hacer uso del sistema de tipos del lenguaje para nuestras ventajas.</li>
<li>Hablar un poco de concurrencia usando hilos.</li>
</ol>
<h2 id="paso-1-el-trait-step">Paso 1: El <code>trait Step</code></h2>
<p>En el mejor espíritu de <strong>Rust</strong> hagamos un trait que represente la
capacidad de formar parte de un pipeline. Vamos a llamarle <code>Step</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">Step</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">Item</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">run</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">it</span>: <span class="nc">Self</span>::<span class="n">Item</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span>::<span class="n">Item</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>Hecho, hasta la próxima. O&hellip; mejor aún, miremos más de cerca la
definición de <code>Step</code>.</p>
<p>Es un <code>trait</code> bastante sencillo. Tiene un tipo asociado <code>Item</code> y una
función <code>run</code> que acepta y retorna <code>Item</code>. La forma en que la función
está especificada no permite que <code>Item</code> sea una referencia. Y
finalmente <code>it</code> no es mutable, por lo que el parámetro de entrada es
<em>consumido</em> por la función y el valor de retorno es generado por ella.</p>
<p><code>Step</code> es muy simple de implementar, veamos un ejemplo:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Multiplier</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">value</span>: <span class="kt">u8</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Step</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Multiplier</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">Item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kt">u8</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">it</span>: <span class="kt">u8</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">u8</span> <span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">value</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">it</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>Podemos usar <code>Multiplier</code> para crear pasos que&hellip; bueno, multipliquen
su valor de entrada por un número dado.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="kd">let</span><span class="w"> </span><span class="n">by2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Multiplier</span><span class="p">{</span><span class="n">value</span>:<span class="mi">2</span><span class="p">};</span><span class="w">
</span><span class="w"></span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&#34;Multiplicado por 2 {0}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">by2</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span><span class="w"> </span><span class="c1">// 10
</span></code></pre></div><h2 id="paso-2-pipeline">Paso 2: Pipeline</h2>
<p>Ahora solo tenemos que encadenar los pasos para formar un pipeline.
Ya que tenemos un número variable de pasos y todos implementan el
mismo <code>trait</code>, podemos guardarlos en un vector de <em>trait objects</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Pipeline</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">v</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Step</span><span class="o">&lt;</span><span class="n">Item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">T</span><span class="o">&gt;&gt;&gt;</span><span class="p">,</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>La implementación de <code>Pipeline</code> es extremadamente corta.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Pipeline</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">new</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nc">Pipeline</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">Pipeline</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">v</span>: <span class="nb">Vec</span>::<span class="n">new</span><span class="p">()</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">add</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">x</span>: <span class="nc">impl</span><span class="w"> </span><span class="n">Step</span><span class="o">&lt;</span><span class="n">Item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nb">&#39;static</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">v</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="nb">Box</span>::<span class="n">new</span><span class="p">(</span><span class="n">x</span><span class="p">));</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>Un detalle en <code>add</code>: para adicionar un <code>Step</code>, debemos asegurarnos que
<em>viva</em> lo suficiente<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, por lo que indicamos con <code>'static</code>. Por
cuestiones de estilo (y pensando en el futuro) podemos hacer que <code>Pipeline</code>
se comporte como cualquier otro <code>Step</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Step</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Pipeline</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">Item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">T</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">it</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">T</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">todo</span><span class="o">!</span><span class="p">()</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>Listo, tenemos la capacidad de hacer <em>subpipelines</em> y sólo nos ha
costado unas líneas. La operación dentro de <code>run</code> es tan simple como
hacer un <code>fold</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">it</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">T</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="bp">self</span><span class="p">.</span><span class="n">v</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">fold</span><span class="p">(</span><span class="n">it</span><span class="p">,</span><span class="w"> </span><span class="o">|</span><span class="n">acc</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="o">|</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">acc</span><span class="p">))</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>Hagamos un pequeña prueba<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#[test]</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">test_pipeline</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Pipeline</span>::<span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">p</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Multiplier</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">value</span>: <span class="mi">2</span><span class="w"> </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">p</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Multiplier</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">value</span>: <span class="mi">5</span><span class="w"> </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span><span class="mi">100</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><h2 id="paso-3-pipelines-en-el-mundo-real">Paso 3: Pipelines en el mundo real.</h2>
<p>Nuestras pipelines funcionan bastante bien en el mundo de las
multiplicaciones de números pequeños, pero en el resto de los mundos
existe algo llamado &ldquo;errores&rdquo; y con la definición actual (por muy
elegante que sea) no tenemos modo de detectar si uno de los pasos
falla. Es hora de sacar <code>Result</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">error</span>::<span class="n">Error</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">type</span> <span class="nc">StepResult</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Result</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="nb">Box</span><span class="o">&lt;</span><span class="n">dyn</span><span class="w"> </span><span class="n">Error</span><span class="o">&gt;&gt;</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">trait</span><span class="w"> </span><span class="n">Step</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">Item</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">it</span>: <span class="nc">Self</span>::<span class="n">Item</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">StepResult</span><span class="o">&lt;</span><span class="n">Self</span>::<span class="n">Item</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Step</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Multiplier</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">Item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kt">u8</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">it</span>: <span class="kt">u8</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">StepResult</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">       </span><span class="nb">Ok</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">value</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">it</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span></code></pre></div><p>Tener <code>Box&lt;dyn Error&gt;</code> nos da la garantía de poder manejar errores de
cualquier tipo. La implementación de <code>Pipeline</code> debe tener esto en
cuenta y <em>propagar</em> el estado de error hasta el resultado final.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Step</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Pipeline</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">Item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">T</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">it</span>: <span class="nc">T</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">StepResult</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">v</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">fold</span><span class="p">(</span><span class="nb">Ok</span><span class="p">(</span><span class="n">it</span><span class="p">),</span><span class="w"> </span><span class="o">|</span><span class="n">acc</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="o">|</span><span class="w"> </span><span class="n">acc</span><span class="p">.</span><span class="n">and_then</span><span class="p">(</span><span class="o">|</span><span class="n">v</span><span class="o">|</span><span class="w"> </span><span class="n">x</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">v</span><span class="p">)))</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>Hora de ajustar nuestra prueba.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="cp">#[test]</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">test_pipeline_ok</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Pipeline</span>::<span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">p</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Multiplier</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">value</span>: <span class="mi">2</span><span class="w"> </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">p</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Multiplier</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">value</span>: <span class="mi">5</span><span class="w"> </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span><span class="nb">Ok</span><span class="p">(</span><span class="mi">100</span><span class="p">));</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>Y crear una nueva para cuando algún <code>Step</code> falla.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">struct</span> <span class="nc">ErrStep</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Step</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">ErrStep</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">type</span> <span class="nc">Item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kt">u8</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">fn</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">it</span>:<span class="kt">u8</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">StepResult</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">       </span><span class="nb">Err</span><span class="p">(</span><span class="s">&#34;This will fail&#34;</span><span class="p">)</span><span class="o">?</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">test_pipeline_ok</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Pipeline</span>::<span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">p</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Multiplier</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">value</span>: <span class="mi">2</span><span class="w"> </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="n">p</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">ErrStep</span><span class="p">{});</span><span class="w">
</span><span class="w">    </span><span class="n">assert</span><span class="o">!</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="n">is_err</span><span class="p">());</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><h2 id="pensando-en-paralelismo-y-concurrencia">Pensando en paralelismo y concurrencia.</h2>
<p>Recuento:</p>
<ol>
<li>Tenemos la posibilidad de hacer un <code>Pipeline</code> compuesto de
distintas implementaciones de <code>Step</code>.</li>
<li>Tenemos la forma de propagar errores en el <code>Pipeline</code></li>
</ol>
<p>El próximo paso natural sería intentar usar nuestro diseño actual para
ejecutar tareas <em>en paralelo</em>. Por desgracia, aún no hemos llegado a
ese punto.</p>
<p>Una de las ventajas de <strong>Rust</strong> es la garantía de que el compilador va
a detectar problemas comunes de seguridad de hilos (ejemplo, acceder
desde dos hilo distintos a la misma zona de memoria), para esto el la
biblioteca estándard incluye marcadores como <code>Send</code> y <code>Sync</code>, o tipos
especiales como <code>Arc</code>.</p>
<p>Adicionalmente, en el espíritu de <a href="https://blog.golang.org/codelab-share">compartir
comunicando</a>, los datos entre
implementaciones de <code>Step</code> deberían pasar usando canales o colas
concurrentes, esto ayudaría también con otros aspectos que mencionamos
al inicio del artículo (como <em>backpressure</em>) pero que no tratamos por
no ser necesarios para una implementación secuencial.</p>
<h2 id="the-end">The end.</h2>
<p>Con todos los puntos del plan cumplidos, me retiro hasta la próxima
aventura. Mientras tanto si estás interesado en el tema de <em>pipelines</em>
en <strong>Rust</strong> recomiendo mirar
<a href="https://crates.io/crates/pipelines">pipelines</a> o
<a href="https://crates.io/crates/rayon">rayon</a>, ambas con implementaciones
muy interesantes.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Aunque implementar <code>Step</code> para una referencia o un tipo con
restricciones de tiempo de vida no es trivial, tampoco es
imposible.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Las autoridades advierten que hacer pruebas unitarias
<strong>después</strong> de escribir funcionalidades es malo para la salud.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
		</item>
		
		<item>
			<title>Emacs &#43; Hugo: Haciendo `hugo-blog-mode` (II)</title>
			<link>https://yorodm.is-a.dev/blog/hugo-mode-emacs-ii/</link>
			<pubDate>Tue, 06 Oct 2020 17:45:15 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/hugo-mode-emacs-ii/</guid>
			<description>En el artículo anterior (hace unos cuantos meses ya) estuve hablando sobre como comencé automatizando el flujo de publicación del blog usando scripts. En este les mostraré como llevamos esos scripts a un modo de Emacs.
Manos al Emacs. Una de las ventajas de Emacs es su extensibilidad, con un poco de código Elisp podemos adicionar nuevas funcionalidades al editor. Aunque sería posible hacer un modo1 para crear toda una experiencia relacionada con el manejo de blogs, es mucho más sencillo crear comandos2.</description>
			<content type="html"><![CDATA[<p>En el <a href="/blog/hugo-mode-emacs/">artículo anterior</a> (hace
unos cuantos meses ya) estuve hablando sobre como comencé
automatizando el flujo de publicación del blog usando scripts. En este
les mostraré como llevamos esos scripts a un modo de <strong>Emacs</strong>.</p>
<h2 id="manos-al-emacs">Manos al Emacs.</h2>
<p>Una de las ventajas de Emacs es su extensibilidad, con un poco de
código <strong>Elisp</strong> podemos adicionar nuevas funcionalidades al editor.
Aunque sería posible hacer un modo<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> para crear toda una experiencia
relacionada con el manejo de blogs, es mucho más sencillo crear
comandos<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h3 id="planeando-las-funcionalidades">Planeando las funcionalidades.</h3>
<p>Necesitamos 3 funcionalidades básicas para trabajar en nuestro blog.</p>
<ul>
<li>Crear nuevos artículos.</li>
<li>Publicar el blog en <a href="https://github.com">GitHub Pages</a>.</li>
<li>Visualizar en el entorno local cualquier cambio que se produzca.</li>
</ul>
<p>Con esto en mente podemos crear el esqueleto de las funciones</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="p">(</span><span class="nb">defun</span> <span class="nv">hugo-blog-new</span> <span class="p">(</span><span class="nv">path</span><span class="p">)</span>
	<span class="s">&#34;Create new content in PATH.&#34;</span><span class="p">)</span>
<span class="p">(</span><span class="nb">defun</span> <span class="nv">hugo-blog-publish</span> <span class="p">()</span>
	<span class="s">&#34;Generate the site and commit everything.&#34;</span><span class="p">)</span>
<span class="p">(</span><span class="nb">defun</span> <span class="nv">hugo-blog-preview</span> <span class="p">(</span><span class="nv">arg</span><span class="p">)</span>
	<span class="s">&#34;Launches a preview HTTP server. If ARG is provided also render drafts.&#34;</span><span class="p">)</span>

</code></pre></div><h3 id="opciones-de-configuración">Opciones de configuración.</h3>
<p>Vamos a necesitar algunas opciones configurables:</p>
<ul>
<li>El nombre (o camino) del ejecutable de <code>hugo</code>.</li>
<li>La raiz del proyecto del blog.</li>
<li>El nombre del <em>buffer</em> que usaremos para interactuar con el comando.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="p">(</span><span class="nb">defgroup</span> <span class="nv">hugo-blog</span> <span class="no">nil</span>
  <span class="s">&#34;Hugo blog mode customizations&#34;</span>
  <span class="nb">:group</span> <span class="ss">&#39;tools</span><span class="p">)</span>

<span class="p">(</span><span class="nb">defcustom</span> <span class="nv">hugo-blog-command</span> <span class="s">&#34;hugo&#34;</span>
  <span class="s">&#34;Path to hugo&#39;s executable.&#34;</span>
  <span class="nb">:group</span> <span class="ss">&#39;hugo-blog</span>
  <span class="nb">:type</span> <span class="ss">&#39;string</span><span class="p">)</span>

<span class="p">(</span><span class="nb">defcustom</span> <span class="nv">hugo-blog-project</span> <span class="s">&#34;&#34;</span>
  <span class="s">&#34;Blog directory project.&#34;</span>
  <span class="nb">:group</span> <span class="ss">&#39;hugo-blog</span>
  <span class="nb">:type</span> <span class="ss">&#39;string</span><span class="p">)</span>

<span class="p">(</span><span class="nb">defcustom</span> <span class="nv">hugo-blog-process-buffer</span> <span class="s">&#34;*hugo-blog-process*&#34;</span>
  <span class="s">&#34;Hugo blog process buffer.&#34;</span>
  <span class="nb">:group</span> <span class="ss">&#39;hugo-blog</span>
  <span class="nb">:type</span> <span class="ss">&#39;string</span><span class="p">)</span>

</code></pre></div><h3 id="funciones-de-soporte">Funciones de soporte.</h3>
<p>Definidos nuestros puntos de entrada y las opciones configurables
necesitamos englobar algunas funcionalidades comunes en funciones de
soporte.</p>
<p>Emacs nos brinda funciones para ejecutar programas externos o comandos
del shell. La forma simple sería ejecutar los <em>scripts</em> de shell que
tenemos definidos, pero es mucho más interesante reproducir la
funcionalidad en Elisp. Veamos por ejemplo como podemos ejecutar
<code>hugo</code> y capturar la salida en busca de mensajes de error.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="p">(</span><span class="nb">defun</span> <span class="nv">hugo-blog-run-command</span> <span class="p">(</span><span class="nv">command</span> <span class="nv">parameters</span><span class="p">)</span>
  <span class="s">&#34;Run COMMAND with PARAMETERS with </span><span class="ss">`hugo-blog-project&#39;</span><span class="s"> as working directory.
</span><span class="s">Returns the command&#39;s output as a string&#34;</span>
  <span class="p">(</span><span class="nv">cd</span> <span class="nv">hugo-blog-project</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">output</span> <span class="p">(</span><span class="nv">shell-command-to-string</span>
                 <span class="p">(</span><span class="nf">concat</span> <span class="nv">hugo-blog-command</span>
                         <span class="s">&#34; &#34;</span>
                         <span class="nv">command</span>
                         <span class="s">&#34; &#34;</span>
                         <span class="nv">parameters</span><span class="p">))))</span>
    <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nv">string-match-p</span> <span class="s">&#34;Error&#34;</span> <span class="nv">output</span><span class="p">)</span>
        <span class="no">nil</span>
      <span class="nv">output</span><span class="p">)))</span>
</code></pre></div><p>La función retorna <code>nil</code> en caso de error o el mensaje resultado de la
llamada en otro caso</p>
<p>Así mismo podemos definir el resto de las funciones necesarias.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;git</span><span class="p">)</span> <span class="c1">;; git related functions</span>

<span class="p">(</span><span class="nb">defmacro</span> <span class="nv">with-git-repo</span> <span class="p">(</span><span class="nv">repo</span> <span class="kp">&amp;rest</span> <span class="nv">body</span><span class="p">)</span>
  <span class="s">&#34;Run BODY using git repository REPO.&#34;</span>
  <span class="o">`</span><span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">git-repo</span> <span class="o">,</span><span class="nv">repo</span><span class="p">))</span>
     <span class="o">,@</span><span class="nv">body</span><span class="p">))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">git-modified-files</span> <span class="p">()</span>
  <span class="s">&#34;Return list of untracked files.&#34;</span>
  <span class="p">(</span><span class="nv">git--lines</span>
   <span class="p">(</span><span class="nv">git-run</span> <span class="s">&#34;ls-files&#34;</span> <span class="s">&#34;-m&#34;</span> <span class="s">&#34;--exclude-standard&#34;</span><span class="p">)))</span>

<span class="p">(</span><span class="nb">defsubst</span> <span class="nv">hugo-blog-submodule</span> <span class="p">()</span>
  <span class="s">&#34;Inline function to get the submodule.&#34;</span>
  <span class="p">(</span><span class="nf">concat</span> <span class="nv">hugo-blog-project</span> <span class="p">(</span><span class="nv">f-path-separator</span><span class="p">)</span> <span class="s">&#34;public&#34;</span><span class="p">))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">hugo-blog--commit-all</span> <span class="p">()</span>
  <span class="s">&#34;Commits the submodule and then the project.&#34;</span>
  <span class="p">(</span><span class="nv">with-git-repo</span>  <span class="p">(</span><span class="nv">hugo-blog-submodule</span><span class="p">)</span>
                 <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">git-modified-files</span><span class="p">)</span>
                   <span class="p">(</span><span class="nv">git-add</span><span class="p">)</span>
                   <span class="p">(</span><span class="nv">git-commit</span> <span class="p">(</span><span class="nf">concat</span> <span class="s">&#34;Commit on &#34;</span>
                                       <span class="p">(</span><span class="nf">current-time-string</span><span class="p">)))))</span>
  <span class="p">(</span><span class="nv">with-git-repo</span>  <span class="nv">hugo-blog-project</span>
                 <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">git-modified-files</span><span class="p">)</span>
                   <span class="p">(</span><span class="nv">git-add</span><span class="p">)</span>
                   <span class="p">(</span><span class="nv">git-add</span> <span class="s">&#34;public&#34;</span><span class="p">)</span> <span class="c1">;; Let&#39;s be really sure</span>
                   <span class="p">(</span><span class="nv">git-commit</span> <span class="p">(</span><span class="nf">concat</span> <span class="s">&#34;Commit on &#34;</span>
                                       <span class="p">(</span><span class="nf">current-time-string</span><span class="p">))))))</span>
</code></pre></div><h3 id="completando-las-funcionalidades">Completando las funcionalidades</h3>
<p>Con ayuda de las funciones auxiliares podemos desarrollar los comandos
necesarios.  Es importante notar que todas las funciones están
marcadas como <code>autoload</code> e <code>interactive</code> así estarán disponibles como
comandos en el editor y sería más fácil distribuirlas en un paquete.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp">
<span class="c1">;;;###autoload</span>
<span class="p">(</span><span class="nb">defun</span> <span class="nv">hugo-blog-new</span> <span class="p">(</span><span class="nv">path</span><span class="p">)</span>
  <span class="s">&#34;Create new content in PATH.&#34;</span>
  <span class="p">(</span><span class="nb">interactive</span> <span class="s">&#34;sNew content path: &#34;</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">cd</span> <span class="nv">hugo-blog-project</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">output</span> <span class="p">(</span><span class="nv">hugo-blog-run-command</span> <span class="s">&#34;new&#34;</span> <span class="nv">path</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">if</span> <span class="nv">output</span>
        <span class="p">(</span><span class="nv">find-file-existing</span>  <span class="p">(</span><span class="nf">car</span> <span class="p">(</span><span class="nv">split-string</span> <span class="nv">output</span> <span class="s">&#34; &#34;</span><span class="p">)))</span>
      <span class="p">(</span><span class="ne">error</span> <span class="s">&#34;Command hugo returned an error, check your configuration&#34;</span><span class="p">))))</span>

<span class="c1">;;;###autoload</span>
<span class="p">(</span><span class="nb">defun</span> <span class="nv">hugo-blog-publish</span> <span class="p">()</span>
  <span class="s">&#34;Generate the site and commit everything.&#34;</span>
  <span class="p">(</span><span class="nb">interactive</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">save-some-buffers</span><span class="p">)</span> <span class="c1">;; avoid commiting emacs weird files</span>
  <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nf">yes-or-no-p</span> <span class="s">&#34;This will commit changes, are you sure? &#34;</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">hugo-blog-run-command</span> <span class="s">&#34;--noChmod&#34;</span> <span class="s">&#34;--noTimes --ignoreCache&#34;</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">hugo-blog--commit-all</span><span class="p">)))</span>

<span class="c1">;;;###autoload</span>
<span class="p">(</span><span class="nb">defun</span> <span class="nv">hugo-blog-preview</span> <span class="p">(</span><span class="nv">arg</span><span class="p">)</span>
  <span class="s">&#34;Launches a preview HTTP server. If ARG is provided also render drafts.&#34;</span>
  <span class="p">(</span><span class="nb">interactive</span> <span class="s">&#34;P&#34;</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nf">process-status</span> <span class="s">&#34;hugo&#34;</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">cd</span> <span class="nv">hugo-blog-project</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">when</span> <span class="nv">arg</span>
    <span class="p">(</span><span class="nf">start-process</span> <span class="s">&#34;hugo&#34;</span> <span class="nv">hugo-blog-process-buffer</span>
                   <span class="nv">hugo-blog-command</span> <span class="s">&#34;-D&#34;</span> <span class="s">&#34;server&#34;</span><span class="p">))</span>
  <span class="p">(</span><span class="nb">unless</span> <span class="nv">arg</span>
    <span class="p">(</span><span class="nf">start-process</span> <span class="s">&#34;hugo&#34;</span> <span class="nv">hugo-blog-process-buffer</span>
                   <span class="nv">hugo-blog-command</span> <span class="s">&#34;server&#34;</span><span class="p">)))</span>
  <span class="p">(</span><span class="nf">sleep-for</span> <span class="mi">5</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">with-current-buffer</span> <span class="nv">hugo-blog-process-buffer</span>
    <span class="p">(</span><span class="nf">goto-char</span> <span class="p">(</span><span class="nf">point-max</span><span class="p">))</span>
    <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nf">re-search-backward</span> <span class="s">&#34;http://localhost:[0-9]+/&#34;</span> <span class="no">nil</span> <span class="no">t</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">browse-url</span> <span class="p">(</span><span class="nv">match-string</span> <span class="mi">0</span><span class="p">))</span>
      <span class="p">(</span><span class="ne">error</span> <span class="s">&#34;Error executing hugo&#34;</span><span class="p">))))</span>
</code></pre></div><section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Los modos de son conjuntos de funcionalidades que extienden el
editor en distintas maneras, muchos incluso hacen cambios en la
forma en que interactuamos con Emacs&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Los comandos son funcionalidades específicas que no tienen por
que estar relacionadas con ningún modo en particular.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
		</item>
		
		<item>
			<title>Mitos que los programadores creemos</title>
			<link>https://yorodm.is-a.dev/blog/programming-myths/</link>
			<pubDate>Mon, 07 Sep 2020 12:17:58 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/programming-myths/</guid>
			<description>Conversando con un amigo se nos ocurrió hacer una lista de mitos que nos encontramos en nuestra profesión.
 Multihilo/multiproceso/concurrente es siempre más rápido. Multiplataforma significa que las funcionalidades se comportan igual en distintos OS La codificacíon del texto va a ser siempre X. El caracter de fin de línea va a ser siempre X. Los caracteres ocupan 1 byte de memoria. Las fechas siempre tienen el mismo formato. Las denominaciones de moneda no cambian.</description>
			<content type="html"><![CDATA[<p>Conversando con un amigo se nos ocurrió hacer una lista de mitos que
nos encontramos en nuestra profesión.</p>
<ol>
<li>Multihilo/multiproceso/concurrente es siempre más rápido.</li>
<li>Multiplataforma significa que las funcionalidades se comportan
igual en distintos <strong>OS</strong></li>
<li>La codificacíon del texto va a ser siempre <em>X</em>.</li>
<li>El caracter de fin de línea va a ser siempre <em>X</em>.</li>
<li>Los caracteres ocupan 1 byte de memoria.</li>
<li>Las fechas siempre tienen el mismo formato.</li>
<li>Las denominaciones de moneda no cambian.</li>
<li>Hay <em>N</em> usos horarios en todo momento.</li>
<li>Los timestamps siempre se representan en segundos (o milisegundos).</li>
<li>Las especificaciones de los servidores de producción no van a variar.</li>
<li>Nunca se va a hacer un despliegue &ldquo;en caliente&rdquo; de un servicio.</li>
<li>Si tengo pruebas de tipo <em>X</em> no necesito pruebas de tipo <em>Y</em>.</li>
<li>La última versión de un software/biblioteca es la más estable.</li>
<li>El software/biblioteca de la compañía  <em>X</em> no tiene errores.</li>
<li>&ldquo;Porque así lo hacen en Google&rdquo;</li>
<li>El software libre no tiene soporte o es de baja calidad.</li>
<li>El componente <em>X</em> es el mejor por ser más caro/famoso.</li>
<li>La biblioteca estándar del lenguaje tiene las mejores implementaciones.</li>
<li>Las coordenadas siempre serán (latitud, longitud).</li>
<li>Las coordenadas siempre serán (longitud, latitud).</li>
<li>Los usuarios del producto conocen sobre el tema <em>X</em>.</li>
<li>Los usuarios del producto desconocen todo sobre el tema <em>X</em>.</li>
<li>Las operaciones con punto flotante son confiables hasta <em>X</em>
lugares después de la coma.</li>
<li>El equipo de trabajo está familiarizado con la herramienta <em>X</em>.</li>
<li><em>this</em><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
<li>El valor de la configuración/variable de entorno siempre va a ser
válido.</li>
<li>Todas las distribuciones de Linux son iguales.</li>
<li>El planificador del sistema es justo.</li>
<li>Las caidas de red son un evento transitorio.</li>
<li>Todos los usuarios tienen al menos <em>X</em> de ancho de banda.</li>
<li>Los respaldos son confiables.</li>
<li>Los caché son confiables.</li>
<li>Cuando los datos llegan al componente <em>X</em> ya están absolutamente
validados.</li>
<li>Los registros de paquetes son absolutamente confiables.</li>
</ol>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Los desarrolladores de Javascript saben de que hablo.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
		</item>
		
		<item>
			<title>Microservicios en .NET Core 3.1</title>
			<link>https://yorodm.is-a.dev/blog/microservices-dotnet-3/</link>
			<pubDate>Fri, 06 Mar 2020 15:06:47 -0500</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/microservices-dotnet-3/</guid>
			<description>La nueva versión LTS de .NET Core trae consigo muchas ventajas para el los desarrolladores de microservicios. Una de las más esperadas es la estabilización de la API para ejecutar servicios en segundo plano o workers utilizando Microsoft.Extensions.Hosting
¿Qué son los workers? Si eres desarrollador de ASP.NET Core debes estar familiarizado con el paquete Microsoft.AspNetCore.Hosting y las clasesWebHostBuilder y WebHost.
public class Program { public static void Main(string[] args) { var config = new ConfigurationBuilder() .</description>
			<content type="html"><![CDATA[<p>La nueva versión LTS de .NET Core trae consigo muchas ventajas para el
los desarrolladores de microservicios. Una de las más esperadas es la
estabilización de la API para ejecutar servicios en segundo plano o
<em>workers</em> utilizando <code>Microsoft.Extensions.Hosting</code></p>
<h2 id="qué-son-los-workers">¿Qué son los workers?</h2>
<p>Si eres desarrollador de ASP.NET Core debes estar familiarizado con el
paquete <code>Microsoft.AspNetCore.Hosting</code> y las clases<code>WebHostBuilder</code> y
<code>WebHost</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
	   <span class="kt">var</span> <span class="n">config</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ConfigurationBuilder</span><span class="p">()</span>
            <span class="p">.</span><span class="n">AddCommandLine</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
            <span class="p">.</span><span class="n">AddJsonFile</span><span class="p">(</span><span class="s">&#34;hosting.json&#34;</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
			<span class="p">.</span><span class="n">AddEnvironmentVariables</span><span class="p">()</span>
            <span class="p">.</span><span class="n">Build</span><span class="p">();</span>
      <span class="kt">var</span> <span class="n">host</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WebHostBuilder</span><span class="p">()</span>
           <span class="p">.</span><span class="n">UseKestrel</span><span class="p">()</span>
           <span class="p">.</span><span class="n">UseContentRoot</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="n">GetCurrentDirectory</span><span class="p">())</span>
		   <span class="p">.</span><span class="n">UseConfiguration</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
           <span class="p">.</span><span class="n">Build</span><span class="p">();</span>

       <span class="n">host</span><span class="p">.</span><span class="n">Run</span><span class="p">();</span>
    <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div><p><code>WebHost</code> es responsable de iniciar la configuración, manejar el ciclo
de vida de los servicios, mantener el contenedor de dependencias y
comunicarse/iniciar el servidor web (Kestrel en este caso).</p>
<p><code>WebHost</code> también nos brinda la posibilidad de iniciar servicios en
segundo plano utilizando <code>IHostedService</code>.</p>
<p>Si no estás familiarizado con el tema, puedes informarte más con <a href="https://www.stevejgordon.co.uk/asp-net-core-2-ihostedservice" title="Implementing IHostedService in ASP.NET Core 2.0">este excelente post</a></p>
<h2 id="microservicios-en-aplicaciones-de-consola">Microservicios en aplicaciones de consola.</h2>
<p>El nuevo host genérico (<code>HostBuilder</code>) no requiere de la maquinaria de
ASP.NET Core, lo cual hace posible crear aplicaciones de consola que
hagan uso de las bondades a las que estamos adaptados.</p>
<p>Veamos un ejemplo:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"> <span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span> <span class="p">{</span>
            <span class="n">CreateHostBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">).</span><span class="n">Build</span><span class="p">().</span><span class="n">Run</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">OperationCanceledException</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;-----Terminating-----&#34;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">IHostBuilder</span> <span class="n">CreateHostBuilder</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">=&gt;</span>
            <span class="n">Host</span><span class="p">.</span><span class="n">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="p">.</span><span class="n">ConfigureAppConfiguration</span><span class="p">((</span><span class="n">hostingContext</span><span class="p">,</span> <span class="n">config</span><span class="p">)</span> <span class="p">=&gt;</span>
                <span class="p">{</span>
				    <span class="kt">var</span> <span class="n">env</span> <span class="p">=</span> <span class="n">hostingContext</span><span class="p">.</span><span class="n">HostingEnvironment</span><span class="p">.</span><span class="n">EnvironmentName</span><span class="p">;</span>
                    <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ConfigurationBuilder</span><span class="p">()</span>
                            <span class="p">.</span><span class="n">SetBasePath</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="n">GetCurrentDirectory</span><span class="p">())</span>
                            <span class="p">.</span><span class="n">AddJsonFile</span><span class="p">(</span><span class="s">&#34;settings.json&#34;</span><span class="p">)</span>
                            <span class="p">.</span><span class="n">AddEnvironmentVariables</span><span class="p">()</span>
                            <span class="p">.</span><span class="n">Build</span><span class="p">();</span>
                <span class="p">})</span>
                <span class="p">.</span><span class="n">ConfigureServices</span><span class="p">((</span><span class="n">hostingContext</span><span class="p">,</span> <span class="n">services</span><span class="p">)</span> <span class="p">=&gt;</span>
                <span class="p">{</span>

	                <span class="c1">// AWS Configuration
</span><span class="c1"></span>                    <span class="kt">var</span> <span class="n">options</span> <span class="p">=</span> <span class="n">hostingContext</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="n">GetAWSOptions</span><span class="p">();</span>
                    <span class="n">services</span><span class="p">.</span><span class="n">AddDefaultAWSOptions</span><span class="p">(</span><span class="n">options</span><span class="p">);</span>
                    <span class="n">services</span><span class="p">.</span><span class="n">AddAWSService</span><span class="p">&lt;</span><span class="n">IAmazonSQS</span><span class="p">&gt;();</span>

                    <span class="c1">// Worker Service
</span><span class="c1"></span>                    <span class="n">services</span><span class="p">.</span><span class="n">AddHostedService</span><span class="p">&lt;</span><span class="n">Worker</span><span class="p">&gt;();</span>
                    <span class="n">services</span><span class="p">.</span><span class="n">AddLogging</span><span class="p">();</span>

                <span class="p">}).</span><span class="n">ConfigureLogging</span><span class="p">((</span><span class="n">hostcontext</span><span class="p">,</span> <span class="n">configLogging</span><span class="p">)</span> <span class="p">=&gt;</span>
                <span class="p">{</span>
                    <span class="n">configLogging</span><span class="p">.</span><span class="n">AddConsole</span><span class="p">();</span>
                    <span class="n">configLogging</span><span class="p">.</span><span class="n">AddDebug</span><span class="p">();</span>
                <span class="p">});</span>
    <span class="p">}</span>
</code></pre></div><p>El programa anterios hace uso del host genérico para:</p>
<ol>
<li>Cargar la configuración externa (variables de entorno y archivo json).</li>
<li>Inicializar un servicio para acceder a SQS.</li>
<li>Configurar logs para la consola.</li>
<li>Crear un servicio en segundo plano.</li>
</ol>
<p>La clase <code>Worker</code> hereda de <code>BackgroundService</code> y es la encargada de
ejecutar la lógica de nuestro microservicio</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"><span class="k">public</span> <span class="k">class</span> <span class="nc">Worker</span><span class="p">:</span> <span class="n">BackgroundService</span> <span class="p">{</span>

	 <span class="k">public</span> <span class="n">Worker</span><span class="p">(</span><span class="n">ILogger</span><span class="p">&lt;</span><span class="n">Worker</span><span class="p">&gt;</span> <span class="n">logger</span><span class="p">,</span> <span class="n">IAmazonSQS</span> <span class="n">sqs</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="m">_l</span><span class="n">ogger</span> <span class="p">=</span> <span class="n">logger</span><span class="p">;</span>
            <span class="m">_</span><span class="n">sqs</span> <span class="p">=</span> <span class="n">sqs</span><span class="p">;</span>
	    <span class="p">}</span>

	 <span class="k">protected</span>  <span class="k">async</span> <span class="n">Task</span> <span class="n">ExecuteAsync</span><span class="p">(</span><span class="kt">int</span> <span class="n">number</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancel</span><span class="p">)</span>
       <span class="p">{</span>
            <span class="k">while</span> <span class="p">(!</span><span class="n">cancel</span><span class="p">.</span><span class="n">IsCancellationRequested</span><span class="p">)</span>
            <span class="p">{</span>
				<span class="c1">// Procesar mensajes desde SQS
</span><span class="c1"></span>			<span class="p">}</span>
	   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h2 id="integración-con-el-sistema-operativo">Integración con el sistema operativo</h2>
<p>Si desarrollas servicios monolíticos o para software legado, puedes
hacer uso del host genérico para integrar tu aplicación al sistema
operativo.</p>
<p>Para integrarse como servicio a Windows se puede utilizar las
extensiones en <code>Microsoft.Extensions.Hosting.WindowsService</code> para
inicializar nuestro programa.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs"> <span class="n">Host</span><span class="p">.</span><span class="n">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
        <span class="p">.</span><span class="n">UseWindowsService</span><span class="p">()</span>
</code></pre></div><p>En el casos de Linux sólo están soportadas las distribuciones que incluyen
<code>Systemd</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cs" data-lang="cs">  <span class="n">Host</span><span class="p">.</span><span class="n">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
        <span class="p">.</span><span class="n">UseSystemd</span><span class="p">()</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>awstail: AWS Logs a la vieja usanza</title>
			<link>https://yorodm.is-a.dev/blog/awstail/</link>
			<pubDate>Mon, 20 Jan 2020 11:50:59 -0500</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/awstail/</guid>
			<description>awstail es una herramienta muy simple que cumple dos funciones:
 Darme la excusa para aprender Rust. Monitorear un grupo de logs en AWS Cloudwatch desde la terminal.  Por el momento, estas son las opciones que permite la herramienta:
awstail 0.3.0 Yoandy Rodriguez &amp;lt;yoandy.rmartinez@gmail.com&amp;gt; like tail -f for AWS Cloudwatch USAGE: awstail.exe [OPTIONS] &amp;lt;LOG_GROUP&amp;gt; FLAGS: -h, --help Prints help information -V, --version Prints version information OPTIONS: -p &amp;lt;PROFILE&amp;gt; Profile if using other than &#39;default&#39; -r &amp;lt;REGION&amp;gt; AWS region (defaults to us-east-1) -s &amp;lt;SINCE&amp;gt; Take logs since a given time (defaults to 5 minutes) -w &amp;lt;WATCH&amp;gt; Keep watching for new logs every n seconds (defaults to 10) ARGS: &amp;lt;LOG_GROUP&amp;gt; Log group name Posibles opciones futuras:</description>
			<content type="html"><![CDATA[<p><a href="https://github.com/yorodm/awstail">awstail</a> es una herramienta muy simple que cumple dos funciones:</p>
<ol>
<li>Darme la excusa para aprender <strong>Rust</strong>.</li>
<li>Monitorear un grupo de logs en <code>AWS Cloudwatch</code> desde la terminal.</li>
</ol>
<p>Por el momento, estas son las opciones que permite la herramienta:</p>
<pre><code class="language-console" data-lang="console">awstail 0.3.0
Yoandy Rodriguez &lt;yoandy.rmartinez@gmail.com&gt;
like tail -f for AWS Cloudwatch

USAGE:
    awstail.exe [OPTIONS] &lt;LOG_GROUP&gt;

FLAGS:
    -h, --help       Prints help information
    -V, --version    Prints version information

OPTIONS:
    -p &lt;PROFILE&gt;        Profile if using other than 'default'
    -r &lt;REGION&gt;         AWS region (defaults to us-east-1)
    -s &lt;SINCE&gt;          Take logs since a given time (defaults to 5 minutes)
    -w &lt;WATCH&gt;          Keep watching for new logs every n seconds (defaults to 10)

ARGS:
    &lt;LOG_GROUP&gt;    Log group name
</code></pre><p>Posibles opciones futuras:</p>
<ol>
<li>Agregar logs de más de un grupo.</li>
<li>Color diferenciado para mensajes de error.</li>
<li>Listar grupos de logs existentes.</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Cola de tareas en Python (I)</title>
			<link>https://yorodm.is-a.dev/blog/python-work-queue/</link>
			<pubDate>Mon, 04 Nov 2019 13:01:46 -0500</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/python-work-queue/</guid>
			<description>Después de unos meses trabajando en Go se llegan a extrañar las abstracciones del lenguaje para concurrencia. Hoy por ejemplo necesitaba hacer una cola de tareas en Python utilizando AsyncIO. En Go esto sigue una estructura sencilla:
// Este es la gorutina que procesa los trabajos func worker(jobChan &amp;lt;-chan Job) { for job := range jobChan { process(job) } } // Creamos un canal a donde enviar los datos jobChan := make(chan Job, 10) // Arrancamos la gorutina go worker(jobChan) // Enviamos datos para un trabajo, esto puede ser desde cualquier // gorutina jobChan &amp;lt;- job //Indicamos que ya no vamos a procesar más datos close(jobChan) Veamos si podemos lograr un equivalente en Python:</description>
			<content type="html"><![CDATA[<p>Después de unos meses trabajando en <strong>Go</strong> se llegan a extrañar las
abstracciones del lenguaje para concurrencia. Hoy por ejemplo
necesitaba hacer una cola de tareas en <strong>Python</strong> utilizando
<strong>AsyncIO</strong>.  En <strong>Go</strong> esto sigue una estructura sencilla:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Este es la gorutina que procesa los trabajos
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">jobChan</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="nx">Job</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nx">job</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">jobChan</span> <span class="p">{</span>
        <span class="nf">process</span><span class="p">(</span><span class="nx">job</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// Creamos un canal a donde enviar los datos
</span><span class="c1"></span><span class="nx">jobChan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">Job</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="c1">// Arrancamos la gorutina
</span><span class="c1"></span><span class="k">go</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">jobChan</span><span class="p">)</span>
<span class="c1">// Enviamos datos para un trabajo, esto puede ser desde cualquier
</span><span class="c1">// gorutina
</span><span class="c1"></span><span class="nx">jobChan</span> <span class="o">&lt;-</span> <span class="nx">job</span>
<span class="c1">//Indicamos que ya no vamos a procesar más datos
</span><span class="c1"></span><span class="nb">close</span><span class="p">(</span><span class="nx">jobChan</span><span class="p">)</span>
</code></pre></div><p>Veamos si podemos lograr un equivalente en Python:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># Primer intento</span>
<span class="kn">import</span> <span class="nn">asyncio</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">worker</span><span class="p">(</span><span class="n">queue</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
		<span class="n">process</span><span class="p">(</span><span class="k">await</span> <span class="n">queue</span><span class="o">.</span><span class="n">get</span><span class="p">())</span>
		<span class="c1"># Indicamos que se procesó el trabajo</span>
		<span class="n">queue</span><span class="o">.</span><span class="n">task_done</span><span class="p">()</span>

<span class="c1"># Creamos la cola de mensajes</span>
<span class="n">queue</span> <span class="o">=</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">Queue</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="c1"># arrancamos el worker</span>
<span class="n">worker_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">create_task</span><span class="p">(</span><span class="n">worker</span><span class="p">(</span><span class="n">queue</span><span class="p">))</span>
<span class="c1"># Enviamos mensajes a la cola</span>
<span class="k">await</span> <span class="n">queue</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div><p>Hasta acá todo parece bien, pero: ¿Cómo indicamos que no se van a
procesar más datos?</p>
<p>En <strong>Go</strong> la operación <code>close</code> sobre un canal hace que el ciclo
termine <strong>después de procesar cualquier elemento pendiente</strong>. En
<strong>Python</strong> a primera vista podemos cancelar la tarea creada en
<code>worker_task</code> pero eso nos deja con la posibilidad de que varias
tareas se queden en la cola. Por otro lado, la corutina <code>join()</code> de
<code>asyncio.Queue</code> nos permite esperar a que ya no existan elementos en
la cola, aunque no garantiza que <code>worker</code> se detenga.</p>
<p>La solución es utilizar una mezcla de los dos:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">await</span> <span class="n">queue</span><span class="o">.</span><span class="n">join</span><span class="p">()</span> <span class="c1"># Esperar a que se procesen los pendientes</span>
<span class="n">worker_task</span><span class="o">.</span><span class="n">cancel</span><span class="p">()</span> <span class="c1"># Cancelar la tarea</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Emacs &#43; Hugo: Haciendo `hugo-blog-mode` (I)</title>
			<link>https://yorodm.is-a.dev/blog/hugo-mode-emacs/</link>
			<pubDate>Sun, 07 Jul 2019 11:03:33 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/hugo-mode-emacs/</guid>
			<description>Este blog es creado con Hugo y publicado utilizando Github Pages. Cada artículo es creado utilizando Markdown y añadido a un repositorio donde finalmente pasa a formar parte del sitio estático utilizando submódulos de Git.
Todo este proceso implica utilizar 3 herramientas.
 La CLI de hugo. Un editor de texto (preferentemente con soporte para Markdown). Git.  Mis primeros intentos implicaron hacer uso de unos cuantos scripts
Uno para crear nuevos artículos</description>
			<content type="html"><![CDATA[<p>Este <a href="https://yorodm.github.io">blog</a> es creado con
<a href="https://gohugo.io">Hugo</a> y publicado utilizando Github Pages. Cada
artículo es creado utilizando <strong>Markdown</strong> y añadido a un
<a href="https://github.com/yorodm/yorodm-site">repositorio</a> donde finalmente
pasa a formar parte del sitio estático utilizando submódulos de <code>Git</code>.</p>
<p>Todo este proceso implica utilizar 3 herramientas.</p>
<ol>
<li>La <strong>CLI</strong> de <code>hugo</code>.</li>
<li>Un editor de texto (preferentemente con soporte para Markdown).</li>
<li>Git.</li>
</ol>
<p>Mis primeros intentos implicaron hacer uso de unos cuantos <em>scripts</em></p>
<p>Uno para crear nuevos artículos</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># New article</span>
<span class="nv">POST_NAME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HUGO_BLOG_ROOT</span><span class="s2">/content/blog/</span><span class="nv">$1</span><span class="s2">&#34;</span>
hugo new <span class="nv">$POST_NAME</span>
emacsclient <span class="nv">$POST_NAME</span>
</code></pre></div><p>Otro para salvarlos y publicar</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># Save post and publish</span>
<span class="nb">cd</span> <span class="nv">$HUGO_BLOG_ROOT</span>
<span class="c1"># Remember to build the site</span>
hugo --noChmod --noTimes --ignoreCase
git commit -a -m <span class="s2">&#34;Update </span><span class="k">$(</span>date +%Y%M%d<span class="k">)</span><span class="s2">&#34;</span>
<span class="nb">cd</span> <span class="nv">$HUGO_BLOG_ROOT</span>/publish
git commit -a -m <span class="s2">&#34;Update </span><span class="k">$(</span>date +%Y%M%d<span class="k">)</span><span class="s2">&#34;</span>
git push origin master
<span class="nb">cd</span> ..
git push origin master
</code></pre></div><p>Y finalmente uno para preview</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># Run hugo in watch mode</span>
<span class="nb">cd</span> <span class="nv">$HUGO_BLOG_ROOT</span>
hugo serve
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Emacs &#43; Golang. Edición 2019</title>
			<link>https://yorodm.is-a.dev/blog/emacs-golang-setup-2019/</link>
			<pubDate>Mon, 25 Mar 2019 15:34:27 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/emacs-golang-setup-2019/</guid>
			<description>Go 1.12 fue lanzado hace un mes y entre los cambios más significativos se encuentran varias mejoras en el soporte para módulos (que va a ser el método por defecto en la versión 1.13).
Si eres usuario de Emacs y te interesa desarrollar utilizando Go, aquí tienes una guía sencilla de como habilitar el soporte para el lenguaje.
Paso 1. Language server protocol Si tienes una versión actualizada de lsp-mode ya tienes soporte para bingo, una herramienta que provee un servidor de lenguajes para Go y que tiene soporte integrado para trabajar con módulos</description>
			<content type="html"><![CDATA[<p><a href="https://blog.golang.org/go1.12">Go 1.12</a> fue lanzado hace un
mes y entre los cambios más significativos se encuentran varias mejoras
en el soporte para módulos (que va a ser el método por defecto en la
versión 1.13).</p>
<p>Si eres usuario de <a href="https://www.gnu.org/software/emacs">Emacs</a> y te
interesa desarrollar utilizando Go, aquí tienes una guía sencilla de
como habilitar el soporte para el lenguaje.</p>
<h2 id="paso-1-language-server-protocol">Paso 1. Language server protocol</h2>
<p>Si tienes una versión actualizada de
<a href="https://github.com/emacs-lsp/lsp-mode">lsp-mode</a> ya tienes soporte
para <a href="https://github.com/saibing/bingo">bingo</a>, una herramienta que
provee un servidor de lenguajes para Go y que tiene soporte integrado
para trabajar con módulos</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">lsp-mode</span>
  <span class="nb">:commands</span> <span class="p">(</span><span class="nv">lsp</span><span class="p">)</span>
  <span class="nb">:config</span>
  <span class="p">(</span><span class="nb">use-package</span> <span class="nv">company-lsp</span>
    <span class="nb">:config</span>
    <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;company-backends</span> <span class="ss">&#39;company-lsp</span><span class="p">)))</span>

<span class="p">(</span><span class="nb">use-package</span> <span class="nv">lsp-ui</span>
  <span class="nb">:hook</span> <span class="p">(</span><span class="nv">lsp-mode</span> <span class="o">.</span> <span class="nv">lsp-ui-mode</span><span class="p">)</span>
  <span class="nb">:config</span>
  <span class="p">(</span><span class="nf">define-key</span> <span class="nv">lsp-ui-mode-map</span>
	<span class="p">[</span><span class="nv">remap</span> <span class="nv">xref-find-definitions</span><span class="p">]</span> <span class="nf">#&#39;</span><span class="nv">lsp-ui-peek-find-definitions</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">define-key</span> <span class="nv">lsp-ui-mode-map</span>
	<span class="p">[</span><span class="nv">remap</span> <span class="nv">xref-find-references</span><span class="p">]</span> <span class="nf">#&#39;</span><span class="nv">lsp-ui-peek-find-references</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">setq</span> <span class="nv">lsp-ui-sideline-enable</span> <span class="no">nil</span>
        <span class="nv">lsp-ui-doc-enable</span> <span class="no">t</span>
        <span class="nv">lsp-ui-flycheck-enable</span> <span class="no">nil</span>
        <span class="nv">lsp-ui-imenu-enable</span> <span class="no">t</span>
		<span class="nv">lsp-ui-sideline-ignore-duplicate</span> <span class="no">t</span><span class="p">))</span>
</code></pre></div><h2 id="paso-2-go-mode-y-utilidades">Paso 2. Go mode y utilidades</h2>
<p>Como <a href="https://github.com/emacs-lsp/lsp-mode">lsp-mode</a> es un <em>minor mode</em> necesitamos
el soporte para el lenguaje (font-lock entre otras cosas). Los pasos necesarios son:</p>
<ol>
<li>Instalar <a href="golang.org/x/tools/cmd/goimports">goimports</a></li>
<li>Instalar <a href="https://github.com/golang/lint">golint</a> o
<a href="https://golang.org/cmd/gofmt/">gofmt</a>.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">flycheck</span><span class="p">)</span>
<span class="p">(</span><span class="nb">use-package</span> <span class="nv">go-mode</span>
  <span class="nb">:config</span>
  <span class="c1">; Use goimports instead of go-fmt</span>
  <span class="p">(</span><span class="nb">setq</span> <span class="nv">gofmt-command</span> <span class="s">&#34;goimports&#34;</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">flycheck-mode</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;go-mode-hook</span> <span class="ss">&#39;company-mode</span><span class="p">)</span>
  <span class="c1">;; Call Gofmt before saving</span>
  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;before-save-hook</span> <span class="ss">&#39;gofmt-before-save</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;go-mode-hook</span> <span class="nf">#&#39;</span><span class="nv">lsp</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;go-mode-hook</span> <span class="nf">#&#39;</span><span class="nv">flycheck-mode</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;go-mode-hook</span> <span class="o">&#39;</span><span class="p">(</span><span class="nb">lambda</span> <span class="p">()</span>
			     <span class="p">(</span><span class="nv">local-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&#34;C-c C-r&#34;</span><span class="p">)</span> <span class="ss">&#39;go-remove-unused-imports</span><span class="p">)))</span>
  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;go-mode-hook</span> <span class="o">&#39;</span><span class="p">(</span><span class="nb">lambda</span> <span class="p">()</span>
			     <span class="p">(</span><span class="nv">local-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&#34;C-c C-g&#34;</span><span class="p">)</span> <span class="ss">&#39;go-goto-imports</span><span class="p">)))</span>
  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;go-mode-hook</span> <span class="p">(</span><span class="nb">lambda</span> <span class="p">()</span>
			    <span class="p">(</span><span class="nf">set</span> <span class="p">(</span><span class="nf">make-local-variable</span> <span class="ss">&#39;company-backends</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">company-go</span><span class="p">))</span>
			    <span class="p">(</span><span class="nv">company-mode</span><span class="p">))))</span>
</code></pre></div><h2 id="paso-3-comenzar-a-programar-en-go">Paso 3. Comenzar a programar en Go.</h2>
<p>Con la configuración anterior puedes empezar a programar en Go</p>
<ol>
<li>Completamiento y referencias cruzadas</li>
<li>Revisión de código mientras escribes.</li>
<li>Formato automático al salvar.</li>
<li>Un efecto aprecido al <em>hover</em> de <a href="https://code.visualstudio.com/">ese editor taaan popular</a></li>
</ol>
<h2 id="paso-4-compilar-y-debug">Paso 4. Compilar y debug.</h2>
<p>Puedes configurar el comando de compilación por defecto que utilizas
cuando editas archivos Go.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="c1">;; Adicionar en la sección :config de `go-mode`</span>
<span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;go-mode-hook</span> <span class="nf">#&#39;</span><span class="nv">setup-go-mode-compile</span><span class="p">)</span>

<span class="c1">;; adicionar en el mismo archivo</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">setup-go-mode-compile</span> <span class="p">()</span>
  <span class="c1">; Customize compile command to run go build</span>
  <span class="p">(</span><span class="nb">if</span> <span class="p">(</span><span class="nv">not</span> <span class="p">(</span><span class="nf">string-match</span> <span class="s">&#34;go&#34;</span> <span class="nv">compile-command</span><span class="p">))</span>
      <span class="p">(</span><span class="nf">set</span> <span class="p">(</span><span class="nf">make-local-variable</span> <span class="ss">&#39;compile-command</span><span class="p">)</span>
           <span class="s">&#34;go build -v &amp;&amp; go test -v &amp;&amp; go vet&#34;</span><span class="p">)))</span>
</code></pre></div><p>Si prefieres los <em>debuggers</em> interactivos debes instalar
<a href="https://github.com/go-delve/delve">delve</a> y añadir la siguiente línea
en tu archivo de inicio de Emacs.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">go-dlv</span><span class="p">)</span>
</code></pre></div><p>Los comandos <code>dlv</code> y <code>dlv-current-func</code> son los puntos de entrada al debugger.</p>
]]></content>
		</item>
		
		<item>
			<title>Plumber: ETL simple para Python</title>
			<link>https://yorodm.is-a.dev/blog/plumber-simple-etl/</link>
			<pubDate>Tue, 12 Mar 2019 10:14:20 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/plumber-simple-etl/</guid>
			<description>Implementando una feature para uno de los proyectos en los que trabajo terminé necesitando hacer el típico proceso ETL que tomara las cosas de una fuente X, las pasara por 1 o varios filtros y las cargara en nuestra base de datos documental.
Ahora, si bien existen frameworks de excelente calidad como petl y Bonobo que cubren este campo, me encontré con los siguientes problemas:
 Existe mucho código legacy en el proyecto.</description>
			<content type="html"><![CDATA[<p>Implementando una feature para uno de los proyectos en los que trabajo terminé
necesitando hacer el típico proceso ETL que tomara las cosas de una fuente X,
las pasara por 1 o varios filtros y las cargara en nuestra base de datos documental.</p>
<p>Ahora, si bien existen frameworks de excelente calidad como
<a href="https://petl.readthedocs.io">petl</a> y <a href="https://www.bonobo-project.org">Bonobo</a>
que cubren este campo, me encontré con los siguientes problemas:</p>
<ol>
<li>Existe mucho código <em>legacy</em> en  el proyecto.</li>
<li>Exceptuando la parte de ETL, la complejidad de proceso es bastante alta,
incrementarla no sería lo más adecuado.</li>
<li>El componente ETL no se ejecutaría por si mismo sino como parte de una solución.</li>
<li>La mayoría de los datos que agregamos usan formatos no convencionales.</li>
</ol>
<p>Aunque en apariencia sencillos, estos cuatro puntos me llevaron a crear mi
propio <em>miniframework</em> para componentes ETL que es fácil de integrar con código
existente y no hace ningún tipo de suposiciones con respecto a la forma de los
datos, <a href="https://github.com/yorodm/plumber">plumber</a>.</p>
<h2 id="características-de-plumber">Características de plumber.</h2>
<p>Para el desarrollo del framework me basé mucho en mi experiencia anterior con
<a href="https://www.kiba-etl.org">kiba</a>, una de esas joyas que siempre vienen desde la
comunidad de Ruby. Kiba hace uso de las bondades de Ruby para crear DSL&rsquo;s
dejando al desarrollador que se centre en los datos de la manera que considere
correcta. En <a href="https://github.com/yorodm/plumber">plumber</a> esta idea está
reflejada en cuatro conceptos:</p>
<ol>
<li>Extractors (que acceden al origen de datos).</li>
<li>Transformers (que manipulan los datos obtenidos).</li>
<li>Writers (que persisten los datos).</li>
<li>Pipes (que controlan todo el proceso).</li>
</ol>
<h3 id="extractors">Extractors.</h3>
<p>Un <strong>Extractor</strong> es una clase o función que emite datos para una tubería (pipe),
los datos pueden tener cualquier origen y cualquier forma, los extractors son
independientes del resto del proceso.</p>
<p>Aunque es posible utilizar una función como extractor, lo recomendado en la
mayoría de los casos es heredar de la clase <code>plumber.pipe.Extractor</code> e
implementar los métodos <code>read</code>, <code>setup</code> y <code>cleanup</code>. Varios extractors se pueden
unir para formar uno solo que emita una secuencia (tupla) con los valores de
cada uno.</p>
<h3 id="transformers">Transformers.</h3>
<p>Un <strong>Transformer</strong> es cualquier función marcada con <code>@transformer</code> o una clase
derivada de <code>plumber.pipe.Transformer</code>. Es posible unir varios transformers en
una cadena de procesamiento</p>
<h3 id="writer">Writer.</h3>
<p>Finalmente los <strong>Writers</strong> heredan de <code>plumber.pipe.Writer</code>. Como generalmente
acceden a recursos externos, es requerido que implementen los métodos <code>setup</code> y
<code>cleanup</code> además de <code>write</code>.</p>
<p>Todos los elementos usan anotaciones <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a>.</p>
<h2 id="un-ejemplo-sencillo">Un ejemplo sencillo:</h2>
<p>Uno de los casos de uso que motivaron la creación del framework fue obtener una
lista de registros de un archivo con formato propietario. El contenido del
archivo es más o menos el siguiente:</p>
<ol>
<li>Campo identificador de cliente. Comienza en la posición 0, tiene longitud
entre 1 y 20.</li>
<li>Campo identificador de transacción. Comienza en la posición 22. Es numérico y tiene longitud 8.</li>
<li>Campo identificador de transacción relacionada. Comienza en la posición 32.
Tiene longitud 8, es opcional y de no estar se ponen espacios en blanco.</li>
<li>Campo motivo de la transacción. Comienza en la posición 42 y longitud entre
10 y 50. Es de tipo alfanumérico, incluye espacios, no tiene delimitaciones.</li>
</ol>
<p>Veamos un ejemplo de como procesar estos archivos:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">plumber</span> <span class="kn">import</span> <span class="n">pipe</span> <span class="c1"># API síncrona.</span>

<span class="nd">@pipe</span><span class="o">.</span><span class="n">extractor</span>
<span class="k">def</span> <span class="nf">read_file</span><span class="p">():</span>
    <span class="n">file_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s1">&#39;FILENAME&#39;</span><span class="p">]</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">():</span>
            <span class="k">yield</span> <span class="n">process_line</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="nd">@pipe</span><span class="o">.</span><span class="n">transformer</span>
<span class="k">def</span> <span class="nf">csvfy</span><span class="p">(</span><span class="n">element</span><span class="p">):</span>
    <span class="k">yield</span> <span class="s1">&#39;,&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span><span class="n">element</span><span class="p">))</span>


<span class="k">class</span> <span class="nc">SaveData</span><span class="p">(</span><span class="n">pipe</span><span class="o">.</span><span class="n">Writer</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">filename</span> <span class="o">=</span> <span class="n">filename</span>

    <span class="k">def</span> <span class="nf">setup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="s1">&#39;w&#39;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">cleanup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="n">tuberia</span> <span class="o">=</span> <span class="n">pipe</span><span class="o">.</span><span class="n">Pipe</span><span class="p">(</span>
    <span class="n">read_file</span><span class="p">,</span>
    <span class="n">csvfy</span><span class="p">,</span>
    <span class="n">SaveData</span><span class="p">(</span><span class="s2">&#34;prueba.csv&#34;</span><span class="p">)</span>
<span class="p">)</span>
<span class="n">tuberia</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div><h2 id="qúe-queda-por-hacer">¿Qúe queda por hacer?</h2>
<p>Ahora que <a href="https://github.com/yorodm/plumber">plumber</a> salió a la luz es hora de
convertirlo en un framework ETL medianamente decente. Los próximos pasos son:</p>
<ol>
<li>Adicionar la posibilidad de hacer <strong>Writers</strong> como funciones con
administración de contexto integrada.</li>
<li>Poder inicializar los <strong>Extractors</strong> de manera sencilla.</li>
<li>Mejorar el tratamiento de errores.</li>
<li>Concurrencia y/o paralelismo.</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Python: Decoradores estándar y su uso</title>
			<link>https://yorodm.is-a.dev/blog/decoradores-stdlib/</link>
			<pubDate>Tue, 15 Jan 2019 22:11:42 -0500</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/decoradores-stdlib/</guid>
			<description>Entre las baterías includas de Python, vienen varios decoradores que nos facilitan la vida. Aquí una lista de algunos y breve explicación acerca de su uso.
Decoradores para OOP property Uno de los más usados. Convierte un conjunto de métodos en un descriptor que hace las funciones de propiedad. Útil cuando queremos adicionar algún tipo de lógica a propiedades de la clase.
class C: def __init__(self): self._x = None def getx(self): return self.</description>
			<content type="html"><![CDATA[<p>Entre las <em>baterías includas</em> de Python, vienen varios decoradores que nos
facilitan la vida. Aquí una lista de algunos y breve explicación acerca de su
uso.</p>
<h2 id="decoradores-para-oop">Decoradores para OOP</h2>
<h3 id="property">property</h3>
<p>Uno de los más usados. Convierte un conjunto de métodos en un <strong>descriptor</strong> que
hace las funciones de propiedad. Útil cuando queremos adicionar algún tipo de
lógica a propiedades de la clase.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_x</span> <span class="o">=</span> <span class="kc">None</span>

    <span class="k">def</span> <span class="nf">getx</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_x</span> <span class="ow">or</span> <span class="n">request</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;http://mydata.com/x&#39;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">setx</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_x</span> <span class="o">=</span> <span class="n">value</span>
        <span class="n">request</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s1">&#39;http://mydata.com/x&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">x</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">delx</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">_x</span>
        <span class="n">request</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;http://mydata.com/x&#39;</span><span class="p">)</span>

    <span class="n">x</span> <span class="o">=</span> <span class="nb">property</span><span class="p">(</span><span class="n">getx</span><span class="p">,</span> <span class="n">setx</span><span class="p">,</span> <span class="n">delx</span><span class="p">,</span> <span class="s2">&#34;x como proxy a servicio REST.&#34;</span><span class="p">)</span>
</code></pre></div><h3 id="staticmethod">staticmethod</h3>
<p>Define métodos estáticos<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Pueden ser llamados tanto desde la clase o una de sus instancias</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">calculo_externo</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">val2</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">val</span> <span class="o">+</span> <span class="n">val2</span>
</code></pre></div><p>Nótese la falta del parámetro implicito inicial.</p>
<h3 id="classmethod">classmethod</h3>
<p>Convierte un método normal a un método de clase. Los métodos de clase reciben la
clase como parámetro implícito en vez de una de las instancias. Uno de los casos
de uso más comunes es crear formas alternativas de instanciar la clase.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="p">,</span><span class="n">z</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="n">z</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_dict</span><span class="p">(</span><span class="bp">cls</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">cls</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
</code></pre></div><h3 id="abcabstractmethod">abc.abstractmethod</h3>
<p>Métodos que tienen que ser implementados <strong>obligatoriamente</strong> por las subclases.
El equivalente a <em>interfaces</em> o <em>clases abstractas</em> que tanto encuentras en
otros lenguajes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">abc</span>

<span class="k">class</span> <span class="nc">Animal</span><span class="p">:</span>

    <span class="nd">@abc</span><span class="o">.</span><span class="n">abstractmethod</span>
    <span class="k">def</span> <span class="nf">sonido</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">Perro</span><span class="p">(</span><span class="n">Animal</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">sonido</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Ladrido&#34;</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Vaca</span><span class="p">(</span><span class="n">Animal</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">sonido</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Mugido&#34;</span><span class="p">)</span>
</code></pre></div><p>Se puede utilizar en conjunción con <em>@property</em> o <em>staticmethod</em> para crear
propiedades o métodos estáticos abstractos.</p>
<h3 id="functoolstotal_ordering">functools.total_ordering</h3>
<p>Nos permite crear clases que soporten operadores de comparación. Solo tenemos
que proveer el método <em><strong>eq</strong></em> y uno de los seis métodos predefinidos de orden.
La documentación de la bilioteca estándar advierte que este decorador puede
tener impactos en el rendimiento.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="nd">@total_ordering</span>
<span class="k">class</span> <span class="nc">Student</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">_is_valid_operand</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">(</span><span class="nb">hasattr</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="s2">&#34;lastname&#34;</span><span class="p">)</span> <span class="ow">and</span>
                <span class="nb">hasattr</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="s2">&#34;firstname&#34;</span><span class="p">))</span>
    <span class="k">def</span> <span class="fm">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_valid_operand</span><span class="p">(</span><span class="n">other</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">NotImplemented</span>
        <span class="k">return</span> <span class="p">((</span><span class="bp">self</span><span class="o">.</span><span class="n">lastname</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">firstname</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span> <span class="o">==</span>
                <span class="p">(</span><span class="n">other</span><span class="o">.</span><span class="n">lastname</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="n">other</span><span class="o">.</span><span class="n">firstname</span><span class="o">.</span><span class="n">lower</span><span class="p">()))</span>
    <span class="k">def</span> <span class="fm">__lt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_valid_operand</span><span class="p">(</span><span class="n">other</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">NotImplemented</span>
        <span class="k">return</span> <span class="p">((</span><span class="bp">self</span><span class="o">.</span><span class="n">lastname</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">firstname</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span> <span class="o">&lt;</span>
                <span class="p">(</span><span class="n">other</span><span class="o">.</span><span class="n">lastname</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="n">other</span><span class="o">.</span><span class="n">firstname</span><span class="o">.</span><span class="n">lower</span><span class="p">()))</span>
</code></pre></div><h3 id="dataclassesdataclass">dataclasses.dataclass</h3>
<p>Nos permite omitir la declaración de <em><strong>init</strong></em> y <em><strong>repr</strong></em> en la declaración
de clases en las que solo vamos a manejar datos. El uso puede ser extendido a
subclases</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">dataclasses</span>

<span class="nd">@dataclasses</span><span class="o">.</span><span class="n">dataclass</span>
<span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
    <span class="n">x</span><span class="p">:</span> <span class="nb">float</span>
    <span class="n">y</span><span class="p">:</span> <span class="nb">float</span>

    <span class="k">def</span> <span class="nf">euclidian_distance</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">:</span> <span class="n">Point</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span>
            <span class="p">(</span><span class="n">other</span><span class="o">.</span><span class="n">x</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">other</span><span class="o">.</span><span class="n">y</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>
        <span class="p">)</span>

<span class="nd">@dataclasses</span><span class="o">.</span><span class="n">dataclass</span>
<span class="k">class</span> <span class="nc">ThreeDPoint</span><span class="p">(</span><span class="n">Point</span><span class="p">):</span>
    <span class="n">z</span><span class="p">:</span> <span class="nb">float</span>

    <span class="k">def</span> <span class="nf">euclidian_distance</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">other</span><span class="p">:</span> <span class="n">Point</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
        <span class="n">dx</span> <span class="o">=</span> <span class="p">(</span><span class="n">other</span><span class="o">.</span><span class="n">x</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>
        <span class="n">dy</span> <span class="o">=</span> <span class="p">(</span><span class="n">other</span><span class="o">.</span><span class="n">y</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>
        <span class="n">dz</span> <span class="o">=</span> <span class="p">(</span><span class="n">other</span><span class="o">.</span><span class="n">z</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">z</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>
        <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span>
            <span class="n">dx</span><span class="o">+</span><span class="n">dy</span><span class="o">+</span><span class="n">dz</span>
        <span class="p">)</span>
</code></pre></div><h2 id="decoradores-para-funciones">Decoradores para funciones</h2>
<h3 id="functoolslru_cache">functools.lru_cache</h3>
<p>Caché de las últimas <em>n</em> llamadas a una función. Los parametros tienen que poder
ser utilizados como llaves de un diccionario.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">lru_cache</span>
<span class="nd">@lru_cache</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_exchange</span><span class="p">(</span><span class="n">local</span><span class="p">,</span> <span class="n">foreign</span><span class="p">):</span>
    <span class="n">exchange_service</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="n">local</span><span class="p">,</span> <span class="n">foreign</span><span class="p">)</span>
</code></pre></div><h3 id="asynciocoroutine">asyncio.coroutine</h3>
<p>Convierte corutinas basadas en generadores para que sean compatibles con el
nuevo modelo <em>async/await</em>. Usar solamente en código que necesita ser portado</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">asyncio</span> <span class="kn">import</span> <span class="n">coroutine</span>

<span class="nd">@coroutine</span>
<span class="k">def</span> <span class="nf">render_view</span><span class="p">(</span><span class="n">view_name</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="n">template</span> <span class="o">=</span> <span class="n">Template</span><span class="p">(</span><span class="n">view_name</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
    <span class="k">yield</span> <span class="n">template</span><span class="o">.</span><span class="n">render</span><span class="p">()</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">hanlde_get</span><span class="p">(</span><span class="n">route</span><span class="p">):</span>
    <span class="k">await</span> <span class="n">render_view</span><span class="p">(</span><span class="n">route</span><span class="o">.</span><span class="n">view</span><span class="p">,</span> <span class="n">route</span><span class="o">.</span><span class="n">params</span><span class="p">)</span>
</code></pre></div><h3 id="contextlibcontextmanager">contextlib.contextmanager</h3>
<p>Convierte una función en un <em>contextmanager</em>. Puede ser usado de dos formas:</p>
<ol>
<li>Utilizando una sentencia <em>with</em></li>
<li>Como un decorador.</li>
</ol>
<p>Personalmente para hacer decoradores que sean <em>contextmanagers</em> prefiero utilizar
la clase <em>ContextDecorator</em>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">contextlib</span> <span class="kn">import</span> <span class="n">contextmanager</span>

<span class="nd">@contextmanager</span>
<span class="k">def</span> <span class="nf">acquire_lock</span><span class="p">(</span><span class="n">key</span><span class="p">):</span>
    <span class="n">credentials</span> <span class="o">=</span> <span class="n">get_credentials</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="n">lock</span> <span class="o">=</span> <span class="n">acquire_lock_using_credentials</span><span class="p">(</span><span class="n">credentials</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">lock</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="n">release_lock</span><span class="p">(</span><span class="n">lock</span><span class="p">)</span>

<span class="k">with</span> <span class="n">acquire_lock</span><span class="p">(</span><span class="s1">&#39;my secret api key&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">lock</span><span class="p">:</span>
    <span class="n">use_critical_resource</span><span class="p">(</span><span class="n">lock</span><span class="p">)</span>
</code></pre></div><h2 id="decoradores-extra">Decoradores extra</h2>
<h3 id="functoolswraps">functools.wraps</h3>
<p>Decorador para crear decoradores. Útil para hacer que las funciones conserven
propiedades como <em><strong>name</strong></em> y <em><strong>doc</strong></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
<span class="k">def</span> <span class="nf">my_decorator</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
    <span class="nd">@wraps</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">wrapper</span>

<span class="nd">@my_decorator</span>
<span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    Esta es la doc
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="k">pass</span>
</code></pre></div><h3 id="functoolssingledispatch">functools.singledispatch</h3>
<p>Permite crear funciones sobrecargadas a partir del tipo del primer parámetro.
Hace uso de las anotaciones de tipos.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="k">class</span> <span class="nc">Perro</span><span class="p">:</span>
    <span class="k">pass</span>

<span class="n">clas</span> <span class="n">Vaca</span><span class="p">:</span>
    <span class="k">pass</span>

<span class="nd">@singledispatch</span>
<span class="k">def</span> <span class="nf">sonido</span><span class="p">(</span><span class="n">animal</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="nd">@sonido</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">Perro</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">_</span><span class="p">(</span><span class="n">animal</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Ladra&#34;</span><span class="p">)</span>

<span class="nd">@sonido</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">Vaca</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">_</span><span class="p">(</span><span class="n">animal</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Muge&#34;</span><span class="p">)</span>
</code></pre></div><section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>No soy muy partidario de usar métodos estáticos en Python.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
		</item>
		
		<item>
			<title>Scrapper para DEV desde Emacs</title>
			<link>https://yorodm.is-a.dev/blog/web-scrapping-emacs/</link>
			<pubDate>Tue, 20 Nov 2018 17:28:59 -0500</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/web-scrapping-emacs/</guid>
			<description>Scrapper para DEV desde Emacs. Recién publiqué en DEV un artículo acerca de como hacer un scrapper para obtener los títulos del feed principal. El artículo surgió de una discusión amistosa acerca de la relevancia de Common Lisp como tecnología en la actualidad y quedé muy satisfecho con el resultado.
Me llamó tanto la atención la simpleza detrás de las bibliotecas utilizadas que decidí ver si había una para Emacs Lisp y&amp;hellip; TL;DR, aquí está el scrapper 😍.</description>
			<content type="html"><![CDATA[<h1 id="scrapper-para-dev-desde-emacs">Scrapper para DEV desde Emacs.</h1>
<p>Recién publiqué en
<a href="https://dev.to/yorodm/scrapping-dev-with-common-lisp-6j0">DEV</a> un artículo
acerca de como hacer un <a href="https://es.wikipedia.org/wiki/Web_scraping">scrapper</a>
para obtener los títulos del <a href="https://dev.to">feed principal</a>. El artículo
surgió de una discusión amistosa acerca de la relevancia de Common Lisp como
tecnología en la actualidad y quedé muy satisfecho con el resultado.</p>
<p>Me llamó tanto la atención la simpleza detrás de las bibliotecas utilizadas que
decidí ver si había una para Emacs Lisp y&hellip; TL;DR, aquí está el scrapper 😍.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="c1">;;; Eval this in the scratch buffer, first make sure to get</span>
<span class="c1">;;; `elquery&#39; from MELPA.</span>
<span class="c1">;;; Eval this in a buffer and get the headlines in *another* buffer</span>
<span class="c1">;;; named *dev*</span>
<span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;elquery</span><span class="p">)</span>
<span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">dev-buffer</span> <span class="p">(</span><span class="nv">generate-new-buffer</span> <span class="s">&#34;*dev*&#34;</span><span class="p">)))</span>
  <span class="p">(</span><span class="nb">with-current-buffer</span> <span class="p">(</span><span class="nv">url-retrieve-synchronously</span> <span class="s">&#34;https://dev.to&#34;</span><span class="p">)</span>
    <span class="c1">;; Feel free to hate this</span>
    <span class="p">(</span><span class="nb">dolist</span> <span class="p">(</span><span class="nf">elt</span> <span class="p">(</span><span class="nf">mapcar</span> <span class="ss">&#39;elquery-text</span> <span class="p">(</span><span class="nv">elquery-$</span> <span class="s">&#34;div.single-article h3&#34;</span>
                                                  <span class="p">(</span><span class="nv">elquery-read-string</span> <span class="p">(</span><span class="nf">buffer-string</span><span class="p">)))))</span>
      <span class="p">(</span><span class="nb">with-current-buffer</span> <span class="nv">dev-buffer</span> <span class="p">(</span><span class="nf">insert</span> <span class="p">(</span><span class="nf">concat</span> <span class="nf">elt</span> <span class="s">&#34;\n&#34;</span><span class="p">))))))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Trucos Aws Lambda (parte 2)</title>
			<link>https://yorodm.is-a.dev/blog/trucos-aws-lambda-ii/</link>
			<pubDate>Sun, 18 Nov 2018 12:39:59 -0500</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/trucos-aws-lambda-ii/</guid>
			<description>Trucos con AWS Lambda (II). Truco 1. Utiliza las tags. Los tags en AWS nos permiten:
 Tener asociados un máximo de 50 a cada recurso. Llaves de hasta 128 caracteres Unicode. Valores de hasta 256 caracteres Unicode. Distinción entre mayúsculas y minúsculas para llaves y valores.  Basicamente todo lo que necesitamos para hacernos un caché:
lambda_cient = boto3.client(&amp;#39;lambda&amp;#39;) def save_cache(tags): # tags is a dict of string:string lambda_client.tag_resource( Resource=self_arn, # get it from handler context Tags=json.</description>
			<content type="html"><![CDATA[<h1 id="trucos-con-aws-lambda-ii">Trucos con AWS Lambda (II).</h1>
<h2 id="truco-1-utiliza-las-tags">Truco 1. Utiliza las tags.</h2>
<p>Los tags en AWS nos permiten:</p>
<ol>
<li>Tener asociados un máximo de 50 a cada recurso.</li>
<li>Llaves de hasta 128 caracteres Unicode.</li>
<li>Valores de hasta 256 caracteres Unicode.</li>
<li>Distinción entre mayúsculas y minúsculas para llaves y valores.</li>
</ol>
<p>Basicamente todo lo que necesitamos para hacernos un caché:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">lambda_cient</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s1">&#39;lambda&#39;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">save_cache</span><span class="p">(</span><span class="n">tags</span><span class="p">):</span> <span class="c1"># tags is a dict of string:string</span>
    <span class="n">lambda_client</span><span class="o">.</span><span class="n">tag_resource</span><span class="p">(</span>
        <span class="n">Resource</span><span class="o">=</span><span class="n">self_arn</span><span class="p">,</span> <span class="c1"># get it from handler context</span>
        <span class="n">Tags</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">tags</span><span class="p">)</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">get_cache</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">lambda_client</span><span class="o">.</span><span class="n">list_tags</span><span class="p">(</span>
        <span class="n">Resource</span><span class="o">=</span><span class="n">self_arn</span> <span class="c1"># get it from handler context</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">invalidate_cache</span><span class="p">(</span><span class="n">keys</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">lambda_client</span><span class="o">.</span><span class="n">untag_resource</span><span class="p">(</span>
        <span class="n">Resource</span><span class="o">=</span><span class="n">self_arn</span><span class="p">,</span>
        <span class="n">Tags</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">keys</span><span class="p">)</span>
    <span class="p">)</span>
</code></pre></div><h2 id="truco-2-desarrolla-tus-lambdas-en-otros-lenguajes">Truco 2. Desarrolla tus Lambdas en otros lenguajes.</h2>
<p>Los lenguajes soportados oficialmente por AWS Lambda son (en el momento en que escribo este artículo):</p>
<ol>
<li>Javascript (Node.js).</li>
<li>Python (2 y 3).</li>
<li>Java.</li>
<li>C#.</li>
<li>Go.</li>
</ol>
<p>¿No está el lenguaje de tu preferencia? Pues no te preocupes, esa lista se puede extender a:</p>
<ol>
<li>Kotlin, Groovy, Ruby Clojure y todo lo que soporte la JVM.</li>
<li>Cualquier lenguaje soportado por la plataforma .NET, incluido <a href="https://www.peachpie.io">PHP</a>.</li>
<li>Rust sobre <a href="https://github.com/softprops/lando">lando</a> o <a href="https://github.com/ilianaw/rust-crowbar">crowbar</a> incluso con integración con <a href="https://github.com/softprops/serverless-rust">serverless</a>.</li>
<li><a href="https://blog.scottlogic.com/2018/10/18/serverless-rust.html">Cualquier cosa que genere WASM</a></li>
</ol>
<h2 id="más-trucos">Más trucos</h2>
<p>¿Tienes algún otro que compartir? Deja tu comentario aquí o en <a href="https://dev.to/yorodm">DEV</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Interfaces de comandos con Python</title>
			<link>https://yorodm.is-a.dev/blog/python-simple-cli/</link>
			<pubDate>Mon, 29 Oct 2018 09:45:07 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/python-simple-cli/</guid>
			<description>Interfaces de comandos sencillas con Python. Entre las muchas cosas para las que uso Python está escribir pequeñas herramientas de líneas de comandos que me ayudan en el día a día (especialmente cuando toca trabajar de devops). Aunque en la biblioteca estándar existe argparse y muchos están contentos con eso, personalmente me gustan alternativas que me hagan la vida más fácil.
Docopt. Docopt Es (en mi opinión) uno de los mejores frameworks para crear herramientas de líneas de comandos que existe y tiene además la ventaja de no ser exclusiva de Python, para utilizarla solo tienes que documentar el módulo o función que va a obtener los argumentos de la línea de comandos.</description>
			<content type="html"><![CDATA[<h1 id="interfaces-de-comandos-sencillas-con-python">Interfaces de comandos sencillas con Python.</h1>
<p>Entre las muchas cosas para las que uso <a href="https://python.org">Python</a> está
escribir pequeñas herramientas de líneas de comandos que me ayudan en el día a
día (especialmente cuando toca trabajar de <strong>devops</strong>). Aunque en la biblioteca
estándar existe <code>argparse</code> y muchos están contentos con eso, personalmente me
gustan alternativas que me hagan la vida más fácil.</p>
<h2 id="docopt">Docopt.</h2>
<p><a href="http://docopt.org/" title="Docopt">Docopt</a> Es (en mi opinión) uno de los mejores
frameworks para crear herramientas de líneas de comandos que existe y tiene
además la ventaja de no ser exclusiva de <strong>Python</strong>, para utilizarla solo tienes
que documentar el módulo o función que va a obtener los argumentos de la línea
de comandos. Veamos un ejemplo de una herramienta que utilizo para subscribir
ahorrarme tener que subscribir a un conjunto de usuarios cuando creo un
repositorio.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;Subscriber.
</span><span class="s2">
</span><span class="s2">Usage:
</span><span class="s2">  subscriber.py repo &lt;reponame&gt; group &lt;groupname&gt;
</span><span class="s2">
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">arguments</span><span class="p">):</span>
    <span class="n">repo_name</span> <span class="o">=</span> <span class="n">arguments</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;&lt;reponame&gt;&#39;</span><span class="p">)</span>
    <span class="n">group_name</span> <span class="o">=</span> <span class="n">arguments</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;&lt;groupname&gt;&#39;</span><span class="p">)</span>
    <span class="c1"># El resto va aqui</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">arguments</span> <span class="o">=</span> <span class="n">docopt</span><span class="p">(</span><span class="vm">__doc__</span><span class="p">)</span>
    <span class="n">main</span><span class="p">(</span><span class="n">arguments</span><span class="p">)</span>
</code></pre></div><p>Al invocar la herramienta sin parámetros obtenemos el siguiente mensaje de ayuda:</p>
<pre><code class="language-console" data-lang="console">$ python subscriber.py
Usage:
  subscriber.py repo &lt;reponame&gt; group &lt;groupname&gt;

</code></pre><p>Para utilizarla simplemente podemos</p>
<pre><code class="language-console" data-lang="console">$ python subscriber.py repo https://my.repo.cu group developers
</code></pre><p>Ventajas:</p>
<ol>
<li>El código extra es mínimo (casi todo es documentación).</li>
<li>Ganas la documentación de gratis.</li>
<li>El minilenguaje de las cli es extremadamente poderoso.</li>
</ol>
<p>Desventajas:</p>
<ol>
<li>Tienes que aprender el minilenguaje.</li>
</ol>
<h2 id="lazycli">Lazycli.</h2>
<p><a href="https://github.com/ninjaaron/lazycli" title="Lazycli">Lazycli</a> es un framework <strong>muy
nuevo</strong> pero de una simpleza y claridad que dan ganas de usarlo. En lugar de
documentación utilizamos decoradores para declarar nuestra <strong>CLI</strong>. El autor nos
muestra como ejemplo un clon de <code>cp</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/usr/bin/env python3</span>
<span class="kn">import</span> <span class="nn">lazycli</span>
<span class="kn">import</span> <span class="nn">shutil</span>
<span class="kn">import</span> <span class="nn">sys</span>


<span class="nd">@lazycli</span><span class="o">.</span><span class="n">script</span>
<span class="k">def</span> <span class="nf">cp</span><span class="p">(</span><span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="n">dst</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;copy around files&#34;&#34;&#34;</span>
    <span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">src</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">shutil</span><span class="o">.</span><span class="n">copy2</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">dst</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">IsADirectoryError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">recursive</span><span class="p">:</span>
                <span class="n">shutil</span><span class="o">.</span><span class="n">copytree</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">dst</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="p">)</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">cp</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div><p>Si invocamos la herramienta obtenemos lo siguiente:</p>
<pre><code class="language-console" data-lang="console">$ python cp.py -h
usage: cp.py [-h] [-r] [src [src ...]] dst

copy around files

positional arguments:
  src
  dst

optional arguments:
  -h, --help       show this help message and exit
  -r, --recursive
</code></pre><p>Ventajas:</p>
<ol>
<li>Casi 0 código extra (ejecutar el objeto que devuelve el decorador).</li>
<li>Convención sobre configuración.</li>
</ol>
<p>Desventajas:</p>
<ol>
<li>No es tán versátil como <code>docopt</code>.</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Trucos con AWS Lambda. (Parte 1)</title>
			<link>https://yorodm.is-a.dev/blog/aws-lambda-tricks/</link>
			<pubDate>Thu, 25 Oct 2018 12:45:05 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/aws-lambda-tricks/</guid>
			<description>Truco 1: Recursividad asíncrona. A veces queremos garantizar que una lambda se ejecute siempre de forma asíncrona.
def lambda_handler(event, context): if not event.get(&amp;#39;async&amp;#39;): invoke_self_async(event, context) return def invoke_self_async(event, context): new_event = { &amp;#39;async&amp;#39;: True, &amp;#39;data&amp;#39;: event } boto3.client(&amp;#39;lambda&amp;#39;).invoke_async( FunctionName=context.invoked_function_arn, InvokeArgs=json.dumps(new_event) ) Este truco es muy útil cuando no nos interesa el resultado de la ejecución o el mismo es enviado por vías alternativas (ej. usando SNS)
Truco 2: Planificación dinámica. A veces la planificación de un servicio debe ser alterada en dependencia de ciertas condiciones.</description>
			<content type="html"><![CDATA[<h2 id="truco-1-recursividad-asíncrona">Truco 1: Recursividad asíncrona.</h2>
<p>A veces queremos garantizar que una lambda se ejecute siempre de forma
asíncrona.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">lambda_handler</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;async&#39;</span><span class="p">):</span>
        <span class="n">invoke_self_async</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
        <span class="k">return</span>

<span class="k">def</span> <span class="nf">invoke_self_async</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="n">new_event</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s1">&#39;async&#39;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
        <span class="s1">&#39;data&#39;</span><span class="p">:</span> <span class="n">event</span>
    <span class="p">}</span>
    <span class="n">boto3</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s1">&#39;lambda&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">invoke_async</span><span class="p">(</span>
        <span class="n">FunctionName</span><span class="o">=</span><span class="n">context</span><span class="o">.</span><span class="n">invoked_function_arn</span><span class="p">,</span>
        <span class="n">InvokeArgs</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">new_event</span><span class="p">)</span>
    <span class="p">)</span>
</code></pre></div><p>Este truco es muy útil cuando no nos interesa el resultado de la ejecución o el
mismo es enviado por vías alternativas (ej. usando <strong>SNS</strong>)</p>
<h2 id="truco-2-planificación-dinámica">Truco 2: Planificación dinámica.</h2>
<p>A veces la planificación de un servicio debe ser alterada en dependencia de ciertas condiciones.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">lambda_handler</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="n">reschedule_event</span><span class="p">()</span>
    <span class="n">keep_working</span><span class="p">()</span>

<span class="n">REGULAR_SCHEDULE</span> <span class="o">=</span> <span class="s1">&#39;rate(20 minutes)&#39;</span>
<span class="n">WEEKEND_SHEDULE</span> <span class="o">=</span> <span class="s1">&#39;rate(1 hour)&#39;</span>
<span class="n">RULE_NAME</span> <span class="o">=</span> <span class="s1">&#39;My Rule&#39;</span>

<span class="k">def</span> <span class="nf">reschedule_event</span><span class="p">():</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    Cambia la planificación de la lambda, para que descanse los findes :D
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="n">sched</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">)</span>
    <span class="n">current</span> <span class="o">=</span> <span class="n">sched</span><span class="o">.</span><span class="n">describe_rule</span><span class="p">(</span><span class="n">Name</span><span class="o">=</span><span class="n">RULE_NAME</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">is_weekend</span><span class="p">()</span> <span class="ow">and</span> <span class="s1">&#39;minutes&#39;</span> <span class="ow">in</span> <span class="n">current</span><span class="p">[</span><span class="s1">&#39;ScheduleExpression&#39;</span><span class="p">]:</span>
        <span class="n">sched</span><span class="o">.</span><span class="n">put_rule</span><span class="p">(</span>
            <span class="n">Name</span><span class="o">=</span><span class="n">RULE_NAME</span><span class="p">,</span>
            <span class="n">ScheduleExpression</span><span class="o">=</span><span class="n">WEEKEND_SCHEDULE</span><span class="p">,</span>
        <span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">is_weekend</span> <span class="ow">and</span> <span class="s1">&#39;hour&#39;</span> <span class="ow">in</span> <span class="n">current</span><span class="p">[</span><span class="s1">&#39;ScheduleExpression&#39;</span><span class="p">]:</span>
        <span class="n">sched</span><span class="o">.</span><span class="n">put_rule</span><span class="p">(</span>
            <span class="n">Name</span><span class="o">=</span><span class="n">RULE_NAME</span><span class="p">,</span>
            <span class="n">ScheduleExpression</span><span class="o">=</span><span class="n">REGULAR_SCHEDULE</span><span class="p">,</span>
        <span class="p">)</span>
</code></pre></div><h2 id="truco-3-flujos-de-negocio">Truco 3: Flujos de negocio</h2>
<p>Cuando vayas a usar <strong>StepFunctions</strong> recuerda:</p>
<blockquote>
<p>Nunca uses un cañón para matar un mosquito</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">lambda_handler</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">dispatch_workflow</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">dispatch_workflow</span><span class="p">(</span><span class="n">activity</span><span class="p">):</span>
    <span class="n">workflow_id</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;workflow_id&#39;</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">workflow_id</span><span class="p">:</span>
        <span class="c1"># Retrieve the state from Dynamo</span>
        <span class="n">state</span> <span class="o">=</span> <span class="n">get_saved_state</span><span class="p">(</span><span class="n">event</span><span class="p">[</span><span class="s1">&#39;workflow_id&#39;</span><span class="p">])</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">workflow_id</span> <span class="o">=</span> <span class="n">create_workflow_id</span><span class="p">()</span> <span class="c1"># uuid maybe</span>
        <span class="n">state</span> <span class="o">=</span> <span class="kc">None</span>
    <span class="n">workflow</span> <span class="o">=</span> <span class="n">Workflow</span><span class="p">(</span><span class="n">workflow_id</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">workflow</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="n">events</span><span class="p">)</span> <span class="c1"># Workflow is a callable</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Cementerio Proyectos Github</title>
			<link>https://yorodm.is-a.dev/blog/cementerio-proyectos-github/</link>
			<pubDate>Mon, 20 Aug 2018 10:50:39 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/cementerio-proyectos-github/</guid>
			<description>Siguiendo uno de los trending topics aquí en DEV voy a publicar mi propio listado de proyectos difuntos en Github. Para ver los otros listados puedes seguir el tag
CL-Rx Lenguaje: Common Lisp
Resúmen: Mi propia implementación de reactive para Common Lisp.
Estado: Zombie
En el momento estaba empezando a utilizar RxJava y alguno de los conceptos no me quedaron claros así que decidí hacerme mi propia implementación a ver como funcionaba.</description>
			<content type="html"><![CDATA[<p>Siguiendo uno de los trending topics aquí en <a href="http://dev.to">DEV</a> voy a publicar
mi propio listado de proyectos difuntos en <a href="http://github.com/yorodm">Github</a>.
Para ver los otros listados puedes seguir el <a href="http://dev.to/t/graveyard">tag</a></p>
<h2 id="cl-rxhttpgithubcomyorodmcl-rx"><a href="http://github.com/yorodm/cl-rx">CL-Rx</a></h2>
<p><strong>Lenguaje:</strong> Common Lisp</p>
<p><strong>Resúmen:</strong> Mi propia implementación de
<a href="http://reactivex.io">reactive</a> para Common Lisp.</p>
<p><strong>Estado</strong>: Zombie</p>
<p>En el momento estaba empezando a utilizar
<a href="http://github.com/ReactiveX/RxJava">RxJava</a> y alguno de los conceptos no me
quedaron claros así que decidí hacerme mi propia implementación a ver como
funcionaba.</p>
<h2 id="odoo-addonshttpsgithubcomyorodmodoo-addons"><a href="https://github.com/yorodm/odoo-addons">Odoo Addons</a></h2>
<p><strong>Lenguaje:</strong> Python</p>
<p><strong>Resumen:</strong> Addons para <a href="http://www.odoo.com">Odoo ERP</a></p>
<p><strong>Estado:</strong>: Zombie</p>
<p>Me pareció buena idea mantener un repositorio con varios addons que he
desarrollado para <a href="http://www.odoo.com">Odoo</a>, el feedback que obtuve no fue
positivo y decidí no continuar. Cabe la posibilidad que en el futuro libere
algunos más.</p>
<h2 id="jupyter-notebookshttpsgithubcomyorodmjupyter-notebooks"><a href="https://github.com/yorodm/jupyter-notebooks">Jupyter Notebooks</a></h2>
<p><strong>Lenguaje:</strong> Python</p>
<p><strong>Resumen:</strong> Notebooks con algunas cosas que he utilizado para trabajar.</p>
<p><strong>Estado:</strong> Zombie.</p>
<p>Jupyter es una de mis herramientas favoritas y hago notebooks de casi todo lo
que me ayuda en mi trabajo. El proyecto murió cuando mi empleador me sugirió
afectuosamente que consultara las políticas de la empresa acerca de &ldquo;regalar el
código en internet&rdquo;</p>
<p>Tengo además 2 intentos de libros que mi orgullo se niega a reconocer como
zombies y asegura que &ldquo;para el año que viene los va a terminar&rdquo; y reconozco
haber eliminado algún que otro proyecto (después de un tiempo te miran a la cara
culpándote por no haberlos terminado).</p>
]]></content>
		</item>
		
		<item>
			<title>Buenas prácticas con Serverless</title>
			<link>https://yorodm.is-a.dev/blog/practicas-serverless-framework/</link>
			<pubDate>Fri, 13 Jul 2018 14:44:56 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/practicas-serverless-framework/</guid>
			<description>Algunas buenas practicas para Serverless Framework Aunque llevo poco tiempo utilizando Serverless he intentado ir escribiendo un conjunto de prácticas para escribir plantillas. Las comparto aquí para los que como yo están empezando.
Reducir la dependencia de valores externos. En varios de los ejemplos que he encontrado (incluso en el sitio oficial) es común utilizar referencias a valores externos por toda la plantilla.
functions:hello:name:${env:FUNC_PREFIX}-hellohandler:handler.helloworld:name:${env:FUNC_PREFIX}-worldhandler:handler.worldAunque esto no es una mala practica en si, hace que nuestras funciones dependan de un valor que solo vamos a obtener desde el entorno.</description>
			<content type="html"><![CDATA[<h1 id="algunas-buenas-practicas-para-serverless-framework">Algunas buenas practicas para Serverless Framework</h1>
<p>Aunque llevo poco tiempo utilizando <a href="http://serverless.com">Serverless</a> he
intentado ir escribiendo un conjunto de prácticas para escribir plantillas.
Las comparto aquí para los que como yo están empezando.</p>
<h2 id="reducir-la-dependencia-de-valores-externos">Reducir la dependencia de valores externos.</h2>
<p>En varios de los ejemplos que he encontrado (incluso en el sitio oficial) es
común utilizar referencias a valores externos por toda la plantilla.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">functions</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">hello</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${env:FUNC_PREFIX}-hello</span><span class="w">
</span><span class="w">    </span><span class="nt">handler</span><span class="p">:</span><span class="w"> </span><span class="l">handler.hello</span><span class="w">
</span><span class="w">  </span><span class="nt">world</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${env:FUNC_PREFIX}-world</span><span class="w">
</span><span class="w">    </span><span class="nt">handler</span><span class="p">:</span><span class="w"> </span><span class="l">handler.world</span><span class="w">
</span></code></pre></div><p>Aunque esto no es una mala practica en si, hace que nuestras funciones dependan
de un valor que <strong>solo</strong> vamos a obtener desde el entorno. ¿Qué tal si mañana
decidimos que el valor venga [de la salida de otro stack]
(<a href="https://serverless.com/framework/docs/providers/aws/guide/variables#reference-cloudformation-outputs)?">https://serverless.com/framework/docs/providers/aws/guide/variables#reference-cloudformation-outputs)?</a></p>
<p>Por suerte para nosotros podemos hacer esto:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">custom</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">func_prefix</span><span class="p">:</span><span class="w"> </span><span class="c"># cualquier fuente para el valor</span><span class="w">
</span><span class="w"></span><span class="nt">functions</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">hello</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${self:custom.func_prefix}</span><span class="w">
</span></code></pre></div><p>De esta manera la dependencia al valor externo ocurre en un solo punto y se
propaga hacia el resto de la plantilla.</p>
<h2 id="usar-plugins">Usar plugins.</h2>
<p>Las plantillas pueden [utilizar plugins]
(<a href="https://serverless.com/framework/docs/providers/aws/guide/plugins/">https://serverless.com/framework/docs/providers/aws/guide/plugins/</a>) que
adicionan funcionalidades que van desde nueva sintáxis para algunos aspectos a
acceso a características especiales del proveedor que estemos utilizando. Antes
de lanzarte a crear un script o [lastimar a una cabra]
(<a href="https://en.wikipedia.org/wiki/Animal_sacrifice">https://en.wikipedia.org/wiki/Animal_sacrifice</a>) deberías consultar si alguien a
<a href="https://www.npmjs.com/search?q=serverless">creado un plugin</a></p>
<h2 id="contenido-en-la-plantilla-según-condiciones">Contenido en la plantilla según condiciones.</h2>
<p>Serverless no tiene soporte para evaluación condicional de plantillas así que si
pretendes crear contenido basado por ejemplo en el <strong>stage</strong> del despliegue
puedes hacer algo como esto:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="c"># stage_properties-qa.yml</span><span class="w">
</span><span class="w"></span><span class="nt">functions</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">qa_function</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">handler</span><span class="p">:</span><span class="w"> </span><span class="l">MyQaHandler</span><span class="w">
</span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="c"># stage_properties-prod.yml</span><span class="w">
</span><span class="w"></span><span class="nt">functions</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">prod_function</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">handler</span><span class="p">:</span><span class="w"> </span><span class="l">MyProdHandler</span><span class="w">
</span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="c"># serverless.yml</span><span class="w">
</span><span class="w"></span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">stage</span><span class="p">:</span><span class="w"> </span><span class="l">${opt:stage, &#34;qa&#34;}</span><span class="w">
</span><span class="w"></span><span class="nt">functions</span><span class="p">:</span><span class="w"> </span><span class="l">${file(stage_properties-${self:custom.stage}.yml):functions}</span><span class="w">
</span></code></pre></div><p>Ahora tienes contenido en <code>functions</code> acorde al valor del <strong>stage</strong> si usas
varios entornos de configuración esta estructura te puede ahorrar mucho trabajo
y posibles complicaciones.</p>
<h2 id="otras-pistas-o-trucos">Otras pistas o trucos.</h2>
<p>¿Tienes otras pistas o trucos? Por favor compartelas en los comentarios</p>
]]></content>
		</item>
		
		<item>
			<title>Implementando JSON-RPC en Go</title>
			<link>https://yorodm.is-a.dev/blog/json-rpc-golang/</link>
			<pubDate>Wed, 09 May 2018 11:45:31 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/json-rpc-golang/</guid>
			<description>Implementando JSON-RPC en Go JSON-RPC es mi método favorito para comunicarme con Odoo desde el &amp;ldquo;exterior&amp;rdquo;, en estos días estaba experimentando para enviar información desde un servicio desarrollado en Go hacia el ERP y utilizar Odoo como dashboard y me di cuenta que hacerlo con el paquete net/rpc/jsonrpc era todo un dolor de cabeza por lo que me pregunté cuánto tiempo me tomaría hacerme mi propia implementación. La respuesta es 32 minutos (tuve que leer mucha documentación).</description>
			<content type="html"><![CDATA[<h1 id="implementando-json-rpc-en-go">Implementando JSON-RPC en Go</h1>
<p><strong>JSON-RPC</strong> es mi método favorito para comunicarme con
<a href="http://www.odoo.com">Odoo</a> desde el &ldquo;exterior&rdquo;, en estos días estaba
experimentando para enviar información desde un servicio desarrollado en
<a href="http://golang.org">Go</a> hacia el <strong>ERP</strong> y utilizar <strong>Odoo</strong> como <em>dashboard</em> y
me di cuenta que hacerlo con el paquete <strong>net/rpc/jsonrpc</strong> era todo un dolor de
cabeza por lo que me pregunté cuánto tiempo me tomaría hacerme mi propia
implementación. La respuesta es 32 minutos (tuve que leer mucha documentación).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;errors&#34;</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;io/ioutil&#34;</span>
    <span class="s">&#34;net/http&#34;</span>
    <span class="s">&#34;net/rpc&#34;</span>
    <span class="s">&#34;net/url&#34;</span>
    <span class="s">&#34;reflect&#34;</span>
<span class="p">)</span>

<span class="kd">type</span> <span class="nx">JsonCodec</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">url</span>        <span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span>
    <span class="nx">httpClient</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Client</span>
    <span class="nx">responses</span>  <span class="kd">map</span><span class="p">[</span><span class="kt">uint64</span><span class="p">]</span><span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Response</span>
    <span class="nx">response</span>   <span class="o">*</span><span class="nx">Response</span>
    <span class="nx">ready</span>      <span class="kd">chan</span> <span class="kt">uint64</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">self</span> <span class="o">*</span><span class="nx">JsonCodec</span><span class="p">)</span> <span class="nf">WriteRequest</span><span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">rpc</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">args</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="nx">request</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">NewRequest</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span> <span class="nx">req</span><span class="p">.</span><span class="nx">ServiceMethod</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Seq</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">err</span>
    <span class="p">}</span>

    <span class="nx">response</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">httpClient</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">err</span>
    <span class="p">}</span>
    <span class="nx">self</span><span class="p">.</span><span class="nx">responses</span><span class="p">[</span><span class="nx">req</span><span class="p">.</span><span class="nx">Seq</span><span class="p">]</span> <span class="p">=</span> <span class="nx">response</span>
    <span class="nx">self</span><span class="p">.</span><span class="nx">ready</span> <span class="o">&lt;-</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Seq</span>
    <span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">self</span> <span class="o">*</span><span class="nx">JsonCodec</span><span class="p">)</span> <span class="nf">ReadResponseHeader</span><span class="p">(</span><span class="nx">resp</span> <span class="o">*</span><span class="nx">rpc</span><span class="p">.</span><span class="nx">Response</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="nx">seq</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">self</span><span class="p">.</span><span class="nx">ready</span>
    <span class="nx">response</span> <span class="o">:=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">responses</span><span class="p">[</span><span class="nx">seq</span><span class="p">]</span>
    <span class="k">if</span> <span class="nx">response</span><span class="p">.</span><span class="nx">StatusCode</span> <span class="p">&lt;</span> <span class="mi">200</span> <span class="o">||</span> <span class="nx">response</span><span class="p">.</span><span class="nx">StatusCode</span> <span class="o">&gt;=</span> <span class="mi">300</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;request error: %d&#34;</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">StatusCode</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">err</span>
    <span class="p">}</span>
    <span class="nx">_</span> <span class="p">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="nx">r</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">NewResponse</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">err</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Failed</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">resp</span><span class="p">.</span><span class="nx">Error</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%v&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Err</span><span class="p">())</span>
    <span class="p">}</span>
    <span class="nx">self</span><span class="p">.</span><span class="nx">response</span> <span class="p">=</span> <span class="nx">r</span>
    <span class="nx">resp</span><span class="p">.</span><span class="nx">Seq</span> <span class="p">=</span> <span class="nx">seq</span>
    <span class="nb">delete</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">responses</span><span class="p">,</span> <span class="nx">seq</span><span class="p">)</span>
    <span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">self</span> <span class="o">*</span><span class="nx">JsonCodec</span><span class="p">)</span> <span class="nf">ReadResponseBody</span><span class="p">(</span><span class="nx">v</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">v</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">nil</span>
    <span class="p">}</span>
    <span class="nx">value</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">value</span><span class="p">.</span><span class="nf">Kind</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">Ptr</span> <span class="o">||</span> <span class="nx">value</span><span class="p">.</span><span class="nf">IsNil</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Called with non ptr or nil&#34;</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="nx">value</span><span class="p">.</span><span class="nf">Elem</span><span class="p">()</span>
    <span class="nx">value</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="o">*</span><span class="nx">self</span><span class="p">.</span><span class="nx">response</span><span class="p">))</span>
    <span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">self</span> <span class="o">*</span><span class="nx">JsonCodec</span><span class="p">)</span> <span class="nf">Close</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="nx">transport</span> <span class="o">:=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">httpClient</span><span class="p">.</span><span class="nx">Transport</span><span class="p">.(</span><span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Transport</span><span class="p">)</span>
    <span class="nx">transport</span><span class="p">.</span><span class="nf">CloseIdleConnections</span><span class="p">()</span>
    <span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></div><p>Como pueden ver utilizo la biblioteca estándar para crear un nuevo <em>codec</em> que
pueda utilizarse con <strong>net/rpc</strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="nx">codec</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">JsonCodec</span><span class="p">{</span>
        <span class="nx">url</span><span class="p">:</span>        <span class="nx">u</span><span class="p">,</span> <span class="o">/</span><span class="nx">net</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">Url</span>
        <span class="nx">httpClient</span><span class="p">:</span> <span class="nx">httpClient</span><span class="p">,</span> <span class="c1">// net.http.Client
</span><span class="c1"></span>        <span class="nx">ready</span><span class="p">:</span>      <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">uint64</span><span class="p">),</span>
        <span class="nx">responses</span><span class="p">:</span>  <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">uint64</span><span class="p">]</span><span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Response</span><span class="p">),</span>
    <span class="p">}</span>
<span class="nx">client</span> <span class="o">:=</span> <span class="nx">rpc</span><span class="p">.</span><span class="nf">NewClientWithCodec</span><span class="p">(</span><span class="nx">codec</span><span class="p">)</span>
</code></pre></div><p>Gran parte de la simpleza de la implementación responde al trato que reciben las
interfaces en <a href="http://golang.org">Go</a>. Si no estás familiarizado con el tema te
recomiendo que leas.</p>
<ol>
<li><a href="https://gobyexample.com/interfaces">Go by Example: Interfaces</a></li>
<li><a href="https://dev.to/deanveloper/the-problem-with-interfaces-and-how-go-fixed-it">The Problem with Interfaces, and how Go Fixed it</a></li>
<li><a href="https://dev.to/loderunner/hacking-go-interfaces">Haking go interfaces</a></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Libro: Ruby on Rails Notes for Professionals</title>
			<link>https://yorodm.is-a.dev/blog/ruby-on-rails-for-professionals/</link>
			<pubDate>Wed, 25 Apr 2018 11:37:30 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/ruby-on-rails-for-professionals/</guid>
			<description>Libro: Ruby on Rails for Professionals Un excelente libro producto del trabajo y conocimiento de cientos de usuarios de Stack Overflow. Como tantos otros libros disponibles en GoalKicker este es gratis, bajo licencia Creative Commons BY-SA y una de las cosas que debes leer si trabajas o estás interesado en aprender Ruby On Rails
El libro cuenta con 72 capítulos (más bien pequeñas recetas) que cubren desde la instalación y arranque de un nuevo proyecto hasta el despliegue utilizando Docker.</description>
			<content type="html"><![CDATA[<h1 id="libro-ruby-on-rails-for-professionals">Libro: Ruby on Rails for Professionals</h1>
<p>Un excelente libro producto del trabajo y conocimiento de cientos de usuarios de
<a href="http://www.stackoverflow.com">Stack Overflow</a>. Como tantos otros libros disponibles en
<a href="http://goalkicker.com">GoalKicker</a> este es gratis, bajo licencia Creative Commons
BY-SA y una de las cosas que debes leer si trabajas o estás interesado en
aprender <a href="http://rubyonrails.org">Ruby On Rails</a></p>
<p>El libro cuenta con 72 capítulos (más bien pequeñas recetas) que cubren desde la
instalación y arranque de un nuevo proyecto hasta el despliegue utilizando
Docker. Si estás interesado puedes descargarlo
<a href="http://goalkicker.com/RubyOnRailsBook/">aquí</a></p>
<p>También recomiendo que veas:</p>
<ol>
<li><a href="http://goalkicker.com/PythonBook/">Python Notes for Professionals</a></li>
<li><a href="http://goalkicker.com/RubyBook/">Ruby Notes for Professionals</a></li>
<li><a href="http://goalkicker.com/JavaScriptBook/">Javascript Notes for Professionals</a></li>
<li><a href="http://goalkicker.com/LinuxBook/">Linux Notes for Professionals</a></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>De vuelta, cambios y anuncios</title>
			<link>https://yorodm.is-a.dev/blog/cambios-plantilla-blog/</link>
			<pubDate>Wed, 11 Apr 2018 14:56:57 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/cambios-plantilla-blog/</guid>
			<description>De vuelta, cambios y anuncios. Despúes de casi 3 meses sin actualizar el blog (muuuuuuucho trabajo) estoy de vuelta con nuevos cambios para la plantilla (ahora el RSS muestra el contenido completo) y sindicaciones para dev y pronto en Medium.
Les dejo un roadmap de los próximos temas que pienso tratar en el blog:
 Emacs para desarrolladores de frontend (Vue, Angular, Typescript). Emacs para desarrolladores de backend (SQL, Python, Ruby, PHP).</description>
			<content type="html"><![CDATA[<h1 id="de-vuelta-cambios-y-anuncios">De vuelta, cambios y anuncios.</h1>
<p>Despúes de casi 3 meses sin actualizar el blog (muuuuuuucho trabajo) estoy de
vuelta con nuevos cambios para la plantilla (ahora el RSS muestra el contenido
completo) y sindicaciones para <a href="https://dev.to/yorodm">dev</a> y pronto en
<a href="http://medium.com">Medium</a>.</p>
<p>Les dejo un <em>roadmap</em> de los próximos temas que pienso tratar en el blog:</p>
<ol>
<li><em>Emacs</em> para desarrolladores de <em>frontend</em> (Vue, Angular, Typescript).</li>
<li><em>Emacs</em> para desarrolladores de <em>backend</em> (SQL, Python, Ruby, PHP).</li>
<li>Integrando <em>Odoo</em> a las redes sociales.</li>
</ol>
<p>Saludos y mantenganse enlazados.</p>
]]></content>
		</item>
		
		<item>
			<title>Creando widgets para Odoo (Parte 1)</title>
			<link>https://yorodm.is-a.dev/blog/creando-widgets-odoo/</link>
			<pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/creando-widgets-odoo/</guid>
			<description>Creando widgets para Odoo (Parte 1). Después de semanas de inactividad regreso con una de [Odoo 10] (http://www.odoo.com), como ya hay bastantes sitios por ahí dedicados a explicar causas y razones de lo que se puede hacer con Python desde el backend voy a centrarme en el trabajo con Javascript y el frontend.
En este artículo vamos a crear un nuevo widget para manejar campos enteros y de coma flotante en la vista (la parte V de MV*).</description>
			<content type="html"><![CDATA[<h1 id="creando-widgets-para-odoo-parte-1">Creando widgets para Odoo (Parte 1).</h1>
<p>Después de semanas de inactividad regreso con una de [Odoo 10]
(<a href="http://www.odoo.com">http://www.odoo.com</a>), como ya hay bastantes sitios por ahí dedicados a explicar
causas y razones de lo que se puede hacer con <strong>Python</strong> desde el <em>backend</em> voy
a centrarme en el trabajo con <strong>Javascript</strong> y el <em>frontend</em>.</p>
<p>En este artículo vamos a crear un nuevo <em>widget</em> para manejar campos enteros y
de coma flotante en la vista (la parte V de MV*). Aunque pueda parecer un
ejemplo simple, surgió de la necesidad real de proveer campos numéricos limitados
en un rango de una forma explicita, sencilla y agradable para el usuario.</p>
<h2 id="comenzando-el-proyecto">Comenzando el proyecto.</h2>
<p>Para poder reutilizar el <em>widget</em>, vamos a crear un <em>addon</em> que contenga las
bibliotecas y el código necesario para hacerlo funcionar. Empecemos creando el
esqueleto del módulo:</p>
<pre><code class="language-console" data-lang="console">$ odoo-bin scaffold widget-slider
</code></pre><p>Añadimos la descripción del <em>addon</em>, lo definimos como instalable, ponemos una
categoría válida e incluimos *<em>web</em> como dependencia. Continuando.</p>
<h2 id="bibliotecas-externas">Bibliotecas externas</h2>
<p>Nuestro <em>widget</em> tiene una sola dependencia externa: [Bootstrap Slider]
(<a href="https://github.com/seiyria/bootstrap-slider/)">https://github.com/seiyria/bootstrap-slider/)</a>. Normalmente utilizaríamos
<strong>Bower</strong> o <strong>NPM</strong> para manejar las dependencias de proyectos <strong>Javascript</strong>,
pero para algo tan pequeño no es necesario, basta con descargar el <em>release</em> de
la biblioteca y los archivos para <em>static/lib</em>.</p>
<p>Para hacer estos archivos disponibles en el <em>backend</em> extenderemos la plantilla
<em>web.assets_backend</em>. Modifiquemos el archivo autogenerado <em>templates.xml</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml">   <span class="nt">&lt;template</span> <span class="na">id=</span><span class="s">&#34;assets_backend&#34;</span>
       <span class="na">name=</span><span class="s">&#34;web_widget_slider_assets&#34;</span>
       <span class="na">inherit_id=</span><span class="s">&#34;web.assets_backend&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;xpath</span> <span class="na">expr=</span><span class="s">&#34;.&#34;</span> <span class="na">position=</span><span class="s">&#34;inside&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&#34;stylesheet&#34;</span>
                <span class="na">href=</span><span class="s">&#34;/widget-slider/static/lib/css/bootstrap-slider.css&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;script</span> <span class="na">type=</span><span class="s">&#34;text/javascript&#34;</span>
                <span class="na">src=</span><span class="s">&#34;/widget-slider/static/lib/js/bootstrap-slider.js&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/xpath&gt;</span>
    <span class="nt">&lt;/template&gt;</span>
</code></pre></div><h2 id="javascript-dentro-de-odoo-para-novatos">Javascript dentro de Odoo (para novatos).</h2>
<p>Ya tenemos lo necesario para comenzar con nuestro <em>widget</em> ahora solo queda
escribir el código necesario para inicializar el plugin.</p>
<p>Lo primero que debes saber para trabajar con <strong>Javascript</strong> en <strong>Odoo</strong> es que a
la versión 10 utiliza un concepto de módulos muy parecido a <strong>requirejs</strong>.
Supongamos que tenemos un módulo <em>validar</em> donde incluimos utilitarios para el
resto de nuestros <em>addons</em> y ahí exportamos una función <em>check_int</em>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="nx">odoo</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="err">&#39;</span><span class="nx">validar</span><span class="p">.</span><span class="nx">enteros</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">require</span><span class="p">){</span>
    <span class="s2">&#34;use strict&#34;</span><span class="p">;</span>

    <span class="kd">var</span> <span class="nx">check_int</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Number</span><span class="p">.</span><span class="nx">isInteger</span><span class="p">(</span><span class="nx">val</span><span class="p">)){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&#34;El valor no es entero&#34;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">val</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">};</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="nx">check_int</span><span class="o">:</span> <span class="nx">check_int</span>
    <span class="p">};</span>
<span class="p">});</span>
</code></pre></div><p>En otro <em>addon</em> (o simplemente otro módulo) tendríamos algo parecido a:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="nx">odoo</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="nx">otro_addon</span><span class="p">.</span><span class="nx">otro_servicio</span><span class="s1">&#39;, function(require){
</span><span class="s1">
</span><span class="s1">    valida_enteros = require(&#39;</span><span class="nx">web_validar</span><span class="p">.</span><span class="nx">enteros</span><span class="err">&#39;</span><span class="p">).</span><span class="nx">check_int</span><span class="p">;</span>
    <span class="c1">// Resto del código
</span><span class="c1"></span><span class="p">});</span>
</code></pre></div><p>Si eres más de <em>backend</em> piensa en todo esto como:</p>
<ol>
<li>Una versíon <strong>Javascript</strong> de <em>self.env[&ldquo;modelo&rdquo;]</em></li>
<li>Una forma fiable de declarar dependencias sin importar el orden en que
carguen los archivos.</li>
</ol>
<p>La desventaja de este sistema es que es la única forma de acceder a los
componentes que brinda el <em>framework</em>, lo que lleva a muchas veces tener que
crear <em>wrappers</em> aún alrededor de funcionalidades sencillas.</p>
<h2 id="clases-herencia-widgets">Clases, herencia, widgets</h2>
<p>Otro punto a tener en cuenta es la programación orientada a objetos. Conceptos
tan familiares como clases, objetos y herencia tienen un enfoque &ldquo;alternativo&rdquo;
en <strong>Javascript</strong>. Los desarrolladores de <strong>Odoo</strong> siguieron la idea de
<strong>BackboneJS</strong> de implementar el modelo de [herencia de John Resig]
(<a href="http://ejohn.org/">http://ejohn.org/</a>)</p>
<ol>
<li>Las clases se definen heredando de <em>Class</em> o de alguna de sus hijas.</li>
<li><em>extend()</em> se utiliza para heredar de una clase, como parámetro acepta
objetos (o diccionarios que es lo mismo).</li>
<li><em>init()</em> actúa como constructor.</li>
<li><em>include()</em> permite modificar clases (a lo <em>monkey patch</em>)</li>
<li>Cuando utilizamos <em>extend()</em> o <em>include()</em>, cada método que se redefina puede
utilizar <em>this._super()</em> para acceder a la implementación original.</li>
</ol>
<p>Tomando un ejemplo del código de Odoo</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="c1">// Definimos una clase Person
</span><span class="c1"></span> <span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="nx">Class</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">isDancing</span><span class="p">){</span>
     <span class="k">this</span><span class="p">.</span><span class="nx">dancing</span> <span class="o">=</span> <span class="nx">isDancing</span><span class="p">;</span>
    <span class="p">},</span>
  <span class="nx">dance</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
     <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">dancing</span><span class="p">;</span>
    <span class="p">}</span>
 <span class="p">});</span>

<span class="c1">// Y ahora una clase Ninja
</span><span class="c1"></span> <span class="kd">var</span> <span class="nx">Ninja</span> <span class="o">=</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="k">this</span><span class="p">.</span><span class="mi">_</span><span class="kr">super</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="nx">swingSword</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>
 <span class="p">});</span>
</code></pre></div><p>Siguiendo este modelo, cada <em>widget</em> es una clase que hereda de <em>web.Widget</em>
y algún que otro <em>mixin</em>.</p>
<h2 id="creando-un-slider-para-valores-enteros">Creando un slider para valores enteros.</h2>
<p>En vez de crear nuestro <em>slider</em> desde el inicio, aprovechemos que existe una
clase encargada de manejar campos numéricos y heredemos de ella. Creemos el
archivo <em>static/src/js/widget_slider.js</em> con el siguiente contenido.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="nx">odoo</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;web_slider.form&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">require</span><span class="p">){</span>
    <span class="s2">&#34;use strict&#34;</span><span class="p">;</span>

    <span class="kd">var</span> <span class="nx">core</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;web.core&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">FieldFloat</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;web.form_widgets&#39;</span><span class="p">).</span><span class="nx">FieldFloat</span><span class="p">;</span>

    <span class="c1">// Heredamos de esta clase para aprovechar toda la
</span><span class="c1"></span>    <span class="c1">// maquinaria de inicialización.
</span><span class="c1"></span>    <span class="kd">var</span> <span class="nx">FieldSlider</span> <span class="o">=</span> <span class="nx">FieldFloat</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
        <span class="c1">// Método que se invoca cuando se va a mostrar
</span><span class="c1"></span>        <span class="c1">// el widget
</span><span class="c1"></span>        <span class="nx">initialize_content</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="k">this</span><span class="p">.</span><span class="mi">_</span><span class="kr">super</span><span class="p">();</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">wrapped</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">slider</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">);</span>
            <span class="c1">// Desabilitar el slider si está en modo
</span><span class="c1"></span>            <span class="c1">// solo lectura
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&#34;effective_readonly&#34;</span><span class="p">)){</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">wrapped</span><span class="p">.</span><span class="nx">slider</span><span class="p">(</span><span class="s2">&#34;disable&#34;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">},</span>

    <span class="p">});</span>
    <span class="c1">// Registramos nuestro widget como disponible para
</span><span class="c1"></span>    <span class="c1">// las vistas de formulario
</span><span class="c1"></span>    <span class="nx">core</span><span class="p">.</span><span class="nx">form_widget_registry</span>
        <span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;slider&#39;</span><span class="p">,</span> <span class="nx">FieldSlider</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="nx">FieldSlider</span> <span class="o">:</span> <span class="nx">FieldSlider</span>
    <span class="p">};</span>
<span class="p">});</span>
</code></pre></div><p>Ahora modifiquemos nuestra plantilla de <em>assets</em> para que cargue este archivo.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;script</span> <span class="na">type=</span><span class="s">&#34;text/javascript&#34;</span>
                <span class="na">src=</span><span class="s">&#34;/widget-slider/static/src/js/widget-slider.js&#34;</span><span class="nt">/&gt;</span>
</code></pre></div><p>Instalemos el addon, activemos el modo desarrollador y probemos cambiar
cualquier campo de una vista formulario añadiendo <em>widget=slider</em> a la
declaración.</p>
<h2 id="resumiendo">Resumiendo.</h2>
<p>Crear un nuevo <em>widget</em> no es un proceso complejo, cada componente del
<em>framework</em> está diseñado de modo en que extender, modificar o añadir
funcionalidades sea un proceso sencillo para cualquiera con conocimientos de
<strong>Javascript</strong>.</p>
<p>Dicho esto, a pesar de que existe [una guía oficial]
(<a href="http://www.odoo.com/documentation/10.0/index.html),">http://www.odoo.com/documentation/10.0/index.html),</a> no es para nada completa y
en la mayoría de los casos la única solución a la pregunta &ldquo;qué es lo que hace
esto&rdquo; es recurrir al código fuente del hasta dar con lo que buscamos.</p>
]]></content>
		</item>
		
		<item>
			<title>Comentarios vía disqus y felices fiestas</title>
			<link>https://yorodm.is-a.dev/blog/comentarios-via-disqus/</link>
			<pubDate>Sat, 23 Dec 2017 10:14:28 -0500</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/comentarios-via-disqus/</guid>
			<description>Comentarios vía Disqus y Felices Fiestas Ya están habilitados los comentarios en el blog. Un poco complicado porque ya saben, el bloqueo y etc. Espero tener más feedback ahora.
En otra nota: ¡Felices Fiestas y un muy Feliz Año Nuevo!</description>
			<content type="html"><![CDATA[<h1 id="comentarios-vía-disqus-y-felices-fiestas">Comentarios vía Disqus y Felices Fiestas</h1>
<p>Ya están habilitados los comentarios en el blog. Un poco complicado porque ya
saben, el bloqueo y etc. Espero tener más <em>feedback</em> ahora.</p>
<p>En otra nota: ¡Felices Fiestas y un muy Feliz Año Nuevo!</p>
]]></content>
		</item>
		
		<item>
			<title>Generadores y referencias</title>
			<link>https://yorodm.is-a.dev/blog/generadores-referencias-python/</link>
			<pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/generadores-referencias-python/</guid>
			<description>Generadores y referencias Las referencias en Python son un tema que a menudo se pasa por alto, incluso por los que ya no somos tan novatos. Hagamos un experimento, toma a diez desarrolladores que conozcas y pregúntales qué hay de malo en esta función.
def funcionx(*args): ctx = dict() for x in args: ctx[&amp;#39;run&amp;#39;] = x yield ctx Vale, es una pregunta con truco y la respuesta es todo o nada en dependencia de como utilices la función generadora.</description>
			<content type="html"><![CDATA[<h1 id="generadores-y-referencias">Generadores y referencias</h1>
<p>Las referencias en <strong>Python</strong> son un tema que a menudo se pasa por alto, incluso
por los que ya no somos <a href="https://stackoverflow.com/questions/47552529/obscure-iterator-behavior-in-python">tan novatos</a>.
Hagamos un experimento, toma a diez desarrolladores que conozcas y
pregúntales qué hay de malo en esta función.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">funcionx</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
    <span class="n">ctx</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">args</span><span class="p">:</span>
        <span class="n">ctx</span><span class="p">[</span><span class="s1">&#39;run&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span>
        <span class="k">yield</span> <span class="n">ctx</span>
</code></pre></div><p>Vale, es una pregunta con truco y la respuesta es <strong>todo</strong> o <strong>nada</strong> en
dependencia de como utilices la función generadora. Si no sabes que es una
función generadora porque no has llegado a ese capítulo en el libro o no te has
leído la <a href="https://www.python.org/dev/peps/pep-0255">PEP 255</a> no importa. Aquí
tienes la versión <strong>TL;DR</strong></p>
<blockquote>
<p>Los funciones generadoras son aquellas que usan <strong>yield</strong> en vez de <strong>return</strong>
para devolver valores.</p>
</blockquote>
<p>Cuando llamas una función generadora obtienes un <em>generador</em>, el cual puedes
utilizar para seguir obteniendo valores de la función, haciendo llamadas que
retornarán nuevos valores mientras encuentren <strong>yield</strong> (como dije antes
<strong>TL;DR</strong> o mejor <strong>TL;DW</strong>). Los generadores son iterables así que generalmente
se utilizan en ciclos <strong>for .. in</strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">funcionx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="n">funcionx</span> <span class="n">at</span> <span class="mh">0x00000000061D98B8</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">funcionx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">):</span>
<span class="o">....</span>    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="p">{</span><span class="s1">&#39;run&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
<span class="p">{</span><span class="s1">&#39;run&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
<span class="p">{</span><span class="s1">&#39;run&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
<span class="p">{</span><span class="s1">&#39;run&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
</code></pre></div><p>Hasta aquí parece todo bien, <strong>funcionx</strong> retorna un objeto de tipo generador y
podemos iterar sobre los resultados. Pero por alguna razón no pasa esta sencilla
prueba unitaria.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">TestFuncionx</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">test_returns_generator</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="nb">isinstance</span><span class="p">(</span><span class="n">funcionx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span><span class="n">collections</span><span class="o">.</span><span class="n">Iterable</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">test_yields_context</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">l</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">funcionx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">),</span><span class="mi">2</span><span class="p">)</span>
        <span class="c1"># ¡¡Fatal!!</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">l</span><span class="p">,[{</span><span class="s1">&#39;run&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="s1">&#39;run&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}])</span>
</code></pre></div><p>¿Cómo es posible?. Obviamente algo está fallando en la prueba unitaria, verifiquemos manualmente.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">funcionx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,)))</span> <span class="o">==</span> <span class="mi">2</span>
<span class="kc">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">funcionx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,))</span>
<span class="p">[{</span><span class="s1">&#39;run&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span> <span class="p">{</span><span class="s1">&#39;run&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}]</span>
</code></pre></div><p>Mmmmm&hellip;¿qúe?&hellip;mmmm. Calma, miremos de cerca la función, especialmente la parte en que hace:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">   <span class="k">yield</span> <span class="n">ctx</span>
</code></pre></div><p>¿Recuerdas que <strong>ctx</strong> es un diccionario? ¿Recuerdas que los diccionarios en <strong>Python</strong> son referencias?</p>
<p>En cada ejecución del generador estamos devolviendo la <strong>misma</strong> referencia con
valores modificados. Cuando utilizas la función en el ciclo <strong>for&hellip;in</strong>
utilizamos el valor de <strong>ctx</strong> y lo descartamos enseguida, como no guardamos el
resultado no notamos que el próximo valor que obtenemos es la misma referencia
modificada.</p>
<figure><img src="/images/generadores-referencias-python/yield-con-ciclo-for.png"/>
</figure>

<p>La prueba unitaria falla porque, cada invocación del generador modifica las
referencias que tenemos guardadas.</p>
<figure><img src="/images/generadores-referencias-python/yield-con-list.png"/>
</figure>

<p>En este caso obtendremos una lista de <em>n</em> elementos que tienen el último valor
de <strong>ctx</strong>.</p>
<p>Por suerte el problema tiene soluciones sencillas, podemos retornar una nueva
instancia en cada invocación o simplemente crear una copia:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">funcionx</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
    <span class="n">ctx</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">args</span><span class="p">:</span>
        <span class="n">ctx</span><span class="p">[</span><span class="s1">&#39;run&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span>
        <span class="k">yield</span> <span class="nb">dict</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
</code></pre></div><p>Y listo, no más valores extraños ni pruebas que fallan.</p>
]]></content>
		</item>
		
		<item>
			<title>Pruebas funcionales con factory_boy y faker</title>
			<link>https://yorodm.is-a.dev/blog/pruebas-funcionales-factory-boy/</link>
			<pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/pruebas-funcionales-factory-boy/</guid>
			<description>Pruebas funcionales con factory_boy. Una de las primeras cosas que aprendí cuando comencé a hacer pruebas funcionales (allá en los lejanos tiempos de la universidad) fue la necesidad de crear juegos de datos con el mayor nivel de realidad posible. En ese entonces era práctica común entre compañeros de equipo guardar un archivo CSV con nuestra información personal (nombre, número de identidad, etc) e incluso hubo alguna que otra base de datos llena de información ficticia creada por los más minuciosos.</description>
			<content type="html"><![CDATA[<h1 id="pruebas-funcionales-con-factory_boy">Pruebas funcionales con factory_boy.</h1>
<p>Una de las primeras cosas que aprendí cuando comencé a hacer pruebas funcionales
(allá en los lejanos tiempos de la <a href="http://www.uci.cu">universidad</a>) fue la
necesidad de crear juegos de datos con el mayor nivel de realidad posible. En
ese entonces era práctica común entre compañeros de equipo guardar un archivo
<strong>CSV</strong> con nuestra información personal (nombre, número de identidad, etc) e
incluso hubo alguna que otra base de datos llena de información ficticia creada
por los más minuciosos.</p>
<p>No era una solución perfecta, estábamos solo a un paso por encima de utilizar
nombres como <strong>&ldquo;Persona 1&rdquo;</strong> con número telefónico <strong>11-111-111</strong> y cosas
parecidas. Por desgracia en aquel momento (en el lejano 2004) no teníamos acceso
a herramientas que nos facilitaran el proceso. Por eso hoy les voy a hablar de
<strong>factory_boy</strong>.</p>
<h2 id="python-factory_boy-y-faker">Python, factory_boy y faker.</h2>
<p><a href="https://github.com/FactoryBoy/factory_boy">Factory boy</a> es una biblioteca
inspirada en <a href="https://github.com/thoughtbot/factory_girl">Factory Girl</a> (punto
para <strong>Ruby</strong>) que nos permite crear juegos de datos (o <em>fixtures</em> que hay que
hablar idiomas) de manera sencilla. Desde hace unas cuantas versiones se integra
con otra biblioteca llamada <a href="https://github.com/joke2k/faker">faker</a> que provee
datos aleatorios (de nuevo, basada en algo del mundo <strong>Ruby</strong>). Veamos un
ejemplo:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    Modelo persona de toda la vida
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">firstname</span> <span class="o">=</span> <span class="n">firstname</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">lastname</span> <span class="o">=</span> <span class="n">lastname</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">fullname</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">firstname</span> <span class="o">+</span> <span class="s2">&#34; &#34;</span> <span class="bp">self</span><span class="o">.</span><span class="n">lastname</span>

<span class="k">class</span> <span class="nc">PersonFactory</span><span class="p">(</span><span class="n">factory</span><span class="o">.</span><span class="n">Factory</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    ¡¡¡La fábrica de personas!!!
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Person</span>
    <span class="n">firstname</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">Faker</span><span class="p">(</span><span class="s1">&#39;first_name&#39;</span><span class="p">)</span>
    <span class="n">lastname</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">Faker</span><span class="p">(</span><span class="s1">&#39;last_name&#39;</span><span class="p">)</span>
</code></pre></div><p>Pues tenemos una clase <strong>Person</strong> y una clase <strong>PersonFactory</strong>
(¿<strong>PeopleFactory</strong>?), vamos a utilizarlas para crear 9 nombres.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">fullname</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">factory</span><span class="o">.</span><span class="n">build_batch</span><span class="p">(</span><span class="n">PersonFactory</span><span class="p">,</span><span class="mi">9</span><span class="p">)]</span>
<span class="p">[</span><span class="s1">&#39;Keith Best&#39;</span><span class="p">,</span> <span class="s1">&#39;Michelle Wilson&#39;</span><span class="p">,</span> <span class="s1">&#39;David Stewart&#39;</span><span class="p">,</span>
<span class="s1">&#39;Robert Garza&#39;</span><span class="p">,</span> <span class="s1">&#39;Sharon Brandt&#39;</span><span class="p">,</span> <span class="s1">&#39;Erica Joseph&#39;</span><span class="p">,</span>
<span class="s1">&#39;Katelyn Washington&#39;</span><span class="p">,</span> <span class="s1">&#39;Stacy Byrd&#39;</span><span class="p">,</span> <span class="s1">&#39;Jeanne Harrison&#39;</span><span class="p">]</span>
</code></pre></div><p>Vale, funciona. Vamos a extender la idea y hacer un catálogo de frases famosas que incluya
el nombre del autor</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Quote</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">author</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">author</span> <span class="o">=</span> <span class="n">author</span>

<span class="k">class</span> <span class="nc">QuoteFactory</span><span class="p">(</span><span class="n">factory</span><span class="o">.</span><span class="n">Factory</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Quote</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">Faker</span><span class="p">(</span><span class="s2">&#34;sentence&#34;</span><span class="p">)</span>
    <span class="n">author</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">SubFactory</span><span class="p">(</span><span class="n">Person</span><span class="p">)</span>
</code></pre></div><p>Y de nuevo hacemos una prueba de concepto: tres citas famosas con sus autores.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="p">[(</span><span class="n">x</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">author</span><span class="o">.</span><span class="n">fullname</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">factory</span><span class="o">.</span><span class="n">build_batch</span><span class="p">(</span><span class="n">QuoteFactory</span><span class="p">,</span><span class="mi">3</span><span class="p">)]</span>
<span class="p">[(</span><span class="s1">&#39;Voluptas fugit culpa libero.&#39;</span><span class="p">,</span> <span class="s1">&#39;Terri Clements&#39;</span><span class="p">),</span>
<span class="p">(</span><span class="s1">&#39;Molestiae perspiciatis eius odit.&#39;</span><span class="p">,</span> <span class="s1">&#39;Betty Clark&#39;</span><span class="p">),</span>
<span class="p">(</span><span class="s1">&#39;Exercitationem voluptates corrupti nihil.&#39;</span><span class="p">,</span> <span class="s1">&#39;Eric Hernandez&#39;</span><span class="p">)]</span>
</code></pre></div><h2 id="soporte-para-orms">Soporte para ORMs.</h2>
<p>Si las <em>factories</em> te recuerdan a algo, con su clase <strong>Meta</strong> incluida y sus
descriptores para los campos, no es casualidad. Esta biblioteca fue pensada
originalmente para ser utilizada con <strong>Django</strong>. Con el tiempo los
desarrolladores decidieron extender el soporte a otros de los <strong>ORM</strong> más
populares y separar las funcionalidades en clases específicas.</p>
<ul>
<li><strong>factory.django.DjangoModelFactory</strong> para <a href="http://www.djangoproject.com">Django</a></li>
<li><strong>factory.mongo.MongoFactory</strong> para <a href="https://github.com/joshmarshall/mogo">Mongo</a></li>
<li><strong>factory.mongoengine.MongoEngineFactory</strong> para <a href="http://mongoengine.org">MongoEngine</a></li>
<li><strong>factory.alchemy.SQLAlchemyFactory</strong> para <a href="http://sqlalchemy.org">SQLAlchemy</a></li>
</ul>
<p>Cada clase incluye además facilidades para interactuar con el <strong>ORM</strong>. Vean una
versión de <strong>Person</strong> llevada a <strong>SQLAlchemy</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">Column</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">Unicode</span><span class="p">,</span> <span class="n">create_engine</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.ext.declarative</span> <span class="kn">import</span> <span class="n">declarative_base</span>
<span class="kn">from</span> <span class="nn">sqlalchmey.orm</span> <span class="kn">import</span> <span class="n">scoped_seesion</span><span class="p">,</span> <span class="n">sessionmaker</span>
<span class="kn">import</span> <span class="nn">factory</span>
<span class="kn">from</span> <span class="nn">factory.alchemy</span> <span class="kn">import</span> <span class="n">SQLAlchemyFactory</span> <span class="k">as</span> <span class="n">Factory</span>

<span class="n">engine</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span><span class="s2">&#34;sqlite://&#34;</span><span class="p">)</span>
<span class="n">session</span> <span class="o">=</span> <span class="n">scoped_session</span><span class="p">(</span><span class="n">sessionmaker</span><span class="p">(</span><span class="n">bind</span><span class="o">=</span><span class="n">engine</span><span class="p">))</span>
<span class="n">Base</span> <span class="o">=</span> <span class="n">declarative_base</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="c1"># Para el ejemplo</span>
    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">(),</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
    <span class="n">firstname</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Unicode</span><span class="p">(</span><span class="mi">30</span><span class="p">))</span>
    <span class="n">lastname</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Unicode</span><span class="p">(</span><span class="mi">30</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">PersonFactory</span><span class="p">(</span><span class="n">Factory</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Person</span>
        <span class="c1"># El objeto session que vamos a utilizar</span>
        <span class="n">sqlalchemy_session</span> <span class="o">=</span> <span class="n">session</span>
    <span class="nb">id</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">Sequence</span><span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="n">n</span><span class="p">)</span>
    <span class="n">firstname</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">Faker</span><span class="p">(</span><span class="s1">&#39;first_name&#39;</span><span class="p">)</span>
    <span class="n">lastname</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="n">Faker</span><span class="p">(</span><span class="s1">&#39;last_name&#39;</span><span class="p">)</span>
</code></pre></div><h2 id="puntos-finales">Puntos finales.</h2>
<p>Un solo artículo no alcanza para describir todas las funcionalidades de esta
biblioteca. Si les ha picado la curiosidad les recomiendo que vean la
<a href="https://factoryboy.readthedocs.io">documentación oficial</a> y exploren los casos
de uso comunes expuestos por el equipo de desarrollo.</p>
<p>Características que no exploré en este artículo:</p>
<ul>
<li>Atributos definidos por secuencias numéricas.</li>
<li>Atributos <em>lazy</em>.</li>
<li>Atributos específicos para <strong>ORMs</strong> (ej. campos <strong>FileField</strong> de <strong>Django</strong>)</li>
<li>Logs (muy útiles para el <em>debugging</em>).</li>
<li>Estrategias de creación de modelos.</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Microframeworks en Java</title>
			<link>https://yorodm.is-a.dev/blog/microframeworks-en-java/</link>
			<pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/microframeworks-en-java/</guid>
			<description>Microframeworks que deberías revisar. ¡Hola! Después de unas semanas de inactivdad continúo con el tema de los frameworks para microservicios, ahora con Java que es otro de mis lengajes favoritos. Ya que todo el mundo conoce a los jugadores fuertes como Dropwizard, Spring y Swarm voy a hablar de los llamados &amp;ldquo;microframeworks&amp;rdquo;.
Ratpack En primer lugar tenemos Ratpack, que nos brinda basicamente un servidor Web basado en Netty y un DSL para manejar rutas (muy a lo Rack+ Sinatra) y una fuerte integración con Groovy .</description>
			<content type="html"><![CDATA[<h1 id="microframeworks-que-deberías-revisar">Microframeworks que deberías revisar.</h1>
<p>¡Hola! Después de unas semanas de inactivdad continúo con el tema de los
frameworks para microservicios, ahora con <strong>Java</strong> que es otro de mis lengajes
favoritos. Ya que todo el mundo conoce a los jugadores fuertes como
<a href="http://www.dropwizard.io">Dropwizard</a>,
<a href="https://projects.spring.io/spring-boot/">Spring</a> y <a href="wildfly-swarm.io/">Swarm</a>
voy a hablar de los llamados &ldquo;microframeworks&rdquo;.</p>
<h2 id="ratpackhttpwwwratpackio-"><a href="http://www.ratpack.io">Ratpack</a></h2>
<p>En primer lugar tenemos <a href="http://www.ratpack.io">Ratpack</a>, que nos brinda
basicamente un servidor Web basado en <strong>Netty</strong> y un <em>DSL</em> para manejar rutas
(muy a lo <a href="http://rack.github.io">Rack</a>+ <a href="http://sinatrarb.com/">Sinatra</a>) y
una fuerte integración con <a href="http://groovy-lang.org/">Groovy</a> . Como un plus
podemos utilizar <a href="https://github.com/pledbrook/lazybones">Lazybones</a> para
generar esqueletos de aplicaciones.</p>
<p>Aparte del <em>core</em> del framework, existen componentes para:</p>
<ul>
<li>Utilizar <strong>Guice</strong> como contenedor de inyección de dependencias.</li>
<li>Métricas de uso.</li>
<li><strong>Thymleaf</strong> y <strong>Handlebars</strong> como motores de plantillas.</li>
<li><a href="http://www.consul.io">Consul</a></li>
<li><strong>Spring Boot</strong></li>
<li>Pruebas unitarias utilizando <a href="http://spockframework.org/">Spock</a></li>
</ul>
<h2 id="bootiquehttpbootiqueio-"><a href="http://bootique.io">Bootique</a></h2>
<p><strong>Bootique</strong> nos invita a crear aplicaciones modulares utilizando <strong>Guice</strong>. A
diferencia de <strong>Ratpack</strong>, su estilo de programación es mas de utilizar
anotaciones aunque también hace uso de interfaces fluidas y clausuras. El uso de
<strong>Guice</strong> le da también un sabor particular a la forma en que creamos
aplicaciones o extendemos el framework. En fin, esta es la lista de
características fuertes de <strong>Bootique</strong></p>
<ul>
<li>Soporte para migraciones con <a href="http://flyway.orge">Flyway</a> o
<a href="http://www.liquibase.org/">LiquidBase</a>.</li>
<li>Integración con otros frameworks vía <strong>Guice</strong></li>
<li>Métricas.</li>
<li><strong>Swagger</strong></li>
<li>Componentes para <strong>Rabbitmq</strong></li>
<li>Posibilidad de desarrollar utilizando <a href="http://kotlinlang.org/">Kotlin</a></li>
</ul>
<h2 id="rapidoidhttpwwwrapidoidorg-"><a href="http://www.rapidoid.org/">Rapidoid</a></h2>
<p>Como su nombre lo indica, <strong>Rapidoid</strong> se centra en la velocidad. Podemos crear
no solo microservicios sino aplicaciones completas en muy poco tiempo. De los
frameworks presentados acá es el único que incluye un componente para <strong>UI</strong> y
su propio motor de plantillas a lo <strong>Mustache</strong>. Cosas que me impresionaron:</p>
<ul>
<li>Interfaz de automática administración para las entidades a lo <strong>Django</strong> o
<strong>JHipster</strong>.</li>
<li>Motor de plantillas integrado.</li>
<li>Soporte para <strong>Guice</strong></li>
<li>Rapidez + Funcionalidad</li>
</ul>
<p>Como es el que más me gusta voy a poner un ejemplo de como crear una <strong>Web API</strong>
simple que nos permita adicionar, consultar y eliminar solicitudes de servicio
(lo que toda la vida hemos llamado tickets)</p>
<h3 id="paso-1-configurar-maven">Paso 1. Configurar Maven.</h3>
<p>Como soy usuario de <strong>Maven</strong> y <strong>Eclipse</strong> me voy a crear un nuevo proyecto y
adicionar la siguiente dependencia</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.rapidoid<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>rapidoid-quick<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.4.6<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div><h3 id="paso-2-crear-mis-entidades">Paso 2. Crear mis entidades.</h3>
<p><strong>Rapidoid Quick</strong> incluye <strong>Hibernate</strong>, <strong>JPA</strong> preconfigurados, así que no
necesitamos mucho para crear entidades</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.github.yorodm.rapidoid_example.models</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.GeneratedValue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.validation.constraints.NotNull</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Ticket</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">public</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@NotNull</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>

    <span class="nd">@NotNull</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="n">description</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><h3 id="paso-3-creando-mi-aplicación-y-rutas">Paso 3. Creando mi aplicación y rutas</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">App</span><span class="o">.</span><span class="na">bootstrap</span><span class="o">(</span><span class="n">args</span><span class="o">).</span><span class="na">auth</span><span class="o">()</span>
        <span class="o">.</span><span class="na">jpa</span><span class="o">()</span>
        <span class="o">.</span><span class="na">adminCenter</span><span class="o">();</span>

        <span class="n">On</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;/tickets&#34;</span><span class="o">).</span><span class="na">json</span><span class="o">(()</span>
            <span class="o">-&gt;</span> <span class="n">JPA</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">Ticket</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">all</span><span class="o">());</span>

        <span class="n">On</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">&#34;/tickets&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">json</span><span class="o">((</span><span class="nd">@Valid</span> <span class="n">Ticket</span> <span class="n">t</span><span class="o">)</span>
                <span class="o">-&gt;</span> <span class="n">JPA</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">t</span><span class="o">));</span>
        <span class="n">On</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;/tickets/{id}&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">json</span><span class="o">((</span><span class="n">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@Valid</span> <span class="n">Ticket</span> <span class="n">t</span><span class="o">)</span>
                <span class="o">-&gt;</span> <span class="n">JPA</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">t</span><span class="o">));</span>

        <span class="n">On</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">&#34;/tickets/{id}&#34;</span><span class="o">)</span>
            <span class="o">.</span><span class="na">json</span><span class="o">((</span><span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="n">JPA</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">Ticket</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">});</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div><h3 id="paso-4-configurando">Paso 4. Configurando.</h3>
<p>Para la configuracion utilizamos <strong>YAML</strong> en <code>src/resources/config.yml</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">users</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">root</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">roles</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">administrator</span><span class="w">
</span><span class="w">      </span>- <span class="l">owner</span><span class="w">
</span><span class="w">    </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></code></pre></div><h3 id="paso-5-creando-un-jar-para-despliegue">Paso 5. Creando un jar para despliegue.</h3>
<p>Vamos a configurar el plugin <code>shade</code> de <strong>Maven</strong> para crear un <em>uberjar</em> y
hacernos la vida más fácil.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml">
<span class="nt">&lt;build&gt;</span>
  <span class="nt">&lt;plugins&gt;</span>
    <span class="nt">&lt;plugin&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>maven-shade-plugin<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>3.1.0<span class="nt">&lt;/version&gt;</span>
      <span class="nt">&lt;configuration&gt;</span>
        <span class="nt">&lt;transformers&gt;</span>
          <span class="nt">&lt;transformer</span>
              <span class="na">implementation=</span>
              <span class="s">&#34;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;mainClass&gt;</span>
                com.github.yorodm.rapidoid_example.Main
            <span class="nt">&lt;/mainClass&gt;</span>
          <span class="nt">&lt;/transformer&gt;</span>
        <span class="nt">&lt;/transformers&gt;</span>
      <span class="nt">&lt;/configuration&gt;</span>
      <span class="nt">&lt;executions&gt;</span>
        <span class="nt">&lt;execution&gt;</span>
          <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
          <span class="nt">&lt;goals&gt;</span>
            <span class="nt">&lt;goal&gt;</span>shade<span class="nt">&lt;/goal&gt;</span>
          <span class="nt">&lt;/goals&gt;</span>
        <span class="nt">&lt;/execution&gt;</span>
      <span class="nt">&lt;/executions&gt;</span>
    <span class="nt">&lt;/plugin&gt;</span>
  <span class="nt">&lt;/plugins&gt;</span>
<span class="nt">&lt;/build&gt;</span>
</code></pre></div><h3 id="paso-6-ejecutando-la-aplicación">Paso 6. Ejecutando la aplicación</h3>
<p>Empaquetamos y ejecutamos:</p>
<pre><code class="language-console" data-lang="console">$ mvn package
$ cd target
$ java -jar rapidoid-example-0.0.1-SNAPSHOT.jar profiles=dev,default
</code></pre><p>Después de unos cuantos logs tenemos el servicio disponible en <a href="http://localhost:8080/tickets">nuestro
host</a> junto con el <a href="http://localhost:8080/_">dashboard de administración</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Desarrollando microservicios con Nameko</title>
			<link>https://yorodm.is-a.dev/blog/nameko-microservicios-python/</link>
			<pubDate>Thu, 09 Nov 2017 11:13:09 -0500</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/nameko-microservicios-python/</guid>
			<description>Desarrollando microservicios con Nameko Nameko es una biblioteca para el desarrollo de microservicios en Python. A diferencia de otros frameworks como Django, Flask y Hug que tienen como principal objetivo utilizar HTTP para la comunicación con los clientes, Nameko viene con soporte integrado para AMQP y Websockets y nos permite adicionar nuestros propios protocolos.
Manos a la obra. Para hacer servicios con Nameko necesitamos algunas cosas:
 Python 2 (creo que no hay versiones para Python 3).</description>
			<content type="html"><![CDATA[<h1 id="desarrollando-microservicios-con-nameko">Desarrollando microservicios con Nameko</h1>
<p><a href="http://github.com/nameko/nameko">Nameko</a> es una biblioteca para el desarrollo
de microservicios en <strong>Python</strong>. A diferencia de otros <strong>frameworks</strong> como
<a href="https://www.djangoproject.com">Django</a>, <a href="http://flask.pocoo.org">Flask</a> y
<a href="http://www.hug.rest">Hug</a> que tienen como principal objetivo utilizar <strong>HTTP</strong>
para la comunicación con los clientes, <strong>Nameko</strong> viene con soporte integrado
para <strong>AMQP</strong> y <strong>Websockets</strong> y nos permite adicionar nuestros propios
protocolos.</p>
<h2 id="manos-a-la-obra">Manos a la obra.</h2>
<p>Para hacer servicios con <strong>Nameko</strong> necesitamos algunas cosas:</p>
<ol>
<li><strong>Python 2</strong> (creo que no hay versiones para <strong>Python 3</strong>).</li>
<li>Un entorno virtual (<code>virtualenv</code>).</li>
<li>La biblioteca (vía <code>pip</code> para garantizar las dependencias).</li>
<li><strong>RabbitMQ</strong> u otro servidor de mensajería que soporte <strong>AMQP</strong>.</li>
<li><strong>Emacs</strong> (o tu editor favorito).</li>
</ol>
<p>Creemos dos servicios:</p>
<ol>
<li>Servicio que hace una operación intensiva (sumar dos números) al que llamamos
<code>Calculate</code></li>
<li>Servicio que nos notifica cuando <code>Calculate</code> termina, al que llamamos <code>Notify</code>.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">nameko.rpc</span> <span class="kn">import</span> <span class="n">rpc</span><span class="p">,</span> <span class="n">RpcProxy</span>
<span class="kn">import</span> <span class="nn">logging</span>

<span class="k">class</span> <span class="nc">Compute</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span><span class="s2">&#34;compute&#34;</span>
    <span class="n">notify</span> <span class="o">=</span> <span class="n">RpcProxy</span><span class="p">(</span><span class="s2">&#34;notify&#34;</span><span class="p">)</span>

    <span class="nd">@rpc</span>
    <span class="k">def</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value1</span><span class="p">,</span> <span class="n">value2</span><span class="p">):</span>
        <span class="n">a</span> <span class="o">=</span> <span class="n">value1</span> <span class="o">+</span> <span class="n">value2</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">notify</span><span class="o">.</span><span class="n">send</span><span class="o">.</span><span class="n">call_async</span><span class="p">(</span><span class="s2">&#34;Operation completed </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">a</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">a</span>


<span class="k">class</span> <span class="nc">Notify</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span><span class="s2">&#34;notify&#34;</span>
    <span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>

    <span class="nd">@rpc</span>
    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">message</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</code></pre></div><p>Salvemos el archivo como <code>services.py</code> y ya estamos listos para ejecutar los servicios</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ nameko run --broker pyamqp://guest:guest@localhost services
</code></pre></div><p>Si accedemos a la consola web de <strong>RabbitMQ</strong> podemos ver las colas de mensaje
creadas para los servicios. Eso confirma que se están funcionando correctamente.</p>
<figure><img src="/images/nameko-microservicios/rabbit-queues.png"/>
</figure>

<h2 id="accediendo-a-los-servicios">Accediendo a los servicios.</h2>
<p>Antes de desplegar nuestros servicios en producción, probemos que funcionan
correctamente. Desafortunadamente fuimos demasiado rápido y no creamos pruebas
unitarias (muy mal de nuestra parte) así que necesitamos alguna forma de
verificar que las interfaces hagan lo planeado (este concepto de suma es
aparentemente muy complicado).</p>
<p>Por suerte <strong>Nameko</strong> nos proporciona un <strong>REPL</strong> mediante el comando <code>shell</code>
que nos permite interactuar con los servicios desde código <strong>Python</strong>.</p>
<pre><code class="language-terminal" data-lang="terminal">nameko shell --broker  pyamqp://guest:guest@192.168.184.142
Nameko Python 2.7.13 [MSC v.1500 64 bit (AMD64)] shell
Broker: pyamqp://guest:guest@192.168.184.142
&gt;&gt;&gt; n.rpc.compute.method(99999,99999)
199998
    &gt;&gt;&gt; reply=n.rpc.compute.method.call_async(99999,99999)
&gt;&gt;&gt; reply.result()
199998
&gt;&gt;&gt;
</code></pre><p>Perfecto, funcionan tanto las llamadas síncronas como las asíncronas, con esto en mano
podemos utilizar los servicios desde, por ejemplo, un modelo en <strong>Odoo</strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">nameko.standalone.rpc</span> <span class="kn">import</span> <span class="n">ClusterRpcProxy</span>
<span class="n">BROKER</span> <span class="o">=</span><span class="s1">&#39;pyamqp://guest:guest@192.168.184.142&#39;</span>

<span class="c1"># Todas las cosas del modelo....</span>
    <span class="nd">@api</span><span class="o">.</span><span class="n">multi</span>
    <span class="k">def</span> <span class="nf">action_suma</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">val1</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">campo_1</span>
        <span class="n">val2</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">campo_2</span>
        <span class="k">with</span> <span class="n">ClusterRpcProxy</span><span class="p">(</span><span class="n">BROKER</span><span class="p">)</span> <span class="k">as</span> <span class="n">rpc</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">val3</span> <span class="o">=</span> <span class="n">rpc</span><span class="o">.</span><span class="n">compute</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="n">val1</span><span class="p">,</span><span class="n">val2</span><span class="p">)</span>
</code></pre></div><p>Gracias a que <strong>RabbitMQ</strong> actúa como <em>broker</em> y registro de los servicios,
podemos desplegar tantos como queramos, el consumidor no necesita saber donde
están localizados, ni cuantos son, como un plus, los servicios se pueden añadir
dinámicamente a al <em>cluster</em></p>
<h2 id="adicionando-un-hearbeat">Adicionando un hearbeat.</h2>
<p>Nuestros servicios funcionan, es hora de desplegarlos en producción, pero el
sysadmin se queja de que no tiene forma de monitorear el estado de los mismos.
Aunque estamos absolutamente seguros de que nuestros servicios tienen un 100% de
disponibilidad, para complacerlos adicionamos un <strong>hearbeat</strong> que se ejecute
cada un tiempo configurable en cada una de las instancias.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">nameko.timer</span> <span class="kn">import</span> <span class="n">timer</span>
<span class="c1"># Método ficticio que envía un mensaje a la plataforma</span>
<span class="c1"># de monitoreo.</span>
<span class="kn">from</span> <span class="nn">monitoring</span> <span class="kn">import</span> <span class="n">ping</span>

<span class="k">class</span> <span class="nc">Heartbear</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&#34;heartbeat&#34;</span>

    <span class="nd">@timer</span>
    <span class="k">def</span> <span class="nf">beat</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">ping</span><span class="p">()</span>
</code></pre></div><h2 id="más-de-nameko">Más de Nameko.</h2>
<p>Además de <strong>RPC</strong> vía <strong>AMQP</strong>, <strong>Nameko</strong> proporciona facilidades para crear
<strong>Web APIs</strong>, notificación de eventos entre servicios, integración con
<strong>Django</strong>, <strong>Flask</strong>, <strong>SQLAlchemy</strong> y permite crear nuestros propios puntos de
entrada para servicio (ya hemos visto <code>@rpc y @timer</code>). En lo particular lo
considero una alternativa interesante y rápida que necesita pocas dependencias
tanto para desarrollo como para despliegue. Si estás interesado puedes consultar
la <a href="http://nameko.readthedocs.io/en/stable/">documentación oficial</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Parser SAX en Golang</title>
			<link>https://yorodm.is-a.dev/blog/golang-xml-sax/</link>
			<pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/golang-xml-sax/</guid>
			<description>Parser tipo SAX para Golang El problema Tratando de migrar unas cosas del trabajo a Go me tropecé con la necesidad de procesar unos archivos XML (cada día doy más gracias por TOML y JSON) de tamaño considerable.
Una mirada por encima a encoding/xml me dejo bien claro que no existía un parser tipo xml.dom.minidom (el de la biblioteca estándar de Python) o algo como Expat. Las principales funciones (ej. las que salen en los ejemplos) están orientadas más hacia la serialización y deserialización de XML que a andar recorriendo documentos.</description>
			<content type="html"><![CDATA[<h1 id="parser-tipo-sax-para-golang">Parser tipo SAX para Golang</h1>
<h2 id="el-problema">El problema</h2>
<p>Tratando de migrar unas cosas del trabajo a <strong>Go</strong> me tropecé con la necesidad de
procesar unos archivos <strong>XML</strong> (cada día doy más gracias por <strong>TOML</strong> y <strong>JSON</strong>) de
tamaño considerable.</p>
<p>Una mirada por encima a <code>encoding/xml</code> me dejo bien claro que no existía un
parser tipo <code>xml.dom.minidom</code> (el de la biblioteca estándar de <strong>Python</strong>) o algo
como <strong>Expat</strong>. Las principales funciones (ej. las que salen en los ejemplos)
están orientadas más hacia la serialización y deserialización de <strong>XML</strong> que a
andar recorriendo documentos.</p>
<p>Sin otro remedio a mano acudí al <a href="http://google.com">Gran Oráculo</a> para
investigar mis posibilidades y lo más cercano que encontré fue una biblioteca
llamada <a href="https://github.com/kokardy/saxlike">saxlike</a> que no luce nada mal pero
no era exactamente lo que buscaba (hay que implementar toda una interfaz).</p>
<h2 id="la-solución">La solución.</h2>
<p>El método <code>Token</code> de <code>*xml.Decoder</code> opera leyendo de un <code>*io.Reader</code> y retornando
el próximo token <strong>XML</strong> que encuentra. La función retorna <code>(Token, error)</code> donde
<strong>Token</strong> es uno de los siguientes tipos:</p>
<ol>
<li><code>xml.StartElement</code> (comienzo de un elemento)</li>
<li><code>xml.EndElement</code> (final de un elemento, funciona incluso para etiquetas  como
<code>&lt;esta/&gt;</code>)</li>
<li><code>xml.Directive</code> (directivas especiales)</li>
<li><code>xml.Comment</code> (comentarios)</li>
<li><code>xml.Chardata</code> (contenido de los elementos)</li>
<li><code>xml.ProcInst</code> (instrucciones de procesamiento)</li>
</ol>
<p>Esto es bastante parecido a <strong>SAX</strong> es decir, podríamos hacer una interfaz
<strong>Handler</strong> con un método por cada tipo y una función (o método de otra clase) que
recibiera algo que implementara a handler y llamara a cada uno de los métodos.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="c1">// En este caso hipotético Parser tiene embebido un xml.Decoder
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">self</span> <span class="o">*</span><span class="nx">Parser</span><span class="p">)</span> <span class="nf">Parse</span><span class="p">(</span><span class="nx">document</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Reader</span><span class="p">,</span> <span class="nx">handler</span> <span class="nx">Handler</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">{</span>
        <span class="nx">token</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">self</span><span class="p">.</span><span class="nf">Token</span><span class="p">()</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
         <span class="k">return</span> <span class="kc">nil</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">err</span>
        <span class="p">}</span>
        <span class="k">switch</span> <span class="nx">token</span><span class="p">.(</span><span class="kd">type</span><span class="p">){</span>
        <span class="k">case</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">StartElement</span><span class="p">:</span>
            <span class="nx">handler</span><span class="p">.</span><span class="nf">StartElement</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span>
        <span class="c1">// mas de lo mismo
</span><span class="c1"></span>        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></div><p>Para utilizar este método necesitamos implementar la interfaz <strong>SAX</strong> con 6
métodos para los elemento y otro más para manejo de errores o verificar el valor
de retorno de <code>Parse</code>.</p>
<p>Peeeero, la idea de implementar 7 métodos y utilizar callbacks para manejar
eventos&hellip;.. ya para eso tengo <strong>Java</strong>. Mucho menos cuando voy a tener que
escribir métodos vacíos para <code>xml.Comment</code> y <code>xml.Directive</code> porque no me
interesa procesarlos pero son necesarios para la interfaz.</p>
<p>Por razones como esta, los eventos en <strong>Go</strong> se manejan mejor utilizando
canales:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">ParserError</span> <span class="kd">struct</span><span class="p">{}</span>

<span class="kd">func</span> <span class="nf">parse</span><span class="p">(</span><span class="nx">document</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Reader</span><span class="p">,</span> <span class="nx">elm</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">Token</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">elm</span><span class="p">)</span>
    <span class="nx">decoder</span> <span class="o">:=</span> <span class="nx">xml</span><span class="p">.</span><span class="nf">NewDecoder</span><span class="p">(</span><span class="nx">document</span><span class="p">)</span>
    <span class="k">for</span> <span class="p">{</span>
        <span class="c1">// DefaultDecoder es un *xml.Decoder
</span><span class="c1"></span>        <span class="nx">token</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">decoder</span><span class="p">.</span><span class="nf">Token</span><span class="p">()</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
            <span class="k">return</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">elm</span> <span class="o">&lt;-</span> <span class="nx">ParserError</span><span class="p">{}</span>
            <span class="k">return</span>
        <span class="p">}</span>
        <span class="nx">elm</span> <span class="o">&lt;-</span> <span class="nx">token</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>Esta versión no solo es mucho más corta sino que además utilizamos una
<em>gorutina</em> para procesar el <strong>XML</strong> y un canal para la comunicación entre el
productor y el consumidor de los eventos. El consumidor puede elegir que eventos
le resultan interesantes y descartar el resto</p>
<p>Veamos un ejemplo:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">fd</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;settings.xml&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">Token</span><span class="p">)</span>
    <span class="k">go</span> <span class="nf">parse</span><span class="p">(</span><span class="nx">fd</span><span class="p">,</span> <span class="nx">ch</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">element</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">ch</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="nx">element</span> <span class="o">:=</span> <span class="nx">element</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">StartElement</span><span class="p">:</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
        <span class="k">case</span> <span class="nx">xml</span><span class="p">.</span><span class="nx">EndElement</span><span class="p">:</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;&lt;/&#34;</span> <span class="o">+</span> <span class="nx">element</span><span class="p">.</span><span class="nx">Name</span><span class="p">.</span><span class="nx">Local</span><span class="p">)</span>
        <span class="k">case</span> <span class="nx">ParserError</span><span class="p">:</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Errroooooooooor&#34;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Desarrollando con Emacs y Go</title>
			<link>https://yorodm.is-a.dev/blog/desarrollo-emacs-go/</link>
			<pubDate>Thu, 26 Oct 2017 15:04:13 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/desarrollo-emacs-go/</guid>
			<description>Desarrollando con Emacs y Go. Tengo la muy sana costumbre de utilizar Emacs para todo lo que pueda (incluso revisar el correo) así que cuando me decidí a iniciar algunos proyectos en Go me alegró mucho que no existiera un IDE &amp;ldquo;oficial&amp;rdquo; para el lenguaje y si muchas herramientas, utilidades y plugins para que cada cual se arme la casa a su manera.
Haciendo un IDE en tres pasos. Convertir Emacs en un entorno de desarrollo para Go es una tarea bastante sencilla.</description>
			<content type="html"><![CDATA[<h1 id="desarrollando-con-emacs-y-go">Desarrollando con Emacs y Go.</h1>
<p>Tengo la muy sana costumbre de utilizar Emacs para todo lo que pueda (incluso
revisar el correo) así que cuando me decidí a iniciar algunos proyectos en
<a href="https://golang.org">Go</a> me alegró mucho que no existiera un IDE &ldquo;oficial&rdquo; para
el lenguaje y si muchas herramientas, utilidades y plugins para que cada cual se
arme la casa a su manera.</p>
<h2 id="haciendo-un-ide-en-tres-pasos">Haciendo un IDE en tres pasos.</h2>
<p>Convertir <strong>Emacs</strong> en un entorno de desarrollo para <strong>Go</strong> es una tarea bastante
sencilla. Vamos a separarla en tres pasos.</p>
<h3 id="instalar-las-herramientas-necesarias">Instalar las herramientas necesarias.</h3>
<p>Despúes de tener <strong>Go</strong> y <strong>Git</strong> instalado, necesitamos un conjunto de herramientas
(oficiales y de terceros) que nos hacen la vida mucho más sencilla.</p>
<ol>
<li><a href="http://github.com/kisielk/errcheck">errcheck</a>: verificar errores de compilación.</li>
<li><a href="http://golang.com/x/tools/cmd/guru">Guru</a>: obtener información acerca del código.</li>
<li><a href="http://github.com/nsf/gocode">Gocode</a>: completamiento</li>
<li><a href="http://golang.org/x/tools/cmd/gorename">Gorename</a>: refactorizacíon a cierto
nivel.</li>
<li><a href="http://golang.org/x/tools/cmd/goimports">Goimports</a>: ayuda a adicionar o
eliminar paquetes importados (también formatea código).</li>
</ol>
<p>Estas herramientas por si solas no nos son de mucha utilidad, están diseñadas
para que cualquier editor de texto que soporte extensiones pueda integrarlas de
un modo sencillo.</p>
<h3 id="el-lado-de-emacs">El lado de Emacs</h3>
<p>En mi lista de paquetes (uso nada más que [Melpa estable]
(<a href="http://melpa.org/packages/">http://melpa.org/packages/</a> )) hay cerca de 15 paquetes que tienen que ver con
desarrollo en <strong>Go</strong>. En lo personal no necesito mucho para trabajar en un
lenguaje. Las funcionalidades que adiciono son:</p>
<ol>
<li>Lenguaje y completaminto con <strong>go-mode</strong> y <strong>company-go</strong>.</li>
<li>Verificacíon de errores con <strong>go-errcheck</strong>.</li>
<li>Ayuda interactiva con <strong>go-eldoc</strong>.</li>
<li>Refactorización con <strong>go-rename</strong>.</li>
<li>Inspección de código con <strong>go-guru</strong>.</li>
<li>Integración con <strong>projectile</strong> vía <strong>go-projectile</strong></li>
</ol>
<p>Todos los paquetes es recomendable instalarlos vía <strong>package-install</strong> con la excepción de <strong>company-go</strong> que está incluido en los fuentes de la herramienta <strong>gocode</strong> y lo cargo desde ahí para evitar conflictos de versiones.</p>
<h3 id="paso-final">Paso final.</h3>
<p>Con todos los ingredientes estamos a solo 2 minutos de programar en <strong>Go</strong> como
campiones, solo queda:</p>
<ol>
<li>Añadir <code>$GOPATH/bin</code> al <code>$PATH</code></li>
<li>Modificar el <strong>init.el</strong> para personalizar los paquetes de <strong>Emacs</strong>.</li>
</ol>
<p>Lo primero depende del sistema operativo donde estés, pero de todas formas es
una tarea trivial. Si eres relativamente nuevo en <strong>Emacs</strong> hay grandes
posibilidades de que no sepas como hacer lo segundo, no importa, aquí va mi
configuración (sin atajos de teclado, que ya eso es cosa muy personal).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="c1">;; Si estás utilizando correctamente tu gestor de paquetes</span>
<span class="c1">;; no tienes que adicionar las lineas de los  &#39;require&#39;</span>
<span class="c1">;; Adicionar el backend de Go a company</span>
<span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;company</span><span class="p">)</span>
<span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;company-backends</span> <span class="ss">&#39;company-go</span><span class="p">)</span>
<span class="c1">;; Activamos go-mode</span>
<span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;go-mode</span><span class="p">)</span>
<span class="c1">;; y toda la familia</span>
<span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;go-guru</span><span class="p">)</span>
<span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;go-errcheck</span><span class="p">)</span>
<span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;go-projectile</span><span class="p">)</span>
<span class="c1">;; Añadimos un hook para que cuando se active el modo</span>
<span class="c1">;; se configuren todas estas cosas</span>
<span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;go-mode-hook</span>
    <span class="p">(</span><span class="nb">lambda</span> <span class="p">()</span>
        <span class="p">(</span><span class="nv">company-mode</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">projectile-mode</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">go-eldoc-setup</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;before-save-hook</span> <span class="ss">&#39;gofmt-before-save</span><span class="p">)</span>
        <span class="p">(</span><span class="nb">setq</span> <span class="nv">gofmt-command</span> <span class="s">&#34;goimports&#34;</span><span class="p">)))</span>

</code></pre></div><p>Y&hellip;ya está. Hemos creado un <strong>IDE</strong> para trabajar en <strong>Go</strong> sin salir de la
comodidad de nuestro editor favorito.</p>
]]></content>
		</item>
		
		<item>
			<title>ZFS y el problema de la memoria</title>
			<link>https://yorodm.is-a.dev/blog/zfs-problema-memoria/</link>
			<pubDate>Tue, 24 Oct 2017 10:55:56 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/zfs-problema-memoria/</guid>
			<description>ZFS y el problema de la memoria ZFS lleva ya unos años en tierras de Linux y cada vez que tengo un chance lo recomiendo a alguno de mis amigos sysadmins junto con un grupito de notas que he tomado acerca de como trabajar con el filesystem, optimizar alguna que otra feature y algunos casos de estudio.
Después de notar que en la mayoría de los casos, los aconsejados regresaban al castigo de LVM me dediqué a investigar las causas del rechazo y como enmendarlas.</description>
			<content type="html"><![CDATA[<h1 id="zfs-y-el-problema-de-la-memoria">ZFS y el problema de la memoria</h1>
<p><strong>ZFS</strong> lleva ya unos años en tierras de <a href="http://www.open-zfs.org/">Linux</a> y cada
vez que tengo un chance lo recomiendo a alguno de mis amigos <em>sysadmins</em> junto
con un grupito de notas que he tomado acerca de como trabajar con el
<em>filesystem</em>, optimizar alguna que otra <em>feature</em> y algunos casos de estudio.</p>
<p>Después de notar que en la mayoría de los casos, los aconsejados regresaban al
castigo de <strong>LVM</strong> me dediqué a investigar las causas del rechazo y como
enmendarlas.</p>
<h1 id="pero-cuál-es-el-problema">Pero ¿cuál es el problema?</h1>
<p>Descartado el factor &ldquo;resistencia al cambio&rdquo; (los linuxeros solo temen a cambiar
de distribución) la mayoría de los problemas relacionados con <strong>ZFS</strong> (entre las
personas a las que le pregunté) están relacionados con uso y/o configuracíon
incorrecta (también conocido como: &ldquo;No leiste las notas&rdquo;). Los 4 más comúnes
fueron:</p>
<ol>
<li>Poner <strong>/boot</strong> o la <strong>swap</strong> en un volumen <strong>ZFS</strong>.</li>
<li>No entender la diferencia entre <strong>clone</strong> y <strong>snapshot</strong>.</li>
<li>El consumo de memoria.</li>
<li>Problemas con <strong>RAID</strong> (tanto el de hardware como <strong>RAIDZ</strong>).</li>
</ol>
<p>Comparando mis problemas locales con los globales (gracias a <a href="http://trends.google.com">Google
Trends</a> ) veo que los puntos 3 y 4 tienen buen
ranking y me dije: &ldquo;Esto va al blog&rdquo;.</p>
<h1 id="como-hacer-que-zfs-se-porte-bien">Como hacer que ZFS se porte bien.</h1>
<p>Lo primero que le recomiendo a todo el mundo es que se lea un buen tutorial. Si
vienes de el mundo <strong>ext4</strong> + <strong>LVM</strong>, la filosofía de <strong>ZFS</strong> te puede parecer
extraña y deberías tener una idea de las semejanzas y diferencias en el modo de
operar con cada uno. En dependencia del nivel de inglés de cada cual
<a href="http://www.open-zfs.org/wiki/Performance_tuning">aquí</a> hay una buena
referencia sobre todos los parámetros de optimización e incluso casos de
estudio.</p>
<p>El &ldquo;problema&rdquo; del uso de memoria no es nada más que el método de caché utilizado
en <strong>ZFS</strong>. La mayoría de los <em>filesystems</em> utilizan alguna variante de <strong>LRU</strong>, que
en este caso fue sustituido por el <em>Adaptive Replacement Cache</em> o <strong>ARC</strong>. El
<strong>ARC</strong> mejora mucho el rendimiento, pero consume <em>cantidades masivas</em> de <strong>RAM</strong>. A
pesar de esto raras veces es <strong>necesario</strong> configurar algo de aquí, aunque la
memoria se muestra como ocupada (por ejemplo al utilizar <strong>free</strong>) es un caché y
si existiera la necesidad sería liberada por el kernel. En caso de que no sepas
como está configurado tu <strong>ARC</strong> puedes simplemente:</p>
<pre><code>cat /sys/module/zfs/parameters/zfs_arc_max
</code></pre><p>Un valor de 0 indica que la mitad de la <strong>RAM</strong> disponible se utilizará para
caché. Para cambiar este valor puedes hacer lo siguiente:</p>
<pre><code># Configura la cantidad de memoria máxima disponible para ARC
echo &lt;numero en bytes&gt; &gt;&gt; /sys/module/zfs/parameters/zfs_arc_max
# fuerza al kernel a vaciar la información de caché
echo 3 &gt; /proc/sys/vm/drop_caches
</code></pre><p>Por último y no por ello menos importante, <strong>RAID</strong>. <strong>RAIDZ</strong> es una implementación
de <strong>RAID</strong> basada en software. Si estás utilizando <strong>ZFS</strong> es recomendable que
utilices <strong>RAIDZ</strong> en vez de una solución por hardware. Si tu servidor require que
tengas <strong>RAID</strong> por hardware crea X unidades <strong>RAID0</strong> y añádelas a un <strong>zpool</strong>
configurado con <strong>RAIDZ</strong>. Recuerda: <strong>nunca</strong> pongas <strong>RAIDZ</strong> sobre discos que
tienen <strong>RAID</strong> mayor que 0. Repito: <strong>NUNCA</strong>.</p>
<h1 id="para-ir-empezando-con-zfs">Para ir empezando con ZFS.</h1>
<p>Estos tres links me sirven cada vez que tengo que refrescar algo del tema.</p>
<ol>
<li><a href="http://jjmora.es/zfs_aprendiendo_zfs_en_12_pasos/">ZFS en 12 pasos</a></li>
<li><a href="http://www.open-zfs.org/wiki/Main_Page">Open-ZFS Wiki</a></li>
<li><a href="https://wiki.gentoo.org/wiki/ZFS">Wiki de Gentoo sobre ZFS</a></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Hugo y Emacs</title>
			<link>https://yorodm.is-a.dev/blog/hugo-y-emacs/</link>
			<pubDate>Thu, 19 Oct 2017 15:26:34 -0400</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/hugo-y-emacs/</guid>
			<description>Hugo, Emacs y el nuevo blog Como comentaba en el primer post, decidí comenzar desde cero, aprovechando las bondades de Github Pages y Hugo como generador de sitios estático. En lo que a generador de sitios estáticos se refiere Hugo es bastante sencillo de operar, por lo que inicialmente pensé en hacerme unos scripts para organizar el workflow de trabajo de la siguiente manera:
 Hacer nuevo post. Previsualizar. Subir a GitHub.</description>
			<content type="html"><![CDATA[<h1 id="hugo-emacs-y-el-nuevo-blog">Hugo, Emacs y el nuevo blog</h1>
<p>Como comentaba en el primer post, decidí comenzar desde cero, aprovechando las
bondades de <a href="https://pages.github.com/">Github Pages</a> y
<a href="http://gohugo.io">Hugo</a> como generador de sitios estático. En lo que a
generador de sitios estáticos se refiere <strong>Hugo</strong> es bastante sencillo de operar,
por lo que inicialmente pensé en hacerme unos scripts para organizar el
<em>workflow</em> de trabajo de la siguiente manera:</p>
<ol>
<li>Hacer nuevo post.</li>
<li>Previsualizar.</li>
<li>Subir a GitHub.</li>
</ol>
<p>Todo esto organizado, claro está, en una rama <em>develop</em> para trabajar y una
<em>master</em> tanto para el repositorio donde guardo las fuentes del sitio como para
el que queda publicado.</p>
<p>Estaba muy emocionado escribiendo código en <strong>Python</strong> cuando recordé que <strong>Emacs</strong>
trae <em>su propio servidor http</em> en <strong>simple-httpd.el</strong> y unos cuantos paquetes
para interactuar con <strong>Git</strong>. Así surgió <em>hugo-blog-mode.el</em></p>
<h2 id="hugo-en-modo-sencillo">Hugo en modo sencillo</h2>
<p>Antes de arrancar a escribir <strong>Emacs Lisp</strong> me puse a revisar <strong>MELPA</strong> a ver si
alguien había tenido la misma idea que yo y encontré a <em>easy-hugo.el</em>, que está
genial, pero viene pensado para personas super publicadoras que tienen varios
blogs y los actualizan con mucha frecuencia o algo así. En fin, que tiene un
público objetivo en el cual no me incluyo. La idea siempre fue trasladar el
flujo de trabajo que ya tenía en mente a dos o tres comanditos, ponerle dos o
tres atajos de teclado y utilizar <strong>Magit</strong> lo menos posible en el proceso.</p>
<p>El resultado quedo en un archivito de unas 200 líneas de código con tres comandos.</p>
<ol>
<li><strong>hugo-new-post</strong>, que se explica solito.</li>
<li><strong>hugo-blog-preview</strong>, que mueve todo lo que esté haciendo a la rama <em>develop</em>,
regenera el sitio utilizando una URL local y lanza el navegador para ver como
va quedando.</li>
<li><strong>hugo-blog-publish</strong>, que regenra el sitio utilizando la URL final, hace
<em>commit</em> en <em>develop</em> y me mezcla todo en master.</li>
</ol>
<p>Como estoy utilizando submódulos de <strong>Git</strong> para mantener los repositorios así:</p>
<pre><code>sitio/ (fuentes del sitio)
   |--- content/
   |--- data/
   |--- static/
   |--- themes/
   |--- public/ (submódulo yorodm.guthub.io)
</code></pre><p><strong>hugo-blog-publish</strong> se encarga de hacer los <em>commits</em> y los <em>merges</em> y todo lo que haga falta en los dos repos (de paso, también se encarga de asegurarse de que no haga ningun cambio accidental en master).</p>
]]></content>
		</item>
		
		<item>
			<title>Nuevo blog</title>
			<link>https://yorodm.is-a.dev/blog/creando-un-nuevo-blog-con-hugo/</link>
			<pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate>
			
			<guid>https://yorodm.is-a.dev/blog/creando-un-nuevo-blog-con-hugo/</guid>
			<description>¡Hola! ¡Hola! Bienvenidos a mi más reciente (esperemos que último) intento de crear (y actualizar regularmente) un blog. En esta ocasión decidí alejarme de plataformas más complejas para probar GitHub Pages, Hugo como generador de sitios estáticos, Markdown y claro está Emacs.
Como siempre hablaré de temas relacionados con el desarrollo de software, software libre, lenguajes de programación y mis experiencias (buenas o malas) interactuando con el mundo del software.</description>
			<content type="html"><![CDATA[<h3 id="hola"><strong>¡Hola!</strong></h3>
<p>¡Hola! Bienvenidos a mi más reciente (esperemos que último) intento de crear (y
actualizar regularmente) un blog. En esta ocasión decidí alejarme
de <a href="http://wordpress.com">plataformas más complejas</a> para
probar
<a href="https://pages.github.io">GitHub Pages</a>, <a href="https://github.com/gohugoio">Hugo</a>
como generador de sitios estáticos, Markdown y claro
está <a href="https://www.gnu.org/software/emacs/">Emacs</a>.</p>
<p>Como siempre hablaré de temas relacionados con el desarrollo de software,
software libre, lenguajes de programación y mis experiencias (buenas o malas)
interactuando con el mundo del software.</p>
]]></content>
		</item>
		
	</channel>
</rss>
